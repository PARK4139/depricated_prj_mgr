package com.jungthoonParkCompany.webThymeleaf.java;

import com.jungthoonParkCompany.webThymeleaf.MY_MGR_TERRITORY;
import lombok.*;
import org.apache.commons.lang3.StringUtils;
import org.springframework.boot.SpringApplication;
import org.springframework.util.FileSystemUtils;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.stream.Collectors;

import static com.jungthoonParkCompany.webThymeleaf.java.Mgrs.TextMgr.nbsp;
import static java.lang.System.out;
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>_____  Mgrs

/**
 * description
 * 제가 필요한 Util 을 모두 여기에 모아두었습니다.
 * 이 Util 을 master branch 로서 사용할 것이며.
 * 필요에 따라서는 이곳에서 소스를 수정하고, 다른 곳에 객체를 복사해 만드는 방식으로 개발을 할 생각입니다.
 * class ObjectExtendedFromUtil extends Util 로 실험 하도록
 * Util 에서 Mgrs 로 rename 하도록 refactoring 하였습니다.
 */
public class Mgrs {
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>_____  SenarioMgr
    public static class SenarioMgr {
        public static void play(String SENARIO_NAME) {
            TextMgr.drawPoliceLine("SenarioMgr", "s");
            //TestMgr
            if (SENARIO_NAME.equals("TestMgr")) {
// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>____
                //mkr  여기 정리좀 하자...지저분하다...
                TextMgr.drawIdStamp("tmp");
                TextMgr.drawIdStamp("test");
                TextMgr.drawIdStamp("테스트");

                TextMgr.drawPoliceLine("퇴관복구요청 처리용 텍스트쿼리 추출용 코드", "s");
                String template = "\n" +
                        ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>_ 요청정보 Pseudo-code\n" +
                        "/*\n" +
                        "요청일      :    __________요청일 \n" +
                        "요청자      :    인항공전.행정실.박은실선생님 \n" +
                        "요청내용     :    __________이름 학생 퇴관복구    ||  학생 퇴사 처리를 퇴사 신청상태로 바꿔 주세요\n" +
                        "부가정보     :    __________이름.STD_NO              =    202203066\n" +
                        "부가정보     :    __________이름.ID_NO               =    0211141035261\n" +
                        "부가정보     :    __________이름.RECRUIT_YEAR        =    2022\n" +
                        "부가정보     :    __________이름.RECRUIT_CODE        =    2602000\n" +
                        "부가정보     :    __________이름.VIRTUAL_ACCOUNT     =    27981646618486\n" +
                        "*/  \n" +
                        ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>_ 셀렉트 MEMBER_TB\n" +
                        "SELECT * FROM MEMBER_TB WHERE STD_NO='202203066'\n" +
                        "/*\n" +
n" +
n" +
                        "0211141035261 202203066     D202203080145 OOO                                             1502000 3DB78C92D63EEA4956A67D17BAB2AC2DCA6E3FFAC82868EDF8B7D7D623C2C7C                                                                                                                                                                                                                                                                         2010000 1902001                            vkaho9Yxl9p8s689bhMMVVcftjuqd4j94q9Sp6ZKy5A=                                                                                                                                                                                                                    vkaho9Yxl9p8s689bhMMVVcftjuqd4j94q9Sp6ZKy5A=                                                                                                                                                                                                                    8nU1/LI79XyDV6bc5JrOBuVBbGz+WgqB/YB2sTGHKuW1/Qa/eV1LNamo69AZwvPu                                                                                                                                                                                                52256   경남 산청군 생비량면 지리산대로4284번길 105-4                                                                                                                                                                1층                                                                                                                                                                                                      1701000   5501020 1801000         4.5                  3.97        2022/06/20 12:45:17 BATCH UPDATE  김욱자                                             QZUh0i6o9AsTkA2AeW+AyQRUhEau6+uZWKmJaNvnUR8=                                                                                                                                                                                                                    고모                                               김소민                                             0SsvxjDqjeORA9Rz1OhbM7vR3PVkZyAwHDVGyIszFZ8=                                                                                                                                                                                                                    초중고동창                                          2550115                                                                                                                                                                                                          202206201245194b11132b-6d90-4a17-87ef-c82c2ef2b45b.jpgn" +
                        "\n" +
                        "*/\n" +
                        ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>_ 셀렉트 DORM_APPLY_TB\n" +
                        "SELECT * FROM DORM_APPLY_TB WHERE ID_NO='0211141035261' AND RECRUIT_YEAR='__________리크루트이어' AND RECRUIT_CODE='__________리크루트코드'\n" +
                        "/*\n" +
                        "    SEQ_NO ID_NO         RECRUIT_YEAR RECRUIT_CODE ACL_CD2 APPLY_UNIT MOVE_FORM INTERNET INTERNET_CODE DORM_EXP_RESERVE FOOD_EXP_RESERVE FOOD APPLY_FOOD_DATE FOOD_CODE STD_CODE ROOM_KIND STATUS  BIL_CODE ROOM_NO APPLY_DATE APPLY_METHOD APPLY_METHOD_NEW PASS_METHOD PASS_METHOD_NEW    WAIT_NO MOVE_IN_DATE MOVE_OUT_DATE MOVE_OUT_CODE GATE_NO                        VIRTUAL_ACCOUNT                PASS_VALUE ALLOC_VALUE DEL_YN REG_DATE            REG_ID        SCHOLARSHIP SCHHIP_METHOD SCHHIP_METHOD_NEW CHARACTER_POINT INTVIEW_METHOD INTVIEW_METHOD_NEW HEALTH_POINT  ETC_POINT ETC_POINT1 ETC_POINT2 ETC_POINT3 MOVE_OUT_MEMO                                                                                                                                                                                            BANK_CD BANK_ACCOUNT                                                                                                                                                                                                                                                    BANK_DEPOSIT                                       LAST_MODIFIED       ROOM_CHANGE PASS_FLAG VIRTUAL_ACCOUNT_OUR            EXPENCE_KIND OURHOME_RELEASE OURHOME_APPLY_KIND   SUM_TERM FIRST_TERM SECOND_TERM OURHOME_APPLY_TERM_SUM OURHOME_APPLY_TERM_FIRST OURHOME_APPLY_TERM_SECOND OURHOME_APPLY_CODE_SUM OURHOME_APPLY_CODE_FIRST OURHOME_APPLY_CODE_SECOND SUCCESS_DATE FL_CODE INOUT_EXEMPT ROOM_TEL_NO   IN_YN ETC_MEMO                                                                                                                                                                                                                                                                                                                                                                                                         USER_VISIBLE_YN REPAIR_YN OFFLINE_YN BANK_PIC                                                                                                                                                                                                                                                        SIDE    DIVISION ROOM_METHOD CASH_RECEIPT_KIND CASH_RECEIPT_NUM                                                                                                                                                                                                                                                FLOOR_LEADER CASH_RECEIPT_YN CASH_RECEIPT_DATE ROOM_KIND2 ROOM_KIND3 FIRST_SELECTION SUC_VISIBLE_YN FIRST_IN\n" +
n" +
                        "     16124 0211141035261 2022         2601000              6111000    2702000                          N                N                0                              2302000  2801000   2402000 2902000  715     2021-12-29 1            0                2           0                          2022-02-27   2022-08-13    3004000                                      27981653118586                                        Y      2021/12/29 12:35:12 ejpark        3999000                   0                                                0                                                                                                                                                                                                                                                                                    6012000 eRX+CzoSe+7wslm9ex6p+pGHeCtBGJc8SKwvLeqfcn0=                                                                                                                                                                                                                    OOO                                             2022/08/13 16:31:36             0                                                     6503000                                                                                                                                                                                                                  2022-01-07   3209000 N                          N                                                                                                                                                                                                                                                                                                                                                                                                                      Y               N         N                                                                                                                                                                                                                                                                          7302000 W        0                                                                                                                                                                                                                                                                                             N                                              2803000               8701000         Y              Y        \n" +
                        "     17794 0211141035261 2022         2602000              6111000    2702000                          N                N                0                              2301000  2801000   2402000 0        0       2022-06-20 1            0                2           1                          2022-08-28   2022-08-11    3006000                                      27981646618486                                        Y      2022/06/20 12:45:17 ejpark        3999000                   0                                                0                                                                           기숙사 생활끝                                                                                                                                                                                             6012000 eRX+CzoSe+7wslm9ex6p+pGHeCtBGJc8SKwvLeqfcn0=                                                                                                                                                                                                                    OOO                                             2022/08/11 14:44:33 5002000     0                                                     6503000                                                                                                                                                                                                                  2022-07-08   0       N                          N                                                                                                                                                                                                                                                                                                                                                                                                                      N               N         N                                                                                                                                                                                                                                                                                  W        0                                                                                                                                                                                                                                                                                             N                                              2802000               8701000         Y              N        \n" +
                        "\n" +
                        "*/\n" +
                        ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>_ 업데이트 account_tb\n" +
                        "select * from account_tb where VIRTUAL_ACCOUNT='27981646618486'\n" +
                        "/*\n" +
                        "    SEQ_NO RECRUIT_YEAR RECRUIT_CODE VIRTUAL_ACCOUNT                USE_YN REG_DATE            REG_ID        VIEW_YN\n" +
                        "---------- ------------ ------------ ------------------------------ ------ ------------------- ------------- -------\n" +
                        "      6982 2022         2610000      27981646618486                 N      2018/12/26 11:05:06               Y       \n" +
                        "\n" +
                        "*/\n" +
                        "-- 1> update account_tb set USE_YN='Y'\n" +
                        "-- SELECT * FROM ACCOUNT_TB\n" +
                        "where VIRTUAL_ACCOUNT='27981646618486' \n" +
                        ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>_ 셀렉트 VACS_VACT\n" +
                        "select * from VACS_VACT where acct_no='27981646618486'\n" +
                        "/*\n" +
                        "ORG_CD   BANK_CD ACCT_NO          CMF_NM                         ACCT_ST REG_IL   OPEN_IL  CLOSE_IL FST_IL   LST_IL       TR_AMT TRAMT_COND TRMC_COND TRBEGIN_IL TREND_IL TRBEGIN_SI TREND_SI     SEQ_NO CMS_CD                         RECRUIT_YEAR RECRUIT_CODE ID_NO         GUBUN YEAR MONTH\n" +
                        "-------- ------- ---------------- ------------------------------ ------- -------- -------- -------- -------- -------- ---------- ---------- --------- ---------- -------- ---------- -------- ---------- ------------------------------ ------------ ------------ ------------- ----- ---- -----\n" +
                        "20005688 020     27981646618486   INHATC                         0       20181226                   20190221 20220708            1          0                                                          0                                                                        D                \n" +
                        "\n" +
                        "*/\n" +
                        ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>_ 셀렉트 EXPENCE_TB\n" +
                        "select * from EXPENCE_TB where ID_NO='0211141035261' AND RECRUIT_YEAR='리크루트_이어' AND RECRUIT_CODE='2602000'\n" +
                        "/*\n" +
                        "    SEQ_NO ID_NO         RECRUIT_YEAR RECRUIT_CODE APPLY_CODE IN_RETURN_CODE APPLY_DATE IN_AMT_DATE IN_CODE     IN_AMT BENEFIT_AMT SCHOLAR_AMT    ETC_AMT BANK_NM                                  BANK_ACCOUNT                                                                                                                                                                                                                                                    BANK_DEPOSIT                                       DEL_YN REG_DATE            REG_ID        INTERNET_LOC APPLY_TERM  INAMT_SEQ\n" +
n" +
                        "     20912 0211141035261 2022         2602000      1001001    4301000        2022-07-08 2022-08-28  2201000    1778000           0           0          0                                                                                                                                                                                                                                                                                                                                                             N      2022/07/08 08:45:56 ejpark                                           \n" +
                        "\n" +
                        "*/\n" +
                        ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>_ 셀렉트 moveout_apply_tb\n" +
                        "select * from moveout_apply_tb where ID_NO='0211141035261' AND RECRUIT_YEAR='리크루트_이어' AND RECRUIT_CODE='2602000'\n" +
                        "/*\n" +
                        "ID_NO         RECRUIT_YEAR RECRUIT_CODE APPLY_DATE DEL_YN COMP_YN REG_DATE            REG_ID        MOVE_OUT_MEMO                                                                                        MOVE_OUT_DATE MOVE_OUT_CODE MOVE_OUT_TIME DIVISION\n" +
                        "------------- ------------ ------------ ---------- ------ ------- ------------------- ------------- ---------------------------------------------------------------------------------------------------- ------------- ------------- ------------- --------\n" +
                        "0211141035261 2022         2602000      2022-08-11 N      Y       2022/08/11 11:29:48 0211141035261 기숙사 생활끝                                                                                         2022-08-11    3006000       6301000       W        \n" +
                        "\n" +
                        "*/\n" +
                        ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>_ 업데이트 moveout_apply_tb\n" +
                        "-- 2> update moveout_apply_tb set comp_yn = 'N' \n" +
                        "-- select * from moveout_apply_tb\n" +
                        "where ID_NO='0211141035261' AND RECRUIT_YEAR='리크루트_이어' AND RECRUIT_CODE='2602000'\n" +
                        ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>_ 업데이트 dorm_apply_tb\n" +
                        "\n" +
                        "-- 3> update dorm_apply_tb set del_yn='N',MOVE_OUT_DATE ='0',MOVE_OUT_CODE=null,MOVE_OUT_MEMO=null,in_yn='N' ,VIRTUAL_ACCOUNT='27981655518960' \n" +
                        "-- select * from dorm_apply_tb\n" +
                        "where ID_NO='0211141035261' AND RECRUIT_YEAR='리크루트_이어' AND RECRUIT_CODE='2602000' and in_yn='N'\n" +
                        ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>_ 셀렉트 ROOMCHANGE_HIST_TB\n" +
                        "\n" +
                        "select * from ROOMCHANGE_HIST_TB where ID_NO='0211141035261' AND RECRUIT_YEAR='리크루트_이어' AND RECRUIT_CODE='2602000'\n" +
                        "/*\n" +
                        "선택된 행 없음\n" +
                        "*/\n" +
                        ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>_ 셀렉트 in_amt_tb\n" +
                        "select * from in_amt_tb where ID_NO='0211141035261' AND RECRUIT_YEAR='리크루트_이어' AND RECRUIT_CODE='2602000'\n" +
                        "/*\n" +
                        "    SEQ_NO ID_NO         RECRUIT_YEAR RECRUIT_CODE IN_RETURN_CODE APPLY_CODE IN_MONTH IN_DATE    IN_CODE REG_DATE            REG_ID            IN_AMT CALC_BASIC_DATE INAMT_METHOD INAMT_METHOD_NEW APPLY_TERM COMP_REPAY COMP_DATE\n" +
                        "---------- ------------- ------------ ------------ -------------- ---------- -------- ---------- ------- ------------------- ------------- ---------- --------------- ------------ ---------------- ---------- ---------- ----------\n" +
                        "     26548 0211141035261 2022         2602000      4303000        1001001    08       2022-08-11         2022/08/11 14:44:53 ejpark           1778000 2022-08-11      1            0                                                 \n" +
                        "     25850 0211141035261 2022         2602000      4301000        1001001    07       2022-07-08 2201000 2022/07/08 18:08:33 TRI              1778000 2022-08-28      1            0                           Y          2022-07-08 \n" +
                        "\n" +
                        "*/\n" +
                        ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>_ 델리트 IN_AMT_TB\n" +
                        "-- 4> DELETE FROM IN_AMT_TB \n" +
                        "-- SELECT * FROM IN_AMT_TB\n" +
                        "WHERE ID_NO='0211141035261' AND RECRUIT_YEAR='리크루트_이어' AND RECRUIT_CODE='2602000' AND SEQ_NO='26548' AND IN_RETURN_CODE='4303000'\n" +
                        ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>_ 셀렉트 equipment_tb\n" +
                        "select * from equipment_tb where ID_NO='0211141035261' AND RECRUIT_YEAR='리크루트_이어' AND RECRUIT_CODE='2602000'\n" +
                        "/*\n" +
                        "선택된 행 없음 \n" +
                        "*/";
//                String tmp_2022_12_15_16_09_10=template;
                String tmp_2022_12_15_16_09_10 = template.replaceAll("[/*](.*?)[*/]", "");
                TextMgr.drawPoliceLine("substringBetween() test", "e");
                out.println(StringUtils.substringBetween(template, "/*", "*/"));//이걸로    불필요한부분 을 String [] tmp 에 담는다... 그리고 tmp[i] 에 담긴 내용을 지운다.
                TextMgr.drawPoliceLine("substringBetween() test", "s");
//                String tmp_2022_12_15_16_09_10=template.replaceAll("[/*](.*?)[*/]","");
//                String tmp_2022_12_15_16_09_10=template.replaceAll("/*(.*?)*/", "뿅");

//
//                tmp_2022_12_15_16_09_10 = tmp_2022_12_15_16_09_10.replaceAll("김현지", "__________이름");
//                tmp_2022_12_15_16_09_10 = tmp_2022_12_15_16_09_10.replaceAll("202203066", "__________스튜던트넘버");
//                tmp_2022_12_15_16_09_10 = tmp_2022_12_15_16_09_10.replaceAll("0211141035261", "__________아이디넘버");
//                tmp_2022_12_15_16_09_10 = tmp_2022_12_15_16_09_10.replaceAll("2602000", "__________리크루트코드");
//                tmp_2022_12_15_16_09_10 = tmp_2022_12_15_16_09_10.replaceAll("2022", "__________리크루트이어");
//                tmp_2022_12_15_16_09_10 = tmp_2022_12_15_16_09_10.replaceAll("yyyy mm dd hh:mm", "__________요청일");
                tmp_2022_12_15_16_09_10 = tmp_2022_12_15_16_09_10.replaceAll("__________요청일", "2022 12 15 16:16");
                tmp_2022_12_15_16_09_10 = tmp_2022_12_15_16_09_10.replaceAll("__________이름", "김현지");
                tmp_2022_12_15_16_09_10 = tmp_2022_12_15_16_09_10.replaceAll("__________스튜던트넘버", "202203066");
                tmp_2022_12_15_16_09_10 = tmp_2022_12_15_16_09_10.replaceAll("__________아이디넘버", "0211141035261");
                tmp_2022_12_15_16_09_10 = tmp_2022_12_15_16_09_10.replaceAll("__________리크루트코드", "2602000");
                tmp_2022_12_15_16_09_10 = tmp_2022_12_15_16_09_10.replaceAll("__________리크루트이어", "2022");
                System.out.println(tmp_2022_12_15_16_09_10);
                TextMgr.drawPoliceLine("퇴관복구요청 처리용 텍스트쿼리 추출용 코드", "e");
                //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>____
                TextMgr.drawPoliceLine("extractSQL() test ", "s");
                String context = "select * from EDU_SCHEDULE_TB where RECRUIT_YEAR = '2022' AND RECRUIT_CODE = '2604000'\n" +
                        "\n" +
                        "\n" +
                        "UPDATE EDU_SCHEDULE_TB SET S_DATE='2023-01-01' WHERE RECRUIT_YEAR = '2022' AND RECRUIT_CODE = '2604000' AND MOVE_FORM='2707000'\n" +
                        "\n" +
                        "\n" +
                        "SELECT * FROM EDU_SCHEDULE_TB WHERE RECRUIT_YEAR = '2022' AND RECRUIT_CODE = '2604000' AND MOVE_FORM='2707000'";
                TextMgr.drawPoliceLine("WAY_JSP_QUERY_TO_SQL", "s");
                String tmp_2022_12_15_15_59;
                tmp_2022_12_15_15_59 = context.replaceAll("\" \\+ ", "");
                tmp_2022_12_15_15_59 = tmp_2022_12_15_15_59.replaceAll(" \\+ \"", "");
                tmp_2022_12_15_15_59 = tmp_2022_12_15_15_59.replaceAll("ht.get\\(\"", "");
                tmp_2022_12_15_15_59 = tmp_2022_12_15_15_59.replaceAll("\"\\)", "");
                out.println(tmp_2022_12_15_15_59);
                TextMgr.drawPoliceLine("WAY_JSP_QUERY_TO_SQL", "e");
                TextMgr.drawPoliceLine("customized_2022_12_15_15_54", "s");
                String tmp2022_12_15_15_57 = TextMgr.extractSQL(context, "WAY1");
                String tmp3 = TextMgr.extractSQL(tmp2022_12_15_15_57, "WAY2");
                String tmp4 = TextMgr.extractSQL(tmp3, "WAY3");
                String tmp5 = tmp4.replaceAll("\"\\\\n", "");
                out.println(tmp5);
                TextMgr.drawPoliceLine("customized_2022_12_15_15_54", "e");
                TextMgr.drawPoliceLine("WAY_CUSTOM2", "s");
                String tmp11 = TextMgr.extractSQL(context, "WAY_CUSTOM2");
                String tmp22 = TextMgr.addPrefixToAllLine("sql.append(\"\\n\").append(\"", tmp11);
                String tmp33 = TextMgr.addSuffixToAllLine("\");", tmp22);
                out.println(tmp33);
                TextMgr.drawPoliceLine("WAY_CUSTOM2", "e");
                TextMgr.drawPoliceLine("WAY2 and 3", "s");
                String tmp221501 = TextMgr.extractSQL(context, "WAY2");
                String tmp221500 = TextMgr.extractSQL(tmp221501, "WAY3");
                out.println(tmp221500);
                TextMgr.drawPoliceLine("WAY2 and 3", "e");
                TextMgr.drawPoliceLine("extractSQL() test ", "e");
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>____
                TextMgr.drawPoliceLine("align() test", "s");
                String Text = "   withvMember.appendQueryString(\"SELECT * \");\n" +
                        "                withvMember.appendQueryString(\"FROM EDU_SCHEDULE_TB \");\n" +
                        "                withvMember.appendQueryString(\"WHERE RECRUIT_YEAR = '2022' \");\n" +
                        "                withvMember.appendQueryString(\"AND RECRUIT_CODE = '2604000' \");\n" +
                        "                withvMember.appendQueryString(\"AND MOVE_FORM='2707000' \");";
                System.out.println(TextMgr.align(Text, "\");", "3"));
                TextMgr.drawPoliceLine("align() test", "e");
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>____
            }
            //ScheduleMgr
            if (SENARIO_NAME.equals("ScheduleMgr")) {
                ScheduleMgr.MonitoringAndInform(CODE.WAY_MM);
            }
            //itcDormMgr
            if (SENARIO_NAME.equals("itcDormMgr")) {
                //객체지향형 실무 시나리오 마다 메모
                //시나리오 가정
                Person itcAdministrativeOfficeMember = new Person();                         // 행정실 선생님
                Person withvMember = new Person();                                           // 박정훈 || 김주현 부장님
                Person itcStudentMember = new Person();                                      // 재학생 여성우크라이나인 1명
                NotPerson chromeBrowser = new NotPerson();


                //run 'itc Tomcat v8.0 intac (DESKTOP-I25VIFM local dev web server)
                win10PcMgr.run("EXPLORER" + nbsp + "\"E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\0. ITC DORM SYSTEM Map\\run dorm web server via local.lnk\"");//DESKTOP-I25VIFM local dev server
                SenarioMgr.speak("DESKTOP-I25VIFM_local_dev_server_excution_via_eclipse" + nbsp + m2);
                SenarioMgr.req("click 'itc Tomcat v8.0 intac'", "VIA MOUSE");
                SenarioMgr.req("run 'itc Tomcat v8.0 intac'", "CTRL ALT R");


//login login login login login login login login login login login login login login login login login login login login login login login login login _s
                withvMember.access("https://localhost:9090/RPA.jsp", "WAY_URL");
                withvMember.access("https://localhost/home/login/supervisor_login.jsp", "WAY_URL");
                withvMember.login("withvision", "6952!itc", "system");
                SenarioMgr.speak("관리자 로그인" + nbsp + m2);
                TextMgr.drawLineWithoutTextAndPause("0EA");
//login login login login login login login login login login login login login login login login login login login login login login login login login _e


                TextMgr.drawPoliceLine("core ", "s");
                //입사신청 모집 전 itcAdministrativeOfficeMember 가 해야 할 선행작업 목록
                //기간들(기간항목별) 을 설정
                //가용 입사정원(입사선발계획 T/O 인원수) 설정
                //신청기간 자동등록
                //입사비용 자동등록
                //객실정보 등록
                //가용 기숙사 공석(부여가능객실) 설정
                //가용 VA(부여가능VA) 설정
                //개인정보 등록
                TextMgr.drawPoliceLine("core ", "e");


                //기간들(기간항목별 )  을 설정  (입사신청 기간, 룸메이트신청 기간,합격자조회 기간, 납부 기간, 입사서류제출 기간)
                itcAdministrativeOfficeMember.access("https://localhost/admin/standard/schedule_application.jsp", "WAY_URL");
                itcAdministrativeOfficeMember.set2("2022", "2학기");
                itcAdministrativeOfficeMember.click("조회");//합격시 T/O반영 여부 설정
                itcAdministrativeOfficeMember.click("radio_btn");//합격시 T/O반영 여부 설정
                if (!PERIODS_ADMIN_WANT) {
                    itcAdministrativeOfficeMember.click("등록");//합격시 T/O반영 여부 설정
                    itcAdministrativeOfficeMember.set8("2022(년도)", "2학기(학기)", "생활관신청(신청항목)", "전체모집(모집단위)", "2022-12-02(신청기간시작일)", "9(신청기간시작시)", "2022-12-09(신청기간종료일)", "24(신청기간종료시)");
                    itcAdministrativeOfficeMember.click("저장");
                    if (chromeBrowser.speak("중복된값이 있습니다.")) {
                        TrainingMgr.speakSolution("중복된 신청기간 이 있기 때문", "신청기간조회 및 중복기간 피해서 신청기간 등록");
                        //부장님이 설정해두신 것으로 보이는 기간을 데이터를 손대지 하지 않으려고 등록을 눌렀는데..
                        //신청기간 추가등록이 시도하였으나 불가능...하였습니다.
                        //신청기간 업데이트 진행하였습니다.
                        //추후에 원상복구 시키기 위해서는 "E:\500GB\do\timeline\개발서버 내 업무 시나리오별 테스트 내역\테스트적용계획파일\2022 12 02 15 13 신청기간 개발서버 초기값.PNG" 를 참고해서 되돌리세요..
                        //신청기간이 지나 있어서 지금 신청이 가능하도록 모든 신청항목에 대한 신청기간 을 2주간 뒤로 미루고 원상복구를 위해서 스크린샷을 찍어두었으나.
                        //몇 일뒤 다시 보니 복구 되어 있었음... 부장님이 되돌리신게 아닌가 싶었습니다.. 업무에 방해가 된듯하다..죄송..스럽.
                    }
                }
                //만약 정상 처리가 되었습니다면 APPLY_TERM_TB 에 term(기간) 이 기간항목 별로  레코드가 들어 있을 것입니다.
                SenarioMgr.speak("신청기간 등록" + nbsp + m2);
                TextMgr.drawLineWithoutTextAndPause("0EA");


                //합격자 T_O 설정  (기숙사 신청 모집 가용 합격 인원)
                //합격자 T_O 를 기숙사 모집에 대한 소속성격별(신입생, 외국인 특별관리), 성별(호실성별제한), 객실별T_O집계(공실집계!) 에 따라서 전체정원 이 얼마나 일지... 계획 해서 설정..
                //기숙사 모집 합격 가용인원 설정(합격T/O관리)//새 탭 파생설계 후 더 이상 사용하지 않는 다고 들었던것 같습니다..
                itcAdministrativeOfficeMember.access("https://localhost/admin/standard/info_to.jsp", "WAY_URL");// 이 URL   deprecated 인지 다시 한번 확인...
                itcAdministrativeOfficeMember.access("https://localhost/admin/standard/info_to_view.jsp", "WAY_URL");
                itcAdministrativeOfficeMember.set3("2022", "2학기", "Y");
                itcAdministrativeOfficeMember.click("저장");//합격시 T/O반영 여부 설정//정확한 개념을 잘 모르겠습니다...확인이 필요합니다. 당연히 T/O 반영이 되어야 할 것이라고 생각해서 Y 를 임의 부여 하였습니다.
                itcAdministrativeOfficeMember.set6("2022", "2학기", "신입생(소속성격)", "신입생(소속성격)", "4인실(객실종류)", "여자(성별)");
                itcAdministrativeOfficeMember.click("조회");
                itcAdministrativeOfficeMember.click("radio btn");//해당 dorm_apply_tb 의 학생에 대해서   //신입생 여자 4인실
                itcAdministrativeOfficeMember.set2("1(인원)", "사용(사용여부)"); // 사용 으로 해두면 공실이 사용가능이 생길 것이라고 생각을 하였습니다.
                itcAdministrativeOfficeMember.click("저장");
                chromeBrowser.speak("처리되었습니다.");
                itcAdministrativeOfficeMember.click("확인");


                //입사선발계획 T/O(인원수) 노출 설정
                //(입사선발계획 T/O에 등록된 내용은 입사신청 페이지에 노출되므로 면밀한 관리자 확인이 필요합니다.)
                itcAdministrativeOfficeMember.click("등록");
                itcAdministrativeOfficeMember.set14(
                        "Y(사용여부)",
                        "0000 00 입사선발계획 T/O공지 테스트(제목)",
                        "0(2인실A,남자신입생)",
                        "0(2인실A,남자재학생)",
                        "0(2인실A,여자신입생)",
                        "0(2인실A,여자재학생)",
                        "0(2인실B,남자신입생)",
                        "0(2인실B,남자재학생)",
                        "0(2인실B,여자신입생)",
                        "0(2인실B,여자재학생)",
                        "0(4인실,남자신입생)",
                        "1(4인실,남자재학생)",
                        "0(4인실,여자신입생)",
                        "0(4인실,여자재학생)"
                );
                itcAdministrativeOfficeMember.click("저장");
                chromeBrowser.speak("나머지 선발계획은 미사용처리됩니다.");
                chromeBrowser.speak("TBD");
                chromeBrowser.speak("TBD");
                //저장을 하면 dorm_ipsa_title_tb 에 레코드가 들어가고...
                //admin 에서 사용여부는 제거가 되는데 ....
                //admin 에서 delete 는 않되나 보다...
                //db client program 으로 delete 해야 하나 필요한가 보다..
//caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution_s
                //delete from DORM_IPSA_TITLE_TB
                //WHERE RECRUIT_YEAR = '2022'
                //AND RECRUIT_CODE  = '2602000'
//caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution_e
//caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution_s
                //COMMIT
//caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution_e


                //입사기간 자동등록
                //TBD
                //자동등록 후에 반드시 신청기간 날짜를 수정할것!!


                //신청기간 자동등록
                //TBD
                //자동등록 후에 반드시 신청기간 날짜를 수정할것!!


                //입사비용 자동등록
                //TBD


                //객실정보 등록
                itcAdministrativeOfficeMember.access("https://localhost/admin/standard/info_room.jsp", "WAY_URL");
                itcAdministrativeOfficeMember.click("조회");
                if (!ROOM_ADMIN_WANT) {
                    if (WAY.equals("자동등록")) {
                        itcAdministrativeOfficeMember.click("자동등록");
                    }
                    if (WAY.equals("등록")) {
                        itcAdministrativeOfficeMember.click("등록");
                    }
                }
                if (!ROOM_USE_YN_ADMIN_WANT) {
                    itcAdministrativeOfficeMember.click("select boxes or a box");
                    itcAdministrativeOfficeMember.click("수정");
                }


                //기숙사 모집 희망모집T/O 설정(합격T/O관리_NEW)
                //도움말에는 해당페이지의 사용순서가 나와있지 않습니다. 맥락상으로 데이터를 넣어보았습니다.
                itcAdministrativeOfficeMember.access("https://localhost/admin/standard/info_to_view.jsp", "WAY_URL");
                itcAdministrativeOfficeMember.set2("2022(모집구분)", "2학기(모집구분)");
                itcAdministrativeOfficeMember.click("조회");
                itcAdministrativeOfficeMember.set1("적용중(합격시 T/O 적용 여부)");//조회를 누르면 적용중으로 자동으로 바뀝니다. // 적용중을   적용 으로 바꾸는 것은 어떤가?..
                itcAdministrativeOfficeMember.set12("0(희망모집T/O(②))", "0(희망모집T/O(②))", "0(희망모집T/O(②))", "0(희망모집T/O(②))", "0(희망모집T/O(②))", "0(희망모집T/O(②))", "0(희망모집T/O(②))", "0(희망모집T/O(②))", "0(희망모집T/O(②))", "0(희망모집T/O(②))", "0(희망모집T/O(②))", "0(희망모집T/O(②))");//
                itcAdministrativeOfficeMember.click("저장");//
                chromeBrowser.speak("적용 여부 및 등록된 T/O를 저장하시겠습니까?");
                itcAdministrativeOfficeMember.click("확인");
                chromeBrowser.speak("저장되었습니다.");
                itcAdministrativeOfficeMember.click("확인");

                //입사선발계획 T/O 공지   (입사선발계획 T/O(인원수))
                itcAdministrativeOfficeMember.access("https://localhost/admin/standard/info_to_view.jsp", "WAY_URL");
                itcAdministrativeOfficeMember.click("등록");
                itcAdministrativeOfficeMember.set2("미사용(사용여부)", "박정훈 2022 겨울방학(동계방학) 입사생 모집 공고 테스트(제목)");
                itcAdministrativeOfficeMember.set12("0", "0", "0", "0", "0", "0", "0", "0", "0", "1(2인실A.여자.재학생)", "0", "0");
                itcAdministrativeOfficeMember.click("저장");
                chromeBrowser.speak("나머지 선발계획은 미사용처리됩니다.");
                itcAdministrativeOfficeMember.click("확인");
                chromeBrowser.speak("저장하시겠습니까?");
                itcAdministrativeOfficeMember.click("확인");
                chromeBrowser.speak("처리되었습니다.");
                itcAdministrativeOfficeMember.click("확인");
                itcAdministrativeOfficeMember.set1("사용(사용여부)");


                // VA 등록
                // itcAdministrativeOfficeMember.VA등록
                // bank 로 부터 받은 VA등록
                // HF 로 부터 받은 VA등록
                itcAdministrativeOfficeMember.access("https://localhost/admin/standard/account_dorm.jsp", "WAY_URL");
                itcAdministrativeOfficeMember.set1("부여가능(사용여부)");
                itcAdministrativeOfficeMember.click("조회");
                if (!VA_ADMIN_WANT) {
                    itcAdministrativeOfficeMember.click("등록");
                }
                if (!VA_USE_YN_ADMIN_WANT) {
                    itcAdministrativeOfficeMember.click("select boxes or a box");
                    itcAdministrativeOfficeMember.click("수정");
                }
                itcAdministrativeOfficeMember.set2("우리은행(은행명)", "인하공전전문대학(예금주)");
                itcAdministrativeOfficeMember.click("저장");
                //저장을 누르면
                //ACCOUNT_BANKNAME_TB 에 update 가 된다.
                chromeBrowser.speak("저장되었습니다.");
                itcAdministrativeOfficeMember.click("확인");


                //개인정보 일괄등록
                //member_info.xls 을 이용하여 member_tb 에 member_tb.record 를 등록하는 과정
                //외부연동 인 학적연동 을 통해서 member_tb.record 가 들어갑니다.
                //학적정보가 외부연동 되었는데도 member_tb.record 가 없는 경우라면 itcAdministrativeOfficeMember 가 member_tb.record를 insert 하는 기능
                //업로드 버튼을 누르면 member_tb.record 가 있으면 update 없으면 insert.
                itcAdministrativeOfficeMember.access("https://localhost/admin/system/member_reg.jsp", "WAY_URL");
                itcAdministrativeOfficeMember.click("양식파일"); //member_info.xls (양식파일) 이 download 폴더 에 다운로드가 됩니다.
                itcAdministrativeOfficeMember.access("\"C:\\Users\\JungHoonPark\\Downloads\\member_info.xls\"", "PHYSICAL_WAY"); // member_info.xls 를 complete 하기 위해서 접근을 합니다.
                itcAdministrativeOfficeMember.insert("재학생여성우크라이나인 1명 학적등록", "member_info.xls");// 가정 대로 엑셀양식에 데이터 입력
                itcAdministrativeOfficeMember.access("member_reg.jsp", "PHYSICAL_STYLE");//엑셀을 사용하여 member_tb 에 일괄등록.
                itcAdministrativeOfficeMember.click("업로드");
                chromeBrowser.speak("총 1명이 처리되었습니다.");
                itcAdministrativeOfficeMember.click("확인");
                SenarioMgr.speak("개인정보 일괄등록 " + nbsp + m2);
                TextMgr.drawLineWithoutTextAndPause("0EA");
                //member_tb 에 id_no (6(생년)+7(일련번호)= 13 자리) 가 생성.
                //member_tb 에서 고유한 레코드를 의미하는..PK 로 추정된다.. 테이블 정의서에는 PK 미표기...


                //입사신청 단건등록 (itcStudentMember)
                itcStudentMember.access("https://localhost/home/main.jsp", "WAY_URL");
                itcStudentMember.click("1.입사신청");
                itcStudentMember.set3("20220001(학번||수험번호)", "940405(생년월일)", "신입생한국인(이름)");
                itcStudentMember.click("동의함");
                itcStudentMember.click("동의함");
                itcStudentMember.click("동의함");
                itcStudentMember.click("동의함");
                itcStudentMember.click("신청");
                //사진 2MB JPG||GIF 로 등록, 나머지 등록
                TrainingMgr.speak("SUCCESS", "이제 학생은 DORM_APPLY_TB 에 들어 갔을 겁니다. 이제 합격 시키러");
                SenarioMgr.speak("기숙사 입주 신청 " + nbsp + m2);
                TextMgr.drawLineWithoutTextAndPause("0EA");


                //입사신청 일괄등록
                itcAdministrativeOfficeMember.access("https://localhost/admin/application_dorm/application_dorm_bundle.jsp", "WAY_URL");
                itcAdministrativeOfficeMember.set2("2022-12-08(합격일)", "2022-12-08(입금계산기준일)");//오늘날짜로 자동설정된 값을 넣었습니다.
                //입금계산기준일은 합격일 도 입주시작예정일 도 아니라 입주시작실제일 이 적용되는 것 같습니다. (실제 거주한 일자를 일할계산을 해야하는 부분이 있어서 인것 같습니다.)
                //만약에 중간에 넣는 경우라면 입주시작실제일 이 입주시작예정일 보다 우선되어 입주시작실제일 을 넣는 것이 바람직해 보입니다.
                itcAdministrativeOfficeMember.click("양식파일");
                itcAdministrativeOfficeMember.insert("대상자들", "application.xls");
                itcAdministrativeOfficeMember.click("파일선택");
                itcAdministrativeOfficeMember.click("업로드");
                chromeBrowser.speak("총 업로드된 데이타 1건");
                chromeBrowser.speak("신규신청:0건");
                chromeBrowser.speak("수정:1건");
                chromeBrowser.speak("학번 오류:");
                chromeBrowser.speak("(복사 필요시 CTRL+C 한 후 메모장에 붙여넣으세요.)");
                itcAdministrativeOfficeMember.click("확인");
                itcAdministrativeOfficeMember.click("select box");
                //합격자확정
                itcAdministrativeOfficeMember.click("합격자확정");
                itcAdministrativeOfficeMember.record("입금기준일");//2022 12 02
                itcAdministrativeOfficeMember.click("확인");
                if (chromeBrowser.speak("배정가능한 T/O가 없습니다.")) {
                    TrainingMgr.speakSolution("배정가능한 TO 가 없습니다.", "가용한 VA 집계값,가용한 객실 수용인원(객실정보),TO 집계값 을 확인하고 그 인원 만큼만 허용하도록");
                    //account_tb 에서 가용한 VA 집계값(배정가능한)은 3000 개 레코드 중 952 개가 나왔습니다..
                    //가용한 VA 집계값과 합격확정할 인원의 집계값 과 비교하여 가용한 VA 집계값이 더 많아야 로직이 진행이 됩니다는 것을 application_select_db.jsp 에서 확인하였습니다..
                    //또한
                    //가용한 방의 TO 집계값과 합격확정할 인원의 집계값 과 비교하여 가용한 방의 TO 집계값이 더 많아야 로직이 진행이 됩니다는 것을 application_select_db.jsp 에서 확인하였습니다..
                    // 여기서 합격자확정을 누르는 것 말고 합격자 탭에 가서 합격자선정 후 합격자확정을 누르는 것이 바람직해 보입니다.
                    //System은 가용한 방의 TO 가 없다고 하니, 객실현황 조회를 해봅니다....없다면...객실정보 를 등록하지 않았을 수 있습니다. 그렇다면 객실정보 등록을 해야합니다.
                    //생각이 틀렸습니다.  배정가능한 T/O 는 기준관리에서 합격자 T_O  관리 에서 관리자가 설정하는 내용이었습니다.
                    //이런 멘트는 기준관리에서 합격자 T_O  관리 에서 관리자가 설정 하면 해결이 됩었습니다....
                    //객실정보 는 객실정보조회/객실정보수정/객실정보조회/객실정보등록/객실정보자동등록 ... 이 가능하며    실제 객실에 대한 spec 을 작성하면 되는 것으로 보입니다...
                    //객실 T/O ... 객실수용가능인원 과 같은 의미입니다...
                }
                // 사진은 학생이 등록해야 하는 것 같아 보입니다..


                //합격자 선정
                //(다음에는 합격자 일괄등록 해보자) (합격자 탭)
                itcAdministrativeOfficeMember.access("https://localhost/admin/success/success_select.jsp", "WAY_URL");
                itcAdministrativeOfficeMember.set16("2022(모집구분)", "2학기(모집구분)", "학부(소속별)", "---전체---(소속별)", "---전체---(소속별)", "신입생(소속성격)", "(우선선발여부)", "0(커트라인)", "24주(입사기간)", "1학년(학년)", "해당없음(일반신청)(우선선발구분)", "2022-12-05(합격일)", "여자(성별)", "''(이름)", "4인실(객실종류)", "2022-08-13....이상한데...2022-08-28 같은데..확인필요..(입금계산기준일)");
                //(입금계산기준일) 은 언제로 맞춰야 하는지 모르겠음. 이번 모집은 입주시작일이 2022 08 28(일요일) 인데 2022 08 28 일 부터 가격 때리면 되는 거겠지?...
                itcAdministrativeOfficeMember.click("합격자선발");
                itcAdministrativeOfficeMember.click("select box");//자동 선택이 되었습니다.
                itcAdministrativeOfficeMember.click("합격자확정");
                chromeBrowser.speak("입금기준일은:2022-08-13");
                chromeBrowser.speak("합격자 확정을 하시겠습니까?");
                itcAdministrativeOfficeMember.click("확인");
                chromeBrowser.speak("처리되었습니다.");
                itcAdministrativeOfficeMember.click("확인"); //잔여객실T/O='0' 인데...왜 되었는지 모르겠습니다...
                // ...잔여객실T/O 가 0 인 것을 발견하겠습니다.... 0 이면 안될것 같은데.. 이부분을 찾아보기로 하겠습니다..
                // success_select.jsp 에서 찾을 수가 없어서.
                // eclipse 에서 범위를 project 로 하여 찾아보기로 하겠습니다.. 찾아보니 room_assign_fnc.jsp 로 오게 되었습니다
                // 결국, 코드간 연결고리를 찾지 못하겠습니다...
                // 그런데 문득 든 생각인데   입사기간 중에 별도로 학생이 들어오는 경우라면
                // 상식적으로   과금시작일="그 학생의 입주일",  과금종료일="입주기간종료일" 이겠지?
                // (입금계산기준일) 에 대해서 제대로 알 필요가 있습니다.
                // 이제 예상대로라면 member_tb 의 DORM_ID 를 부여를 받았을 것입니다.
                // 조회해보니 그렇지 않았습니다.
                // DORM_ID 는 합격자만 부여받을 수 있는 데이터 였습니다.
                // 합격을 시키면 expence_tb 에 학생이 insert 됩니다.
                // ... 좀더 자세히 봐야 합니다 ...


                // 합격 조회
                itcAdministrativeOfficeMember.access("https://localhost/admin/success/success_inquiry.jsp", "WAY_URL");
                itcAdministrativeOfficeMember.click("조회");
                TrainingMgr.speak("FAIL", "합격 되었으나 사용자화면에 표시되지 않는 학생이 있습니다.");
                itcAdministrativeOfficeMember.click("확인");
                //비로서 dorm_apply_tb 에서 DORM_ID 를 부여 받았을 것으로 생각이 됩니다.
                //dorm_apply_tb 에는 ...dorm_id 가 없었습니다..
                //그리고 member_tb 에도  ....dorm_id 가 없었습니다.


                // 합격 공지 (합격노출여부="Y" 로 변경)
                itcAdministrativeOfficeMember.click("select box");
                itcAdministrativeOfficeMember.click("노출여부변경");
                itcAdministrativeOfficeMember.click("저장");
                chromeBrowser.speak("처리되었습니다.");
                itcAdministrativeOfficeMember.click("확인");
                // ...홈페이지에 합격을 노출하는 것을 의미하는 지 확인이 필요...
                //이제 dorm_apply_tb 의 SUC_VISIBLE_YN=Y로 update 가 될것입니다.


                // 합격 통지 SMS 를 전송.
                itcAdministrativeOfficeMember.click("SMS전송");
                //이것은 테스트를 해도 되는지 확인이 필요하며 itcAdministrativeOfficeMember 로서 사용할 일은 드물 것 같습니다.


                // 로그인 (itcStudentMember)
                itcStudentMember.access("https://localhost/home/login/login.jsp", "WAY_URL");
                itcStudentMember.login("20220001", "940405", "itcStudentMember");// ID="학번", initial_PW="생년월일"||"symetrical pw"
                if (chromeBrowser.speak("비밀번호를 변경해주시기 바랍니다.")) {
                    itcStudentMember.type("기존비밀번호", "KEYBOARD");
                    itcStudentMember.type("신규비밀번호", "KEYBOARD");//symetrical password
                    itcStudentMember.type("비밀번호확인", "KEYBOARD");
                    itcStudentMember.click("수정");
                }


                //입사신청결과 확인 via 기숙사홈페이지 로그인 (itcStudentMember)
                itcStudentMember.access("기숙사홈페이지", "WAY_URL");
                itcStudentMember.click("2.입사확정자 조회");
                if (chromeBrowser.speak("입사 확정자 조회기간이 아닙니다.\n" + "관리자에게 문의하세요!")) {
                    itcAdministrativeOfficeMember.access("https://localhost/home/login/supervisor_login.jsp", "WAY_URL");
                    itcAdministrativeOfficeMember.login("withvision", "6952!itc");// as system
                    itcAdministrativeOfficeMember.access("https://localhost/admin/standard/schedule_application.jsp", "WAY_URL");
                    //...부장님이 2주 전으로 다시 되돌려 두신 것 같다...데이터를 업데이트 하고 작업이 끝난 뒤에는 항상 데이터를 복구 해두어야 됩니다...
                    //나중에 다시 해보자.
                }


                //합격통지 확인 via 스마트폰 SMS (itcStudentMember)
                itcStudentMember.chk("SMS통지");// 아마 학생 개인의 스마트폰으로 확인이 가능할 것입니다.


                //회계관리
                //입금예정처리
                itcAdministrativeOfficeMember.access("https://localhost/admin/inamt/havent_paid.jsp", "WAY_URL");
                itcAdministrativeOfficeMember.click("미입금조회");
                itcAdministrativeOfficeMember.click("select_boxes");
                itcAdministrativeOfficeMember.click("입금예정처리");
                chromeBrowser.speak("입금예정처리를 하시겠습니까?");
                itcAdministrativeOfficeMember.click("확인");
                chromeBrowser.speak("처리되었습니다");
                itcAdministrativeOfficeMember.click("확인");//입금예정처리를 완료하니 이름 이 검은색 에서 파란색 으로 바뀌었습니다
                //.....그런데 할인금액이 82000 원이 있습니다... 다른 샘플 학생들은 할인금액="0" 인데... 확인이 필요합니다...
                //확인해보니...입사비용 설정 (https://localhost/admin/standard/expense_dorm.jsp) 시 제대로 하지 않은 것 이었습니다.
                //..입사비용 설정하는데... 일할금액 x 입사일수 를 해도 기본금액 이랑 비슷하긴 한데 어떤건 크기도 하고 어떤건 작기도 하다... 가격책정 정책이 궁금하다...
                //입금예정처리 를 하게되면
                //IN_AMT_TB 에다가 expence_tb 의 생활관신청자를 골라서 입금자로 간주 하고 삽입을 합니다.
                //dorm_apply_tb 에서 dorm_exp_reserve = 'Y' 가 update 되는데  (입금확약여부)


                //입금절차
                //itcStudentMember.입금시도   //via="CD/ATM기"||"은행창구"||"INTERNET/TELE-BANKING"
                //bank.수취조회요구
                //HF.수취조회요구
                //itcDormSystem.수취조회
                //itcDormSystem.수취조건체크업무
                //if(itcDormSystem.VACS_VACT.acct_st=="1"){
                //}else{itcDormSystem.VACS_ERRLOG.record=true}
                //itcDormSystem.수취조회응답
                //HF.수취조회응답
                //if(HF.수취조회응답결과==0){
                //bank.입금
                //bank.입금요구
                //HF.입금요구
                //if(HF.입금요구결과==입금완료){
                //itcDormSystem.updateOrInsertTables();
                //VACS_VACT.record=true
                //VACS_AHST.inp_st='1'(입금)
                //VACS_TOTL.
                //itcDormSystem.입금응답
                //HF.입금응답
                //}
                //}


                //입금취소
                //itcStudentMember.입금취소시도   //via="CD/ATM기"||"은행창구"||"INTERNET/TELE-BANKING"
                //bank.수취조회요구
                //HF.수취조회요구
                //itcDormSystem.수취조회
                //itcDormSystem.수취조건체크업무
                //if(itcDormSystem.VACS_VACT.acct_st=="1"){
                //}else{itcDormSystem.VACS_ERRLOG.record=true}
                //itcDormSystem.수취조회응답
                //HF.수취조회응답
                //if(HF.수취조회응답결과==0){
                //bank.입금취소
                //bank.입금취소요구
                //HF.입금취소요구
                //if(HF.입금취소요구결과){
                //itcDormSystem.updateOrInsertTables();
                //VACS_VACT.record=true
                //VACS_AHST.inp_st='2'(입금취소)
                //VACS_TOTL.
                //itcDormSystem.입금취소응답
                //HF.입금취소응답
                //}
                //}


                //입금예정액 수정
                itcAdministrativeOfficeMember.access("https://localhost/admin/inamt/havent_paid.jsp", "WAY_URL");
                itcAdministrativeOfficeMember.click("미입금조회");
                itcAdministrativeOfficeMember.click("select box");
                itcAdministrativeOfficeMember.click("입금예정액 수정");
                //....중요도가 떨어지는 것 같다고 판단이 들었습니다.....다음기회에....


                //객실현황 조회
                itcAdministrativeOfficeMember.access("https://localhost/admin/room/room_inquiry.jsp", "WAY_URL");
                if (!현입사생_chk_box_status.equals("chked")) {
                    itcAdministrativeOfficeMember.click("chk box of 현입사생");//기본적으로 chk 가 되어 있어서 누를 일이 없다.
                }
                itcAdministrativeOfficeMember.set5("2022-12-06(조회일자)", "A동(검색조건)", "---전체---(검색조건)", "4인실(객실종류)", "---전체---(객실상태)");
                itcAdministrativeOfficeMember.click("조회");


                //객실배정 일괄등록(객실일괄배정)
                //엑셀로 하는 것 ... 나중에 ..


                //객실배정(배정확정)
                itcAdministrativeOfficeMember.access("https://localhost/admin/room/room_assign.jsp", "WAY_URL");
                itcAdministrativeOfficeMember.set19(
                        "2022(모집구분)",
                        "2학기(모집구분)",
                        "학부(소속별)",
                        "기계공학부(소속별)",
                        "기계과(소속별)",
                        "여자(성별)",
                        "A동(건물별)",
                        "---전체---(건물별)",
                        "---전체---(건물별)",
                        "신입생(소속성격)",
                        "신입생(소속성격)",
                        "4인실(객실종류)",
                        "입금예정(입금여부)",//이번의 경우는 입금예정 처리를 했기 때문에....
                        "2021-12-07(신청기간)",//시작일<=학생의 신청기간
                        "2022-12-07(신청기간)",//학생의 신청기간<=종료일
                        "24주(방학포함)(입사기간)",
                        "신규입사생(신청구분)",
                        "1학년(학년)",
                        "N(룸메이트 신청)");
                itcAdministrativeOfficeMember.click("모의배정");
                //모의배정 내용을 확인하여야 합니다.
                itcAdministrativeOfficeMember.click("배정확정");
                chromeBrowser.speak("1건의 배정이 이루어졌습니다.");
                itcAdministrativeOfficeMember.click("확인");
                //member_tb 의 dorm_id 가 들어왔는지 확인..
                //member_tb 의 dorm_id 가 할당이 된것을 확인하였습니다.
                //자꾸 dorm_id 가 합격자에게 부여가 된다고 문서에 표현된 곳이 많은데....
                //정확히는 객실배정확정 이 되고서 할당이 되는 것을 확인하였습니다.


                //객실배정결과 공지(객실배정결과노출여부='Y'로 변경)
                itcAdministrativeOfficeMember.access("https://localhost/admin/room/room_assign_result_list.jsp", "WAY_URL");
                itcAdministrativeOfficeMember.set1("N(노출여부)");
                itcAdministrativeOfficeMember.click("조회");
                itcAdministrativeOfficeMember.click("select boxes or a box");
                itcAdministrativeOfficeMember.click("노출여부변경");
                itcAdministrativeOfficeMember.set1("Y(사용자화면 노출 여부)");//자동 선택이 되므로 설정할 필요가 없습니다.
                itcAdministrativeOfficeMember.click("저장");
                chromeBrowser.speak("처리되었습니다.");
                itcAdministrativeOfficeMember.click("확인");
                //DORM_APPLY_TB 의 SUC_VISIBLE_YN="Y"(객실배정결과노출여부="노출하기") 로  update 되었음을 확인하였습니다.


                //객실이동(FAIL)
                itcAdministrativeOfficeMember.access("https://localhost/admin/room/room_assign_result_list.jsp", "WAY_URL");
                itcAdministrativeOfficeMember.click("조회");
                itcAdministrativeOfficeMember.click("select box");
                itcAdministrativeOfficeMember.click("이동");
                itcAdministrativeOfficeMember.set6("2022-12-07(이동일)", "A동(건물명)", "지상2층(층명)", "4인실(객실종류)", "--전체--(사용여부)", "--전체--(현재인원)");
                itcAdministrativeOfficeMember.click("조회");
                itcAdministrativeOfficeMember.click("이동");
                chromeBrowser.speak("출입통제 서버 연결이 불안정 합니다. 출입통제 업체로 문의해 주세요.");
                //.....다음기회에....


                //객실내위치변경
                itcAdministrativeOfficeMember.access("https://localhost/admin/room/room_assign_result_list.jsp", "WAY_URL");
                itcAdministrativeOfficeMember.click("조회");
                itcAdministrativeOfficeMember.click("select box");
                itcAdministrativeOfficeMember.click("객실내위치변경");
                itcAdministrativeOfficeMember.set1("3(객실내 위치)");
                itcAdministrativeOfficeMember.click("저장");
                chromeBrowser.speak("저장하시겠습니까?");
                itcAdministrativeOfficeMember.click("확인");
                chromeBrowser.speak("처리되었습니다.");
                itcAdministrativeOfficeMember.click("확인");


                //객실배정취소(배정취소)
                itcAdministrativeOfficeMember.access("https://localhost/admin/room/room_assign_result_list.jsp", "WAY_URL");
                itcAdministrativeOfficeMember.click("조회");
                itcAdministrativeOfficeMember.click("select box");
                itcAdministrativeOfficeMember.click("배정취소");
                chromeBrowser.speak("배정 취소 하시겠습니까?");
                itcAdministrativeOfficeMember.click("확인");
                chromeBrowser.speak("1건 처리되었습니다.");
                itcAdministrativeOfficeMember.click("확인");
                //배정취소에서 그 이전으로 되돌리려면   회계 쪽으로 되돌아 가야 하는데 입금예정처리 를 한 경우에는 입금예정처리 복구를 하면 되고
                //...실제 입금을 한 경우는 더 찾아보고 더 생각을 더 해보아야 겠습니다...


                //입금예정처리 취소
                //입금예정처리를 하면 파란색 이름이 나오는데 이걸 되돌리는 기능을 못찾았습니다.
                //그냥 합격취소(합격처리 복구)를 시켜도 되는지 알아봐야겠습니다.
                //입금예정처리를 하면 파란색 이름이 나오는데 이걸 되돌리는 기능을 다시 한번 찾아보겠습니다...
                //입금예정처리를 하면 dorm_apply_tb.dorm_exp_reserve = 'Y' 가 되는 데 이외에는 호출되어 변경 되는 것을 소스에서 찾지 못하였습니다.
                //입금예정처리를 진행하면 dorm_apply_tb 에서 기숙사비입금예정여부="입금예정" 으로 update 되는데
                //이 부분을 dorm_exp_reserve = 'N' 으로 돌려주어야 합니다..
                //우선 바뀐 데이터를 조회를 하보겠습니다..
//                SELECT dorm_exp_reserve,dat.*
//                FROM dorm_apply_tb dat
//                WHERE dorm_exp_reserve = 'Y'
//                AND SUBSTR(id_no,0,6)  = '940405'
//                AND recruit_year = '2022'
//                AND recruit_code = '2604000'
                //내가 넣어둔 데이터를 확인하겠습니다..
                //되돌리기 위해서 havent_paid_proc.jsp 로 돌아가 로직의 역과정을 찾아보고 update query 를 만듭니다.
//caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution
//                UPDATE dorm_apply_tb dat
//                SET dorm_exp_reserve = 'N'
//                WHERE recruit_year = '2022'
//                AND recruit_code = '2604000'
//                AND SUBSTR(id_no,0,6)  = '940405'     -- 이건 특정 데이터를 isolation 하는 데 좋지 않은 방법 같습니다.
//caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution
                //이제 update 쿼리를 실행시키고 결과를 select 쿼리를 실행시켜 본 결과 문제 없었고
                //commit 을 하지 않고 홈페이지에 들어가서 본 결과 이름이 파란색으로 그대로 였습니다...
                //commit 쿼리를 실행을 후 재확인 해보겠습니다.
                //이제는 홈페이지 상에서 이름이 파란색에서 원래색으로 잘 바뀌어있습니다.
//                매우 주의해서 해야한다....... 이렇게 하면 .... 입사신청 단계까지 한번에 날라갑니다....아예 없던 일로 만들려면 이걸 날리면 되는 듯 싶다..
//                DELETE FROM  DORM_APPLY_TB dat
//                WHERE RECRUIT_YEAR='2022'
//                AND DORM_EXP_RESERVE = 'Y'
//                AND SUBSTR(id_no,0,6) = '940405'
                //member_tb 에 입사신청정보에 대한 data 이력이 남는지 확인을 해볼 필요가 있습니다. ...꼭 확인해보세요...


                // 합격취소
                itcAdministrativeOfficeMember.access("https://localhost/admin/success/success_inquiry.jsp", "WAY_URL");
                itcAdministrativeOfficeMember.click("조회");
                chromeBrowser.speak("합격 되었으나 사용자화면에 표시되지 않는 학생이 있습니다.");
                itcAdministrativeOfficeMember.click("select box");
                itcAdministrativeOfficeMember.click("합격취소");
                chromeBrowser.speak("1명의 미입금자가 합격 취소 처리 되었습니다.");
                if (chromeBrowser.speak("합격 되었으나 사용자화면에 표시되지 않는 학생이 있습니다.")) {
                    itcAdministrativeOfficeMember.click("확인");
                }
                // 합격취소 시키면
                // expence_tb.record 가 delete 됩니다.
                // dorm_apply_tb.status='신청대기' 으로 바뀌게 됩니다. 이게 맞을 것 같은데..
                // 미입금자는 합격취소를 시켜야 하는 거고...
                // 한번이라도 입금한 학생은 합격 취소가 안될것 같다.
                // 합격 취소가 아니라 환불처리를 해줘야 하는게 아닌가 싶다.
                // 아래는 검증이 필요
                // 미입주자 합격자 미입금자 입사취소는 환불처리 없이, back office 에서 합격취소 를 처리하면 되고
                // 미입주자 합격자 입금자   입사취소는 환불처리 하고, 합격취소
                // 입주자   합격자 입금자   입사취소는 환불처리 하고, 퇴사처리


                // 불합격
                // 불합격 처리를 해버리니 입퇴사신청부터 다시 됩니다.....
                // 만일을 대비하여 합격취소 를 먼저 수행 하고 불합격 처리 수행하는게 나은 것 같다.
                itcAdministrativeOfficeMember.access("https://localhost/admin/success/success_inquiry.jsp", "WAY_URL");
                itcAdministrativeOfficeMember.click("조회");
                if (chromeBrowser.speak("합격 되었으나 사용자화면에 표시되지 않는 학생이 있습니다.")) {
                    itcAdministrativeOfficeMember.TRY("합격노출여부='Y' 로 변경");
                }
                itcAdministrativeOfficeMember.click("확인");
                itcAdministrativeOfficeMember.click("select box");
                itcAdministrativeOfficeMember.click("불합격");
                chromeBrowser.speak("1명의 미입금자는 불합격 처리 되었습니다.");
                itcAdministrativeOfficeMember.click("확인");
                //dorm_apply_tb 에서 delete 했을 것으로 추측이됩니다..
                // dorm_apply_tb.status='불합격' 으로 바뀌게 됩니다.
                // 최초에 입사신청 한 사람은 dorm_apply_tb 에 insert 되고. 계속 이력이 남는 것 같습니다.


                //입사신청 삭제 (삭제)
                itcAdministrativeOfficeMember.access("https://localhost/admin/application_dorm/application_dorm_bundle.jsp", "WAY_URL");
                itcAdministrativeOfficeMember.click("조회");
                itcAdministrativeOfficeMember.click("select box");
                itcAdministrativeOfficeMember.click("삭제");
                chromeBrowser.speak("삭제(신청취소) 되었습니다.");
                itcAdministrativeOfficeMember.click("확인");


                //학적정보 삭제 (삭제)
                itcAdministrativeOfficeMember.access("https://localhost/admin/system/member_reg.jsp", "WAY_URL");
                //TBD
                itcAdministrativeOfficeMember.click("삭제");
                //member_tb 에서 delete 를 아예 신청한적이 없도록 한다면 음......학적정보 외부 연동할 때 member_tb 에서 가져가는 데이터가 있을 수 있으니 참고할것....


                //합격자(미입금자) 를 입사신청 전으로 복구
                //back office 에서 불합격 까지 진행.
                //dorm_apply_tb 에는 합격 기록이 남으므로,
                //db client program 으로 dorm_apply_tb 에서 해당 레코드(합격기록) 을 delete.
                //caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution_s
                //delete from DORM_APPLY_TB
//                WHERE RECRUIT_YEAR = '2022'
//                AND RECRUIT_CODE ='2604000'
                //and substr(id_no,0,6) = '940405'
                //caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution_e
                //caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution_s
                //COMMIT
                //caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution caution_e


                //퇴사신청
                itcStudentMember.access("https://localhost/home/sub06/sub06_12.jsp", "WAY_URL");
                //itcStudentMember 가 미입금자 이었기 때문에 해당 페이지에 접근을 하였을 때 아무화면도 나타나지 않았음.
                //TBD


                //퇴사처리
                itcAdministrativeOfficeMember.access("https://localhost/admin/application_dorm/application_moveout.jsp", "WAY_URL");
                itcAdministrativeOfficeMember.click("조회");
                // 아무것도 조회되지 않았다.. 소스를 찾아보니.
                // 미입사퇴사 - 미입금자의 경우 퇴사신청이 불가능하다. 는 정보를 얻게 되었다.
                // 미입금자를 인지 확인하기 위해서
                //SELECT *
                //FROM IN_AMT_TB
                //WHERE ID_NO = '9404051031803'
                //AND RECRUIT_YEAR='2022'
                //AND RECRUIT_CODE='2604000'
                //를 해보니 IN_AMT_TB.record = false 이었다. 즉, 입금액 과 환불액 이 없었다.


                //terminate 'itc Tomcat v8.0 intac (DESKTOP-I25VIFM local dev web server)
                SenarioMgr.req("terminate 'itc Tomcat v8.0 intac'", "CTRL ALT S");
                //withvMember.click("CTRL ALT S");
                //아무키입력받기
                out.println("itc Tomcat v8.0 intac terminatation" + nbsp + m2);


//              학사일정추가(공휴일추가)
                itcAdministrativeOfficeMember.req("학사일정에공휴일추가");
                itcAdministrativeOfficeMember.res("학사일정에공휴일추가");
                itcAdministrativeOfficeMember.access("https://localhost/home/login/login.jsp", "WAY_URL");
                itcAdministrativeOfficeMember.login("", "", "system");
                itcAdministrativeOfficeMember.access("jhp.access(nav>관리자>학사일정관리)", "JHP_WAY");
                itcAdministrativeOfficeMember.set2("2022(년도)", "11(월)");
                itcAdministrativeOfficeMember.click("조회");
                itcAdministrativeOfficeMember.click("등록");
                itcAdministrativeOfficeMember.set7("(년도)", "공휴일(구분)", "(기간시작)", "(기간종료)", "(제목)", "(휴일여부)", "(내용)");
                itcAdministrativeOfficeMember.click("저장");


//              정보_추적 ( withvMember )
                withvMember.access("https://localhost/admin/application_dorm/application_dorm_all.jsp", "WAY_URL");


                //itcAdministrativeOfficeMember.req("입사기간 시작일 변경 요청")
                //배경정보
                //EDU_SCHEDULE_TB.RECRUIT_YEAR = '2022'
                //EDU_SCHEDULE_TB.RECRUIT_CODE = '2604000'
                //itcAdministrativeOfficeMember 은 모집구분하위의 모집기간은 모두 시작일(EDU_SCHEDULE_TB.S_DATE)들을 동일하게만 설정할 수 있고, 다른 시작일을 선택할 수 없습니다..
                //따라서 itcAdministrativeOfficeMember 는 withvMember 에게 모집기간의 시작일(EDU_SCHEDULE_TB.S_DATE)을 변경을 요청을 합니다.
                //이번 이번 경우와 같이 행정실에서 e-MU1차, 2차를 등록하지 않은 상태에서 요청한 경우는 관리자페이지에 일단 동일한 시작일로 등록한 다음 db에서 수정하도록 해야합니다.
                //db client 접근
                withvMember.access("DB client program", "");
                //db client program 에서 현상태 확인
                withvMember.createStrBufferForExcutinigQeury();
                withvMember.appendQueryString("SELECT recruit_year, recruit_code, fnc_get_code_nm( recruit_code) as recruit_nm, move_form, fnc_get_code_nm( move_form) as move_form_nm, s_date, e_date, use_yn       ");
                withvMember.appendQueryString("FROM EDU_SCHEDULE_TB                                                                                                                                                  ");
                withvMember.appendQueryString("WHERE RECRUIT_YEAR = '2022'                                                                                                                                           ");
                withvMember.appendQueryString("AND RECRUIT_CODE = '2604000'                                                                                                                                          ");
                withvMember.appendQueryString("ORDER BY fnc_get_code_nm( move_form) ASC                                                                                                                              ");
                withvMember.excute_query_and_DB_close();
                //db client program 에서 동계방학에 eMU1차, eMU2차 update 전 조회쿼리
                withvMember.createStrBufferForExcutinigQeury();
                withvMember.appendQueryString("SELECT *                         ");
                withvMember.appendQueryString("FROM EDU_SCHEDULE_TB             ");
                withvMember.appendQueryString("WHERE RECRUIT_YEAR = '2022'      ");
                withvMember.appendQueryString("AND RECRUIT_CODE = '2604000'     ");
                withvMember.excute_query_and_DB_close();
                //db client program 에서 동계방학에 eMU1차, eMU2차 update 전 조회쿼리결과
                //TBD
                //관리자페이지 에서 동계방학에 eMU1차, eMU2차 등록
                //TBD
                //db client program 에서 동계방학에 eMU1차, eMU2차 update
                withvMember.createStrBufferForExcutinigQeury();
                withvMember.access("DB client program", "itc dorm client program ..... probabbly oracle sql developer");
                withvMember.appendQueryString("UPDATE EDU_SCHEDULE_TB           ");
                withvMember.appendQueryString("SET S_DATE='2023-01-01'          ");
                withvMember.appendQueryString("WHERE RECRUIT_YEAR = '2022'      ");
                withvMember.appendQueryString("AND RECRUIT_CODE = '2604000'     ");
                withvMember.appendQueryString("AND MOVE_FORM='2707000'          ");
                withvMember.excute_query_and_DB_close();
                //db client program 에서 동계방학에 eMU1차, eMU2차 update 후 조회쿼리
                //TBD
                withvMember.excute_query_and_DB_close();
                withvMember.appendQueryString("SELECT *                         ");
                withvMember.appendQueryString("FROM EDU_SCHEDULE_TB             ");
                withvMember.appendQueryString("WHERE RECRUIT_YEAR = '2022'      ");
                withvMember.appendQueryString("AND RECRUIT_CODE = '2604000'     ");
                withvMember.appendQueryString("AND MOVE_FORM='2707000'          ");
                withvMember.excute_query_and_DB_close();
                //db client program 에서 동계방학에 eMU1차, eMU2차 update 후 조회쿼리결과
                //TBD
                //back office 에서동계방학에 eMU1차, eMU2차 update 후 조회결과
                //TBD
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>___________________________________________
                //itcAdministrativeOfficeMember.req(" 박은실 : 퇴관복구")
                //itcAdministrativeOfficeMember.req(" 김찬수 : 안녕하세요, 임미소 학생(202116075) 퇴사 처리를 퇴사 신청상태로 바꿔 주세요")
                //itcAdministrativeOfficeMember 이 퇴사등록 을 완료해버렸는데.. 이를 버튼 누르기 전 상태로 , 즉 아예 버튼을 누르지 않은 것 처럼 돌려달라는 의미 로 보여진다.
                //배경정보
                //MEMBER_TB.STD_NO='202203066'
                //DORM_APPLY_TB.RECRUIT_YEAR='2022'
                //DORM_APPLY_TB.RECRUIT_CODE='2602000'

                //SELECT * FROM MEMBER_TB WHERE STD_NO='202203066' and user_nm='박민성'
                //조회를 통해 알게된 정보
                //MEMBER_TB.ID_NO=''
                //MEMBER_TB.STD_NO=''
                //MEMBER_TB.DORM_ID 가 있는 것으로 보아 객실배정을 받은 이후라는 것을 유추해볼 수 있습니다..

                //SELECT * FROM DORM_APPLY_TB WHERE ID_NO='0211141035261' AND RECRUIT_YEAR='2022' AND RECRUIT_CODE='2602000'
                //조회를 통해 알게된 정보
                //MEMBER_TB.SEQ_NO 2개 있는 것으로 보아 2번의 신청기록이 있다는 것을 유추해볼 수 있습니다.. 이번의 경우는 2601000,2602000 즉, 1학기와 2학기임을 유추해볼 수 있습니다..
                //DORM_APPLY_TB.VIRTUAL_ACCOUNT 가 두개인데 근래의 기록만 보면 될것으로 보입니다.

                //select * from account_tb where VIRTUAL_ACCOUNT='27981646618486' and RECRUIT_YEAR='2022' and RECRUIT_CODE='2602000'
                //조회를 통해 알게된 정보
                //ACCOUNT_TB.USE_YN=N 이고 ACCOUNT_TB.VIEW_YN=Y 이면 VA 가 할당가능한 계좌임을 알 수있습니다.
                //퇴관복구 되려는 사람에게 왠만하면 사용하던 VA 를 부여하려고 하는 조치로 보입니다.
                //다른 사람에게 VA 가 부여가 되지 않도록 업데이트
                //SELECT * FROM ACCOUNT_TB where VIRTUAL_ACCOUNT='27981652218141'
                //update account_tb set USE_YN='Y' where VIRTUAL_ACCOUNT='27981652218141'
                //SELECT * FROM ACCOUNT_TB where VIRTUAL_ACCOUNT='27981652218141'

                //만약 VA 가 이미 수거가 되어있다면, 다른 사람이 VA 를 혹여나 할당 받았는지 확인 후에(한 계좌를 두명이 쓰면 안되니까..)
                //할당받지 않았다면 언능 다른 이들에게 할당 못하게 하기 위해서 account_tb.use_yn=Y 설정.
//                select * from account_tb where VIRTUAL_ACCOUNT='27981652218141'
//                update account_tb set USE_YN='Y', RECRUIT_YEAR='2022', RECRUIT_CODE='2602000' where VIRTUAL_ACCOUNT='27981655518937'
//                SELECT * FROM ACCOUNT_TB where VIRTUAL_ACCOUNT='27981652218141'

//                select * from VACS_VACT where acct_no='27981652218141' and ID_NO='0309241033732' AND RECRUIT_YEAR='2022' AND RECRUIT_CODE='2602000'
                //this_table.record==false

//                select * from VACS_VACT where acct_no='27981652218141'
                //VACS_VACT.ACCT_ST=0 이면 배포불가능 VA
                //VACS_VACT.ACCT_ST=1 이면 배포가능 VA

//                select * from EXPENCE_TB where ID_NO='0211141035261' AND RECRUIT_YEAR='2022' AND RECRUIT_CODE='2602000'
                //관리자가 정상적으로 퇴실등록한 경우라면 moveout_apply_tb.del_yn=Y 이며 moveout_apply_tb.comp_yn=Y 입니다.
                //관리자가 퇴실등록 직후에 알아채린 경우라면 moveout_apply_tb.del_yn=N 이며 moveout_apply_tb.comp_yn=Y 인 경우가 있어보입니다.
                //따라서, 관리자가 퇴실등록을 했다면. moveout_apply_tb.comp_yn=Y(관리자퇴실등록후) 일텐데... 이를  moveout_apply_tb.comp_yn=N(관리자퇴실등록전) 으로 원복!
//                select * from moveout_apply_tb where ID_NO='0211141035261' AND RECRUIT_YEAR='2022' AND RECRUIT_CODE='2602000'
//                update moveout_apply_tb set comp_yn = 'N' where ID_NO='0211141035261' AND RECRUIT_YEAR='2022' AND RECRUIT_CODE='2602000'
//                update dorm_apply_tb set del_yn='N',MOVE_OUT_DATE ='0',MOVE_OUT_CODE=null,MOVE_OUT_MEMO=null,  in_yn='N' ,VIRTUAL_ACCOUNT='27981655518960'  where ID_NO='0211141035261' AND RECRUIT_YEAR='2022' AND RECRUIT_CODE='2602000' and in_yn='N'
                // 이 아래의 코드는 in_YN 은 업데이트를 하지 않는데 아마도 ... 확인필요하다...
//                -- update dorm_apply_Tb set del_yn='N',MOVE_OUT_DATE ='0',MOVE_OUT_CODE=null,MOVE_OUT_MEMO=null   where id_no ='0112201022640' and recruit_Year ='2022'and recruit_code='2602000';
//                select * from dorm_apply_tb where ID_NO='0211141035261' AND RECRUIT_YEAR='2022' AND RECRUIT_CODE='2602000' and in_yn='N'
                //만약 퇴관신청 전(???미입주퇴관복구???...아무래도 다른 것 같은데 ..입주자퇴관복구..와는 다른 양상...)으로 돌린다면 수행하는 것으로 보이는 코드입니다. 역시...삭제라서 좀 더 알아보고 사용할것..
//                delete moveout_apply_tb where id_no ='0108081024993' and recruit_Year ='2022'and recruit_code='2602000'


                //select * from ROOMCHANGE_HIST_TB where ID_NO='0211141035261' AND RECRUIT_YEAR='2022' AND RECRUIT_CODE='2602000'
                //this_table.record==false
                //this_table.record==true  경우.... ROOMCHANGE_HIST_TB.out_date=null 로 업데이트 가 필요한 가 봅니다...
//                update  ROOMCHANGE_HIST_TB set out_date =null where ID_NO ='0108081024993' and RECRUIT_YEAR ='2022'and RECRUIT_CODE='2602000';
                //미입주퇴관복구 인 경우 ROOMCHANGE_HIST_TB.record 를 delete 해야하나 봅니다..
//                delete  ROOMCHANGE_HIST_TB  where id_no ='9903231026935' and recruit_Year ='2022'and recruit_code='2602000';


                //in_amt_tb 에는 입금내역 과 환불내역이 insert 가 됩니다. 따라서 복구는 delete 를 수행해야 합니다.
                //관리자가 입금처리 나 환불처리를 했는지 확인이 필요해보입니다.
                //입금내역이 있는지 확인하고 입금내역이 없어야 된다면 생긴 입금내역 을 delete 하면 될것 같다.
                //환불내역이 있는지 확인하고 환불내역이 없어야 된다면 생긴 환불내역 을 delete 하면 될것 같다.
//                select * from in_amt_tb where ID_NO='0211141035261' AND RECRUIT_YEAR='2022' AND RECRUIT_CODE='2602000'
//                SELECT * FROM IN_AMT_TB WHERE ID_NO='0211141035261' AND RECRUIT_YEAR='2022' AND RECRUIT_CODE='2602000' AND SEQ_NO='________SEQ_NO' AND IN_RETURN_CODE='4303000'
//                DELETE FROM IN_AMT_TB WHERE ID_NO='0211141035261' AND RECRUIT_YEAR='2022' AND RECRUIT_CODE='2602000' AND SEQ_NO='________SEQ_NO' AND IN_RETURN_CODE='4303000'
                //in_amt_tb.IN_RETURN_CODE  이  무었이 있는지 전체를 확인 해야하고... 환불 이 있다면 삭제한 히스토리도 있습니다...
//                delete  in_amt_Tb where id_No ='9903231026935' and recruit_Year ='2022'and recruit_code='2602000' and in_return_code <>'4301000';
//                SELECT * FROM IN_AMT_TB WHERE ID_NO='0211141035261' AND RECRUIT_YEAR='2022' AND RECRUIT_CODE='2602000' AND SEQ_NO='________SEQ_NO' AND IN_RETURN_CODE='4303000'


//                select * from equipment_tb where ID_NO='0211141035261' AND RECRUIT_YEAR='2022' AND RECRUIT_CODE='2602000'
//                this_table.record==false
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>___________________________________________
                //itcAdministrativeOfficeMember.req(" ooo : itcStudentMember_퇴관일자변경")
                //itcAdministrativeOfficeMember.req(" ooo : 안녕하세요? itcStudentMember 인 ooo 학생 퇴사처리했는데요... 퇴사일을 7월 11일로 변경부탁드립니다..")
                //itcAdministrativeOfficeMember 이 퇴사등록 을 완료해버렸는데.. 이를 버튼 누르기 전 상태로 , 즉 아예 버튼을 누르지 않은 것 처럼 돌려달라는 의미 로 보여진다.
                //배경정보
                //MEMBER_TB.STD_NO='202203066'
                //DORM_APPLY_TB.RECRUIT_YEAR='2022'
                //DORM_APPLY_TB.RECRUIT_CODE='2602000'
//                진예슬.0210131026350
//                진예슬.202114027
//                진예슬.D202102250336
//                begin tran
//                update  MOVEOUT_APPLY_TB set move_out_date='2021-07-11' where id_no in ('0210131026350') and recruit_year ='2022'and recruit_code='2603000';
//                update DORM_APPLY_TB set move_out_date='2021-07-11'  where id_no in ('0210131026350') and recruit_year ='2022'and recruit_code='2603000';
//                update ROOMCHANGE_HIST_TB set out_date='2021-07-11'  where id_no in ('0210131026350') and recruit_year ='2022'and recruit_code='2603000';
// 학생이 정상적으로 입금을 완료하고 퇴사하는 경우 이 delete 문을 쓰는 것 같아 보인다.. 지우지 않으면 입금 환불 이력이 남을 텐데...히스토리를 보니 어떤 분은 지우고...어떤 분은 남겨 두었다..확인필요...
//                delete  in_amt_Tb where id_no ='0210131026350' and recruit_year ='2022'and recruit_code='2603000'and IN_RETURN_CODE<>'4301000';
//                commit
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>___________________________________________

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>___________________________________________
                //itcAdministrativeOfficeMember.req(" ooo : 합격자조회의 소속성격을 외국인으로 조회결과와 우선선발구분을 외국인우선선발할 때의 조회결과가 각각30, 34로 이상함.(앞이 더 많거나 같아야 할 것 같은데,,,)")
                // 외국인 4명을 member_tb.ACL_CD2='1902001' ->  member_tb.ACL_CD2='1903001' 외국인으로 변경
//                 update member_tb set ACL_CD2='1903001' where acl_cd2='1903001' and id_no in ('0102051036986','0103141036984','0110121036985','0405071036982')
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>___________________________________________
                //itcAdministrativeOfficeMember.req(" ooo : 퇴사신청확인")
//                select * From member_Tb where std_no ='202014017'
//
//                select * From dorm_apply_Tb where id_no ='0106281021854'
//
//                select * From moveout_apply_Tb where id_no ='0106281021854'
//
//                select std_no,user_nm,recruit_year, fnc_get_code_nm(recruit_code) as rc, apply_date ,b.reg_date,move_out_memo,move_Out_date,fnc_get_code_nm(move_out_code) as move_out_code, fnc_get_code_nm(move_out_time) as move_out_time,division
//                From member_Tb a join moveout_apply_Tb b on a.id_no = b.id_no
//                where  b.id_no ='0106281021854' and recruit_year ='2022'
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>___________________________________________
                //itcAdministrativeOfficeMember.req(" ooo : 합격자선정 시  소속성격변경")
//                UPDATE member_tb SET ACL_CD2='1903001'  WHERE STD_NO='202288003' AND ACL_CD2='1902001'
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>___________________________________________


            }
            TextMgr.drawPoliceLine("SenarioMgr", "e");
        }

        public static void play(String SENARIO_NAME, String[] WEB_SERVER_ARGs) {
            if (SENARIO_NAME.equals("WEB_SERVER")) {
                TextMgr.drawLine(CODE.MODE_BRACKET, "           SpringApplication        ", "99EA");
                SpringApplication.run(MY_MGR_TERRITORY.class, WEB_SERVER_ARGs);
//                win10PcMgr.run("START http://localhost:9090/TEST/test.html");
//                win10PcMgr.run("START http://localhost:9090/home/main.html");
            }
            if (SENARIO_NAME.equals("리프야")) {
                TextMgr.drawLine(CODE.MODE_BRACKET, "           SpringApplication        ", "99EA");
                SpringApplication.run(MY_MGR_TERRITORY.class, WEB_SERVER_ARGs);
                win10PcMgr.run("START http://localhost:9090/leaf/leaf.html");
            }
            if (SENARIO_NAME.equals("wiki_segments")) {
                TextMgr.drawLine(CODE.MODE_BRACKET, "           SpringApplication        ", "99EA");
                SpringApplication.run(MY_MGR_TERRITORY.class, WEB_SERVER_ARGs);
                win10PcMgr.run("START http://localhost:9090/wiki/wiki_segments.html");
            }
            if (SENARIO_NAME.equals("itcDormMgr")) {
                TextMgr.drawLine(CODE.MODE_BRACKET, "           SpringApplication        ", "99EA");
                SpringApplication.run(MY_MGR_TERRITORY.class, WEB_SERVER_ARGs);
                win10PcMgr.run("START http://localhost:9090/RPA.html");
            }
        }

        private static void getConsoleTyping(String MSG_ASKING) {
            tmp_sc = new Scanner(System.in);
            String tmp_sc_str = tmp_sc.nextLine();
//            int tmp_sc_int = tmp_sc.nextInt();
//            double tmp_sc_double = tmp_sc.nextDouble();
        }

        private static void speak(String THIS) {
            out.println(THIS);
        }

        private static void req(String REQ_NAME, String REMARK) {
            //String THIS = "";
            //SenarioMgr.help(THIS) 가 스스로 해결할 수 없는 것을 요청하도록

            SenarioMgr.speak(REQ_NAME + nbsp + m1);
            SenarioMgr.getConsoleTyping("");//아무키입력받기
            SenarioMgr.speak(REQ_NAME + nbsp + m2);
            out.println();
        }

        private static Boolean VA_ADMIN_WANT;
        private static Boolean VA_USE_YN_ADMIN_WANT;
        private static Boolean ROOM_ADMIN_WANT;
        private static Boolean ROOM_USE_YN_ADMIN_WANT;
        private static Boolean PERIODS_ADMIN_WANT;
        private static String WAY = "";
        final static String m1 = "시도요청";
        final static String m2 = "시도완료";
        static Scanner tmp_sc;
        private static String 현입사생_chk_box_status = "checked";

        @Data
        @AllArgsConstructor
        private static class Person {


            private String instance_name;
            private String name;
            private String age;
            private StringBuffer tmp_query;

            Person() {
                this.age = "";
                this.name = "";
                this.instance_name = "";
            }

            public void access(String ADDRESS, String ADDRESS_WAY) {
                TextMgr.drawLine(CODE.MODE_BRACKET, "access(,)", "99EA");
                out.println(ADDRESS);
                switch (ADDRESS_WAY) {
                    case "JHP_WAY":
                        out.println("ADDRESS_WAY IS JHP_WAY, IT IS NOT PREPARED YET");
                        break;
                    case "WAY_URL":
                        win10PcMgr.run("START " + ADDRESS);
                        break;
                    case "PHYSICAL_WAY":
                        out.println("ADDRESS_WAY IS PHYSICAL_WAY, IT IS NOT PREPARED YET");
                        break;
                    default:
                        break;
                }
            }

            public static void login(String ID, String PW) {
                TextMgr.drawLine(CODE.MODE_BRACKET, "login(,)", "99EA");
                out.println(ID);
                out.println(PW);
            }

            public static void login(String ID, String PW, String AS) {
                TextMgr.drawLine(CODE.MODE_BRACKET, "login(,,)", "99EA");
                out.println(ID);
                out.println(PW);
            }


            public void req(String REQ_NAME) {
            }

            public void req(String REQ_NAME, String REMARK) {
            }

            public void res(String RES_NAME) {

            }

            private void insert(String CONTEXT_TO_INSERT, String to) {

            }

            private void insert(String CONTEXT_TO_INSERT, String to, String ADDRESS_TO_REFER) {

            }


            private void click(String THIS) {
                //depricated_code
                //생각해보니 또 이것의 장점은 축약이 되어 있어서 편하다는 것..
                //depricated 를 하지 않는 것이 낳을 수도 있습니다.
            }

            private void click(String THIS, String VIA) {
                //recommanded_code
            }

            private void set1(String set1) {
            }

            private void set2(String set1, String set2) {
            }

            public void set3(String set1, String set2, String set3) {
            }

            private void set4(String set1, String set2, String set3, String set4) {
            }

            private void set5(String set1, String set2, String set3, String set4, String set5) {
            }

            private void set6(String set1, String set2, String set3, String set4, String set5, String set6) {
            }


            private void set7(String set1, String set2, String set3, String set4, String set5, String set6, String set7) {
            }

            private void set8(String set1, String set2, String set3, String set4, String set5, String set6, String set7, String set8) {
            }

            private void set12(String set1, String set2, String set3, String set4, String set5, String set6, String set7, String set8, String set9, String set10, String set11, String set12) {
            }

            private void set13(String set1, String set2, String set3, String set4, String set5, String set6, String set7, String set8, String set9, String set10, String set11, String set12, String set13) {
            }

            private void set14(String set1, String set2, String set3, String set4, String set5, String set6, String set7, String set8, String set9, String set10, String set11, String set12, String set13, String set14) {
            }

            private void set16(String set1, String set2, String set3, String set4, String set5, String set6, String set7, String set8, String set9, String set10, String set11, String set12, String set13, String set14, String set15, String set16) {
            }

            private void set17(String set1, String set2, String set3, String set4, String set5, String set6, String set7, String set8, String set9, String set10, String set11, String set12, String set13, String set14, String set15, String set16, String set17) {
            }

            private void set19(String set1, String set2, String set3, String set4, String set5, String set6, String set7, String set8, String set9, String set10, String set11, String set12, String set13, String set14, String set15, String set16, String set17, String set18, String set19) {
            }

            private void set23(String set1, String set2, String set3, String set4, String set5, String set6, String set7, String set8, String set9, String set10, String set11, String set12, String set13, String set14, String set15, String set16, String set17, String set18, String set19, String set20, String set21, String set22, String set23) {
            }


            public void apply(String APPLY_ITEM) {
            }


            public void record(String IMPORTANT_MSG) {
            }

            public void type(String THIS) {
            }

            public void type(String THIS, String VIA) {
            }

            public void chk(String chk1) {
            }

            public void chk(String chk1, String chk2) {
            }

            public void chk(String chk1, String chk2, String chk3) {
            }

            public void chk(String chk1, String chk2, String chk3, String chk4) {
            }

            public void TRY(String THIS) {
            }


            public void excute_query_and_DB_close() {

            }

            public void appendQueryString(String qeuryStr) {
                tmp_query.append(qeuryStr);
            }

            public void createStrBufferForExcutinigQeury() {
                tmp_query = new StringBuffer();
            }
        }

        private static class Student extends Person {

            public Student() {
            }

            public Student(String instance_name, String name, String age) {
                super.setInstance_name(instance_name);
                super.setName(name);
                super.setAge(age);
            }
        }

        private static class Administrater extends Student {

            public Administrater(String instance_name, String name, String age) {
                super(instance_name, name, age);
            }
        }

        private static class Developer extends Administrater {

            public Developer(String instance_name, String name, String age) {
                super(instance_name, name, age);
            }
        }

        private static class WithvMember extends Administrater {

            public WithvMember(String instance_name, String name, String age) {
                super(instance_name, name, age);
            }
        }

        private static class JungHoonPark extends Developer {

            public JungHoonPark(String instance_name, String name, String age) {
                super(instance_name, name, age);
            }
        }


        private static class NotPerson {
            public boolean speak(String THIS) {
                return false;
            }
        }

        private static class Machine extends NotPerson {

        }

    }

    private static class TrainingMgr {

        static String TRY_RESULT;
        static String ADVICE;
        static String Msg;
        static String CAUSE_TO_FAIL;
        static String TRIAL_SOLUTION;

        public static void listenResult(String RESULT, String Msg) {
            TrainingMgr.Msg = Msg;
            TrainingMgr.TRY_RESULT = RESULT;
        }

        public static void speakSolution(String CAUSE, String SOLUTION) {
            TrainingMgr.CAUSE_TO_FAIL = CAUSE;
            TrainingMgr.TRIAL_SOLUTION = SOLUTION;

            out.println("CAUSE_TO_FAIL" + CAUSE);
            out.println("TRIAL_SOLUTION" + SOLUTION);
        }

        public static void speak(String RESULT, String ADVICE) {
            TrainingMgr.TRY_RESULT = TRY_RESULT;
            TrainingMgr.ADVICE = ADVICE;

            TextMgr.drawLine(CODE.MODE_BRACKET, "speak(,)", "99EA");
            out.println(RESULT);
            out.println(ADVICE);
            TrainingMgr.close();
        }

        private static void close() {
            TRY_RESULT = "";
            Msg = "";
            CAUSE_TO_FAIL = "";
            TRIAL_SOLUTION = "";
        }
    }

    private static class ScheduleMgr {
        static SimpleDateFormat sdf_yyyy_MM_dd_HH_mm_ss = new SimpleDateFormat("yyyy MM dd HH mm ss");
        static SimpleDateFormat sdf_HH_mm_ss = new SimpleDateFormat("HH mm ss");
        static SimpleDateFormat sdf_HH_mm = new SimpleDateFormat("HH mm");
        static SimpleDateFormat sdf_mm_ss = new SimpleDateFormat("mm ss");
        static SimpleDateFormat sdf_MM = new SimpleDateFormat("MM");
        static SimpleDateFormat sdf_dd = new SimpleDateFormat("dd");
        static SimpleDateFormat sdf_HH = new SimpleDateFormat("HH");
        static SimpleDateFormat sdf_mm = new SimpleDateFormat("mm");
        static SimpleDateFormat sdf_ss = new SimpleDateFormat("ss");
        static SimpleDateFormat sdf_SSS = new SimpleDateFormat("SSS");

        public static void MonitoringAndInform(String WAY) {
            //multi - Thread 로 동작 하도록 할 필요 까진 없는..아직..  // 그냥 프로세스를 두개 돌리면 해결됩니다.. 굳이 multi Thread 로 설계할 필요 없는 것 같습니다.

            Date sysdate;
            int excution_cnt_limit;

            if (WAY == CODE.WAY_MM) {
                // 60000ms 마다 실행 하도록

                excution_cnt_limit = 0;
                loop1:
                while (true) {
                    // 60000ms 마다
                    sysdate = new Date();
                    // 최대실행횟수를 제한합니다.
                    try {
                        out.println(new SimpleDateFormat("HH mm ss").format(sysdate));

                        //onetime schedule
                        if (excution_cnt_limit == 0) {
//                            TextMgr.drawPoliceLine("onetime schedule s");
//                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\foo.mp3");
//                            win10PcMgr.waitFor(Integer.toString(180 * 6), "1");//200ms 시도||180ms 시도  , 자리수 +2
//                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\지금부터.mp3");
//                            win10PcMgr.waitFor(Integer.toString(180 * 6), "1");
//                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\스케듈 매니져를.mp3");
//                            win10PcMgr.waitFor(Integer.toString(180 * 10), "1");
//                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\시작합니다.mp3");
//                            win10PcMgr.waitFor(Integer.toString(180 * 7), "1");
//                            win10PcMgr.run("TASKKILL -im alsong.exe");
//                            win10PcMgr.waitFor(Integer.toString(180 * 3), "1");
//                            TextMgr.drawPoliceLine("onetime schedule e");
                            excution_cnt_limit++;
                        }
                        //1분 마다
                        if (true) {
//                            TextMgr.drawPoliceLine("1분 마다 s");
//                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\foo.mp3");
//                            win10PcMgr.waitFor(Integer.toString(180 * 6), "1");
//                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\현재 시간은.mp3");
//                            win10PcMgr.waitFor(Integer.toString(180*7), "1");//200ms 시도||180ms 시도
//                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\" + Integer.parseInt(sdf_HH.format(sysdate)) + "시.mp3");
//                            win10PcMgr.waitFor(Integer.toString(180*3), "1");
//                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\" + Integer.parseInt(sdf_mm.format(sysdate)) + "분.mp3");
//                            win10PcMgr.waitFor(Integer.toString(180*3), "1");
//                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\입니다.mp3");
                            //                            win10PcMgr.waitFor(Integer.toString(180*3), "1");
//                            win10PcMgr.run("TASKKILL -im alsong.exe");
//                            TextMgr.drawPoliceLine("1분 마다 e");
                        }
                        //5분 마다
                        if (Integer.parseInt(sdf_mm.format(sysdate)) % 5 == 0) {
//                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\foo.mp3");
//                            win10PcMgr.waitFor(Integer.toString(180 * 6), "1");
//                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\현재 시간은.mp3");
//                            win10PcMgr.waitFor(Integer.toString(180 * 6), "1");//200ms 시도||180ms 시도
//                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\" + Integer.parseInt(sdf_HH.format(sysdate)) + "시.mp3");
//                            win10PcMgr.waitFor(Integer.toString(180*3), "1");
//                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\" + Integer.parseInt(sdf_mm.format(sysdate)) + "분.mp3");
//                            win10PcMgr.waitFor(Integer.toString(180*3), "1");
//                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\입니다.mp3");
                            //                            win10PcMgr.waitFor(Integer.toString(180*3), "1");
//                            win10PcMgr.run("TASKKILL -im alsong.exe");
                        }

                        //10분 마다
                        if (Integer.parseInt(sdf_mm.format(sysdate)) % 10 == 0) {
//                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\현재 시간은.mp3");
//                            win10PcMgr.waitFor(Integer.toString(180 * 6), "1");//200ms 시도||180ms 시도
//                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\" + Integer.parseInt(sdf_HH.format(sysdate)) + "시.mp3");
//                            win10PcMgr.waitFor(Integer.toString(180*3), "1");
//                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\" + Integer.parseInt(sdf_mm.format(sysdate)) + "분.mp3");
//                            win10PcMgr.waitFor(Integer.toString(180*3), "1");
//                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\입니다.mp3");
                            //                            win10PcMgr.waitFor(Integer.toString(180*3), "1");
                        }
                        //15분 마다, 06 시부터 12 시까지만
                        if (
                                6 <= Integer.parseInt(sdf_HH.format(sysdate)) && Integer.parseInt(sdf_HH.format(sysdate)) <= 23 &&
                                        Integer.parseInt(sdf_mm.format(sysdate)) % 15 == 0 ||
                                        sdf_HH_mm.format(sysdate).equals("00 00")
                        ) {
                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\foo.mp3");
                            win10PcMgr.waitFor(Integer.toString(180 * 6), "1");
                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\현재 시간은.mp3");
                            win10PcMgr.waitFor(Integer.toString(180 * 6), "1");//200ms 시도||180ms 시도
                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\" + Integer.parseInt(sdf_HH.format(sysdate)) + "시.mp3");
                            win10PcMgr.waitFor(Integer.toString(180 * 3), "1");
                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\" + Integer.parseInt(sdf_mm.format(sysdate)) + "분.mp3");
                            win10PcMgr.waitFor(Integer.toString(180 * 3), "1");
                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\입니다.mp3");
                            win10PcMgr.waitFor(Integer.toString(180 * 6), "1");
                            win10PcMgr.run("TASKKILL -im alsong.exe");
                        }
                        //20분 마다, 12 시부터 06 시까지
                        if (
                                0 <= Integer.parseInt(sdf_HH.format(sysdate)) && Integer.parseInt(sdf_HH.format(sysdate)) <= 6 &&
                                        Integer.parseInt(sdf_mm.format(sysdate)) % 20 == 0
                        ) {
                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\foo.mp3");
                            win10PcMgr.waitFor(Integer.toString(180 * 6), "1");
                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\foo.mp3");
                            win10PcMgr.waitFor(Integer.toString(180 * 6), "1");
                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\foo.mp3");
                            win10PcMgr.waitFor(Integer.toString(180 * 3), "1");
                            win10PcMgr.run("TASKKILL -im alsong.exe");
                        }

                        //30분 마다 , 06 시부터 12 시까지만
                        if (
                                6 <= Integer.parseInt(sdf_HH.format(sysdate)) && Integer.parseInt(sdf_HH.format(sysdate)) <= 23 &&
                                        Integer.parseInt(sdf_mm.format(sysdate)) % 30 == 0) {
//                            TextMgr.drawPoliceLine("30분 마다 s");
                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\foo.mp3");
                            win10PcMgr.waitFor(Integer.toString(180 * 6), "1");
                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\스트레칭할 시간입니다.mp3");
                            win10PcMgr.waitFor(Integer.toString(180 * 13), "1");
                            win10PcMgr.run("TASKKILL -im alsong.exe");
//                            TextMgr.drawPoliceLine("30분 마다 e");
                        }
                        //1시간 마다, 06 시부터 12 시까지만
                        if (
                                6 <= Integer.parseInt(sdf_HH.format(sysdate)) && Integer.parseInt(sdf_HH.format(sysdate)) <= 23 &&
                                        sdf_HH.format(sysdate).equals("00")) {
                            TextMgr.drawPoliceLine("1시간 마다 s");
//                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\foo.mp3");
//                            win10PcMgr.waitFor(Integer.toString(180 * 6), "1");
//                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\현재 시간은.mp3");
//                            win10PcMgr.waitFor(Integer.toString(180*7), "1");//200ms 시도||180ms 시도
//                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\" + Integer.parseInt(sdf_HH.format(sysdate)) + "시.mp3");
//                            win10PcMgr.waitFor(Integer.toString(180*3), "1");
//                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\" + Integer.parseInt(sdf_mm.format(sysdate)) + "분.mp3");
//                            win10PcMgr.waitFor(Integer.toString(180*3), "1");
//                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\입니다.mp3");
//                            win10PcMgr.waitFor(Integer.toString(180*3), "1");
//                            win10PcMgr.run("TASKKILL -im alsong.exe");
                            TextMgr.drawPoliceLine("1시간 마다 e");
                        }
                        //3시간 마다
                        if (Integer.parseInt(sdf_HH.format(sysdate)) % 2 == 0) {
//                            TextMgr.drawPoliceLine("2시간 마다 s");
//                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\foo.mp3");
//                            win10PcMgr.waitFor(Integer.toString(180 * 6), "1");
//                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\" + Integer.parseInt(sdf_HH.format(sysdate)) + "시.mp3");
//                            win10PcMgr.waitFor(Integer.toString(180*3), "1");
//                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\" + Integer.parseInt(sdf_mm.format(sysdate)) + "분.mp3");
//                            win10PcMgr.waitFor(Integer.toString(180*3), "1");
//                            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\입니다.mp3");
//                            win10PcMgr.waitFor(Integer.toString(180*3), "1");
//                            win10PcMgr.run("TASKKILL -im alsong.exe");
//                            TextMgr.drawPoliceLine("2시간 마다 e");
                        }
                        //출근전 마다
                        if (sdf_HH_mm.format(sysdate).equals("06 00")) {
                            TextMgr.drawPoliceLine("출근전 마다 s");
                            win10PcMgr.run("EXPLORER \"C:\\Users\\JungHoonPark\\AppData\\Roaming\\DBeaverData\\workspace6\\General\\back up dbeaber Scripts.bat\"");
                            win10PcMgr.run("EXPLORER \"E:\\500GB\\do\\utils\\scheduleMgr\\PotPlayerMini64 [점심시간중 플레이리스트].dpl\"");
                            out.println("샤워하기");
                            out.println("양치하기");
                            out.println("화장품바르기");
                            out.println("물먹기");
                            out.println("밥먹기");
                            out.println("옷입기");
                            TextMgr.drawPoliceLine("출근전 마다 e");
                        }
                        if (sdf_HH_mm.format(sysdate).equals("06 30")) {//현재시간을 예약시간과 비교하고 예약시간이면 서비스 하도록
                            TextMgr.drawLine(CODE.MODE_BRACKET, "____________________________________________________ routine s", "99EA");
                            win10PcMgr.run("EXPLORER \"E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\back up directory as withv Map - yyyy MM dd HH mm ss.zip.bat\"");
                            win10PcMgr.run("EXPLORER" + nbsp + "\"E:\\500GB\\do\\utils\\scheduleMgr\\PotPlayerMini64 [점심시간중 플레이리스트].dpl\"");
                            //아마 빈 음악을 재생 수행하면 JBL pulse 가 꺼지지는 않을 건데. 계속 대기 모드하니 전기를 계속 쓰겠지..
                            //bluetooth 스피커 말고 유선 스피커를 이용하면 문제가 해결될 것 같아 보이기는 한다..
                            //bluetooth 스피커도 충전을 하기위해서 어차피 전력선을 꼿아서 사용을 하니까..
                            TextMgr.drawLine(CODE.MODE_BRACKET, "____________________________________________________ routine e", "99EA");
                        }
                        //출근 마다
                        if (sdf_HH_mm.format(sysdate).equals("08 00")) {
                            TextMgr.drawPoliceLine("출근마다 s");

                            String nbsp = " ";
                            String m1 = "시도요청";
                            String m2 = "시도완료";

                            String routine12 = "dbeaver script 백업";
                            String this_file12 = "\"C:\\Users\\JungHoonPark\\AppData\\Roaming\\DBeaverData\\workspace6\\General\\space that back up dbeaber Scripts.bat\"";
                            win10PcMgr.run("EXPLORER" + nbsp + routine12);

                            String routine1 = "do 디렉토리 트리 백업";
                            String this_file2 = "\"E:\\500GB\\back up do as do - yyyy MM dd HH mm ss.zip.bat\"";
                            win10PcMgr.run("EXPLORER" + nbsp + this_file2);

//                            String routine2 = "do 디렉토리 열기";
//                            String this_file3 = "\"E:\\500GB\\do\"";
//                            win10PcMgr.run("EXPLORER" + nbsp + this_file3);
//                            out.println(routine2 + m2);

//                            String routine3 = "ing.xlsx실행";
//                            String this_file4 = "\"E:\\500GB\\do\\ing\\ing.xlsx\"";
//                            win10PcMgr.run("EXPLORER" + nbsp + this_file4);
//                            out.println(routine3 + m2);

                            String routine4 = "Telegram실행";
                            String this_file5 = "\"C:\\Users\\JungHoonPark\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Telegram.lnk\"";
                            win10PcMgr.run("EXPLORER" + nbsp + this_file5);

                            String routine5 = "본사 단톡방 플로팅 띄우기";
                            String this_file6 = "\"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\카카오톡.lnk\"";
                            win10PcMgr.run("EXPLORER" + nbsp + this_file6);

                            String routine6 = "intellij실행";
                            String this_file7 = "\"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\JetBrains\\IntelliJ IDEA Community Edition 2022.2.3.lnk\"";
                            win10PcMgr.run("EXPLORER" + nbsp + this_file7);

                            String routine11 = "dbeaber실행";
                            String this_file11 = "\"C:\\Users\\JungHoonPark\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\DBeaver Community\\DBeaver.lnk\"";
                            win10PcMgr.run("EXPLORER" + nbsp + this_file11);


                            out.println(routine1 + m2);
                            out.println(routine4 + m2);
                            out.println(routine5 + m2);
                            out.println(routine6 + m2);
                            out.println(routine11 + m2);


                            String routine7 = "근태관리";
                            String this_URL1 = "\"https://ezsso.bizmeka.com/loginForm.do\"";
                            String this_URL2 = "https://ezkhuman.bizmeka.com/product/outlnk.do?code=PJ02&";
                            win10PcMgr.run("EXPLORER" + nbsp + this_URL1);
                            Thread.sleep(3000);
                            win10PcMgr.run("EXPLORER" + nbsp + this_URL2);
                            out.println(routine7 + m1);
                            //콘솔입력 받도록.
                            out.println(routine7 + m2);


                            String routine22 = "가습기 물 1L 채우기";
                            out.println(routine22 + m1);
                            //콘솔입력 받도록.
                            out.println(routine22 + m2);

                            String routine33 = "점심식사구매";
                            out.println(routine33 + m1);
                            //콘솔입력 받도록.
                            out.println(routine33 + m2);

                            String routine9 = "도시락냉장고에넣기";
                            out.println(routine9 + m1);
                            //콘솔입력 받도록.
                            out.println(routine9 + m2);
                            TextMgr.drawPoliceLine("출근마다 e");
                        }
                        //점심 마다
                        if (sdf_HH_mm.format(sysdate).equals("11 30")) {
                            TextMgr.drawLine(CODE.MODE_BRACKET, "점심 마다 s", "99EA");
                            out.println("점심 먹어도 될까요?.");
                            String tmp_file = "\"E:\\500GB\\do\\utils\\scheduleMgr\\PotPlayerMini64 [점심시간중 플레이리스트].dpl\"";
                            win10PcMgr.run("EXPLORER \"E:\\500GB\\back up do as do - yyyy MM dd HH mm ss.zip.bat\"");
                            win10PcMgr.run("CALL" + nbsp + tmp_file);
                            out.println("점심먹을 시간입니다.");
                            out.println("먹기");
                            out.println("영양제먹기");
                            out.println("물가글");
                            out.println("양치");
                            out.println("혓바닥키친타올로닦기");
                            TextMgr.drawLine(CODE.MODE_BRACKET, "점심 마다 e", "99EA");
                        }
                        if (sdf_HH_mm.format(sysdate).equals("12 00")) {
                            TextMgr.drawLine(CODE.MODE_BRACKET, "점심 마다 s", "99EA");
                            win10PcMgr.run("EXPLORER \"E:\\500GB\\back up do as do - yyyy MM dd HH mm ss.zip.bat\"");
                            win10PcMgr.run("EXPLORER \"C:\\Users\\JungHoonPark\\AppData\\Roaming\\DBeaverData\\workspace6\\General\\back up dbeaber Scripts.bat\"");
                            TextMgr.drawLine(CODE.MODE_BRACKET, "점심 마다 e", "99EA");
                        }

                        //퇴근 마다
                        if (sdf_HH_mm.format(sysdate).equals("17 45")) {
                            TextMgr.drawPoliceLine("퇴근마다 s");
                            //"sql script 백업";
                            String this_file09 = "\"C:\\Users\\JungHoonPark\\AppData\\Roaming\\DBeaverData\\workspace6\\General\\back up dbeaber Scripts.bat\"";
                            win10PcMgr.run("EXPLORER" + nbsp + this_file09);
                            //do백업
                            String this_file2 = "\"E:\\500GB\\back up do as do - yyyy MM dd HH mm ss.zip.bat\"";
                            win10PcMgr.run("EXPLORER" + nbsp + this_file2);
                            //근태관리
                            String this_URL1 = "\"https://ezsso.bizmeka.com/loginForm.do\"";
                            String this_URL2 = "https://ezkhuman.bizmeka.com/product/outlnk.do?code=PJ02&";
                            win10PcMgr.run("EXPLORER" + nbsp + this_URL1);
                            Thread.sleep(3000);
                            win10PcMgr.run("EXPLORER" + nbsp + this_URL2);
                            //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  1분 후 pc shutdown 예약
                            win10PcMgr.run("%windir%\\System32\\Shutdown.exe -s");
                            String routine11 = "1분이내PC shutdown";
                            out.println("1분후PC shutdown 시도를 원치 않으면. 아무키를 입력하세요.");
                            //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  shutdown 예약 취소
                            String routine12 = "shutdown취소";
                            win10PcMgr.run("shutdown -a");
                            out.println("퇴근할 시간입니다.");
                            out.println("가습기 끄기");
                            out.println("에어콘 끄기");
                            out.println("창문 닫기");
                            out.println("도시락냉장고에서꺼내기가방에넣기");
                            out.println("내일이 휴일이라면 철문 닫기");
                            TextMgr.drawPoliceLine("퇴근마다 e");
                        }
                        //19 00 마다
                        if (sdf_HH_mm.format(sysdate).equals("19 00")) {
                            TextMgr.drawPoliceLine("19 00 마다 s");
                            out.println("샤워하기");
                            out.println("휴식하기");
                            out.println("자기개발하기");
                            out.println("옷준비하기 ");
                            TextMgr.drawPoliceLine("19 00 마다 e");
                        }
                        //win10PcMgr 휴식 하도록
                        win10PcMgr.takeRest(60000);

                    } catch (InterruptedException e) {
                        throw new RuntimeException(e);
                    }
                }
            }
            if (WAY == CODE.WAY_ss) {
                loop1:
                while (true) {
                    // 현재시간을 sysdate 에 저장합니다.
                    sysdate = new Date();
                    try {
                        out.println(new SimpleDateFormat("HH mm ss").format(sysdate));
                        //현재시간을 예약시간과 비교하고 현재시간이 예약시간이면 실행 하도록
                        if (!sdf_ss.format(sysdate).equals("")) {
                            out.print(Integer.parseInt(sdf_ss.format(sysdate)) + "초 입니다.");
                        }
                        win10PcMgr.takeRest(1000);
                    } catch (InterruptedException e) {
                        throw new RuntimeException(e);
                    }
                }


            }
        }

    }

    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>_____  ProjectMgr
    @Getter
    @Setter
    private static class ProjectMgr {
        static Calendar cal = Calendar.getInstance();
        private static String[] calHeader = {"SU", "MO", "TU", "WE", "TH", "FR", "SA"};
        private static String[][] calDate = new String[6][7];
        private static int width = calHeader.length; // 배열 가로 넓이
        private static int startDayOfMonth;
        private static int lastDayOfMonth;
        private static int inputDate = 1;            // 입력 날짜

        public static void printCalendar(String year, String month) {
            int intMonth = Integer.parseInt(month);
            int intYear = Integer.parseInt(year);

            // 입력 month(월) 은 1~12 사이의 값이다.
            if (intMonth < 1 || intMonth > 12) {
                System.out.println("월은 1~12 사이의 숫자입니다.");
            } else {
                // Calendar에 년,월,일 셋팅
                cal.set(Calendar.YEAR, intYear);
                cal.set(Calendar.MONTH, intMonth - 1);
                cal.set(Calendar.DATE, 1);

                startDayOfMonth = cal.get(Calendar.DAY_OF_WEEK); // 월 시작 요일
                lastDayOfMonth = cal.getActualMaximum(Calendar.DATE); // 월 마지막 날짜

                // calDate[row][ ] 에 inputDate 저장 되도록
                int row = 0;
                for (int i = 1; inputDate <= lastDayOfMonth; i++) {
                    // startDay (시작요일) 이 오기전에는 "  " 대입
                    if (i < startDayOfMonth) {
                        calDate[row][i - 1] = "  ";
                    } else {
                        if (inputDate <= 10 - 1) {
                            calDate[row][(i - 1) % width] = " " + Integer.toString(inputDate);
                        }
                        if (10 <= inputDate) {
                            calDate[row][(i - 1) % width] = Integer.toString(inputDate);
                        }
                        inputDate++;
                        // 가로 마지막 열에 오면 행바꿈 되도록
                        if (i % width == 0) row++;
                    }
                }
            }

            //month 출력 되도록( switch 문 형식 )
//            switch (month) {
//                case "1":
//                    out.println("         " + "JAN" + "");
//                    break;
//
//                case "2":
//                    out.println("         " + "FEB" + "");
//                    break;
//
//                case "3":
//                    out.println("         " + "MAR" + "");
//                    break;
//
//                case "4":
//                    out.println("         " + "APR" + "");
//                    break;
//
//                case "5":
//                    out.println("         " + "MAY" + "");
//                    break;
//
//                case "6":
//                    out.println("         " + "JUN" + "");
//                    break;
//
//                case "7":
//                    out.println("         " + "JUL" + "");
//                    break;
//
//                case "8":
//                    out.println("         " + "AUG" + "");
//                    break;
//
//                case "9":
//                    out.println("         " + "SEP" + "");
//                    break;
//
//                case "10":
//                    out.println("         " + "OCT" + "");
//                    break;
//
//                case "11":
//                    out.println("         " + "NOV" + "");
//                    break;
//
//                case "12":
//                    out.println("         " + "DEC" + "");
//                    break;
//
//                default:
//                    break;
//            }

            //month 출력 되도록( if 문 형식 )
            if (month.equals("1")) {
                out.println("         " + "JAN" + "");
            }
            if (month.equals("2")) {
                out.println("         " + "FEB" + "");
            }
            if (month.equals("3")) {
                out.println("         " + "MAR" + "");
            }
            if (month.equals("4")) {
                out.println("         " + "APR" + "");
            }
            if (month.equals("5")) {
                out.println("         " + "MAY" + "");
            }
            if (month.equals("6")) {
                out.println("         " + "JUN" + "");
            }
            if (month.equals("7")) {
                out.println("         " + "JUL" + "");
            }
            if (month.equals("8")) {
                out.println("         " + "AUG" + "");
            }
            if (month.equals("9")) {
                out.println("         " + "SEP" + "");
            }
            if (month.equals("10")) {
                out.println("         " + "OCT" + "");
            }
            if (month.equals("11")) {
                out.println("         " + "NOV" + "");
            }
            if (month.equals("12")) {
                out.println("         " + "DEC" + "");
            }


            //"일월화수목금토" 출력 되도록
            for (int i = 0; i < width; i++) {
                System.out.print(calHeader[i] + " ");
            }
            System.out.println();

            //"sigma 0 to 28||30||31" 날짜 배열 출력
//            int row = 0;
//            for (int j = 1; j < lastDay + startDay; j++) {
//                System.out.print(calDate[row][(j - 1) % width] + " ");
//                if ((j - 1) % width == width - 1) {
//                    System.out.println();
//                    row++;
//                }
//            }

            //"sigma 0 to 28||30||31" 날짜 배열 출력
            int row = 0;
            for (int j = 1; j < lastDayOfMonth + startDayOfMonth; j++) {
                System.out.print(calDate[row][(j - 1) % width] + " ");
                if ((j - 1) % width == width - 1) {
                    System.out.println();
                    row++;
                }
            }
        }

        public static List getHolidayList(String month) {
            List tmp = new ArrayList();
            tmp.add(month);
            return (List) tmp;
        }

        public static void getNotWorkingDays() {
        }


        public static void getWorkingDays(String starDate, String endDate) {
            DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
            Date dateStartDate = null;
            Date dateEndDate = null;
            try {

                dateStartDate = df.parse(starDate);
                dateEndDate = df.parse(endDate);

            } catch (ParseException parseException) {
                parseException.getStackTrace();
            }

            Calendar cal1 = Calendar.getInstance();
            cal1.setTime(dateStartDate);
            Calendar cal2 = Calendar.getInstance();
            cal2.setTime(dateEndDate);
            int workingdays = 0;
            int notWorkingdays = 0;

            // 평일 휴일 리스트
            String month = starDate.substring(5, 7);
            List holidayList = getHolidayList(month);

            while (cal1.before(cal2)) {
                if (Calendar.SATURDAY != cal1.get(Calendar.DAY_OF_WEEK) && (Calendar.SUNDAY != cal1.get(Calendar.DAY_OF_WEEK) && !holidayList.contains(starDate))
                ) {
                    workingdays++;
                } else {
                    notWorkingdays++;
                }
                cal1.add(Calendar.DATE, 1);
                starDate = df.format(cal1.getTime());
            }
            System.out.println("workingdays : " + workingdays);
            System.out.println("notWorkingdays : " + notWorkingdays);
        }

    }

    private static class campingBaseMgr {
    }

    private static class campingBaseReservationMgr {
    }

//    private static class shopingMallMgr {
//    }

//    private static class hospitalMgr {
//    }

    private static class ERP_mgr {
        //(Enterprise Resource Planning)
    }

    private static class FAKE_ITC_DORM_MGR {
    }
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>____  webMgr

    private static class webMgr {
        void validate(Object data, String WAY) {
            if (data == null) {
                return;
            }
            out.println("null test success");
            out.println("object의 데이터타입이 _____ 입니다.");
            out.println("object의 argument는 _____ 입니다.");
            //WAY1
            //문자길이제한
            //WAY2
            //날짜제한
            //WAY3
            //정규식으로제한
            // 휴대폰번호제한//"^\\d{2,3}-\\d{3,4}-\\d{4}$
            //WAY4
            //값크기제한
            //WAY5
            //커스텀하게 제한
        }
    }

    private static class MembershipMgr {
        public static void joinAsMember() {
        }

        public static void cancel() {
        }

        public static boolean IsThisPersonInMemberList(String usr_name, String national_identification_number) {
            return false;
        }
    }


    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>_____  PcMgrs
    @NoArgsConstructor
    public static class win10PcMgr {
        private static StringBuffer buffer;
        private static Process process;
        private static BufferedReader bufferedReader;
        private static StringBuffer readBuffer;
        private static String code;

        public static String run(String BatchScript) {
            buffer = new StringBuffer();
            buffer.append("cmd.exe /c \n");
            buffer.append(BatchScript);
            code = buffer.toString();
            try {
                process = Runtime.getRuntime().exec(code);
                bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                String line = null;
                readBuffer = new StringBuffer();
                while ((line = bufferedReader.readLine()) != null) {
                    readBuffer.append(line);
                    readBuffer.append("\n");
                }
                return readBuffer.toString();
            } catch (Exception e) {
                e.printStackTrace();
                System.exit(1);
            }
            return null;
        }

        public static void cls() {
            for (int i = 0; i < 40; i++) {
                System.out.println("");
            }
//	    System.out.print("\033[H\033[2J");
//	    out.print("\033[H\033[2J");
//		Runtime.getRuntime().exec("cls");
        }

        public static void collectFileAddressAndSaveAsTextFile() {
            StringBuffer batchScript = new StringBuffer();
            batchScript.append("EXPLORER");
            batchScript.append(nbsp);
            batchScript.append("\n");
            batchScript.append("\"E:\\500GB\\do\\utils\\utils batch\\save fileaddress as tmp.txt\\save fileaddress as tmp.txt.bat\"");
            win10PcMgr.run(batchScript.toString());
        }

        public static void updateTextFile(String filename) {
            try {
                FileWriter myWriter = new FileWriter(filename);
                myWriter.write("1");
                myWriter.write("2");
                myWriter.close();
                System.out.println("did edit context fo file.txt Successfully.");
            } catch (IOException e) {
                e.printStackTrace();
                //e.printStackTrace();
            }
        }

        public static void readTextFile(String pathname) {
            try {
                Scanner data1 = new Scanner(new File(pathname));
                while (data1.hasNextLine()) {
                    String data2 = data1.nextLine();
                    System.out.println(data2);
                }
                data1.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }

        }

        public static void createFile(String address) {
            String tmp = address.replaceAll("\\\\", "/");
            try {
                File tmp_File = new File(tmp);
                if (tmp_File.createNewFile()) {
                    out.println("win10PcMgr : i did create file");
                } else {
                    System.out.print(tmp_File);
                    System.out.println(" is already exists.");
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        public static void copyFile(String fromFileAddress, String asFileAddress) {
            // TODO 형광펜 ㅋ!
            String tmp_fromFileAddress;
            for (; ; ) {
                tmp_fromFileAddress = fromFileAddress.replace("\\", "/");
                if (!tmp_fromFileAddress.contains("\\")) {
                    break;
                }
            }
            File tmp_from = new File(tmp_fromFileAddress);
            // TODO
            String tmp_asFileAddress;
            for (; ; ) {
                tmp_asFileAddress = asFileAddress.replace("\\", "/");
                if (!tmp_asFileAddress.contains("\\")) {
                    break;
                }
            }
            File tmp_as = new File(tmp_asFileAddress);
            // TODO
            try {
                Files.copy(tmp_from.toPath(), tmp_as.toPath(), StandardCopyOption.REPLACE_EXISTING);
                out.println("win10PcMgr : i did copy file");
            } catch (IOException e) {
                out.println("catch id 2022 12 21 13 36");
                throw new RuntimeException(e);
            }
        }

        public static void deleteDirectory(String DirectoryAddress) {
            String tmp_DirectoryAddress = DirectoryAddress.replaceAll("\\\\", "/");
            File Directory = new File(tmp_DirectoryAddress);
            try {
                if (Directory.exists()) {
                    File[] folder_list = Directory.listFiles();
                    for (int i = 0; i < folder_list.length; i++) {
                        if (folder_list[i].isFile()) {
                            folder_list[i].delete();
                            out.println("win10PcMgr : i did delete file");
                        } else {
                            deleteFile(folder_list[i].getPath());
                        }
                        folder_list[i].delete();
                        out.println("win10PcMgr : i did delete directory");
                    }
                    Directory.delete();
                }
            } catch (Exception e) {
                e.getStackTrace();
            }
        }

        public static void deleteFile(String FileAddress) {
            String tmp_FileAddress = FileAddress.replaceAll("\\\\", "/");

            File tmp_file = new File(tmp_FileAddress);
            try {
                if (tmp_file.exists()) {
                    tmp_file.delete();
                }
            } catch (Exception e) {
                e.getStackTrace();
            }
        }

        public static void waitFor(String scalar, String way) {
            // 이건 인텔리제이 힌트 기능 없이 재활용이 어려운 코드...스타일입니다.
            if (way.toUpperCase().equals("1")) {
                try {
                    Thread.sleep(Integer.parseInt(scalar));
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
//                out.print("win10PcMgr : i wait for ");
//                out.print(Integer.parseInt(scalar));
//                out.println("miliseconds");
            }
            if (way.toUpperCase().equals("2")) {//min
                try {
                    Thread.sleep(Integer.parseInt(scalar) * 60 * 1000);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
                out.print("win10PcMgr : i wait for ");
                out.print(Integer.parseInt(scalar));
                out.println("mins");
            }
        }

        public static void createDirectory(String address) {
            String tmp_DirectoryAddress = address.replaceAll("\\\\", "/");
            File f = new File(tmp_DirectoryAddress);
            boolean result = f.mkdirs();
            if (result) {
                out.println("win10PcMgr : i did make directory");
            } else {
                try {
                    System.out.println("did not try to make directory, because directory already exist.");
                    throw new Exception("");
                } catch (Exception e) {
                    e.printStackTrace();
                }

            }
        }

        public static void removeDirectory(String DirectoryAddress) {
            String tmp_DirectoryAddress = DirectoryAddress.replaceAll("\\\\", "/");
            File directory = new File(tmp_DirectoryAddress);
            if (directory.exists()) {
                directory.delete();
                System.out.println("did try to remove directory");
            } else {
                System.out.println("directory did not exist.");
            }
        }

        public static void copyDirectory(String fromAddress, String asAddress) {

            String tmp_fromAddress = fromAddress.replaceAll("\\\\", "/");
            String tmp_asAddress = asAddress.replaceAll("\\\\", "/");
            try {
                FileSystemUtils.copyRecursively(new File(tmp_fromAddress), new File(tmp_asAddress));
            } catch (IOException e) {
                out.println("catch id 2022 12 21 14 02");
                throw new RuntimeException(e);
            }
        }

        public static void speakAfter(String min) {
            try {
                Thread.sleep(Integer.parseInt(min) * 60 * 1000);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\foo.mp3");
            win10PcMgr.waitFor(String.valueOf(180 * 3), "1");
            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\" + min + "분.mp3");
            win10PcMgr.waitFor(String.valueOf(180 * 3), "1");
            win10PcMgr.run("EXPLORER" + nbsp + "E:\\500GB\\do\\prjs\\cs\\window OS app\\DESKTOP-I25VIFM\\Mgrs\\src\\main\\resources\\static\\mp3\\경과하였습니다.mp3");
        }

        public static void takeRest(int millis) throws InterruptedException {
            Thread.sleep(millis);
        }

        void open(String FileAddress, String via) {
            String FileExtention = "";//
            if (FileExtention.equals("txt")) {
                win10PcMgr.run("EXPLORER" + " " + FileAddress);
            }
            if (FileExtention.equals("png")) {

            }
            if (FileExtention.equals("jpg")) {

            }
        }
    }

    public static class linux10PcMgr {

    }

    public static class macPcMgr {

    }

    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>_____  TextMgr
    /* TableMgr
    console에 작성되는 table 을 관찰하여 얻은 패턴에 대한 통찰을 얻어, 주관에 따라 table 을 가독성 좋게 console 에 출력 하도록 개발
    아..... 한글을 출력하면 문제가 있었습니다... 가 _ "가" "_" 의 같은점은 1char 라는 것이고 다른점은...자세히 보면 폭이 다릅니다. 하...이는
    콘솔 때문에...char 기준으로는 로직상에서 전혀 문제가 없었는데 한글이 포함되면 자리수를 맞추는 로직이 망가지게 되었습니다. 이를 해결하려면
    한글의 폭과 같은 문자열 하나를 준비하면 될것 같습니다. 언더바가 좋았는데... 못한다니...
    아니면 한글은 포기하고 언더바를 선택하는 것도 좋겠습니다..
    아...생각해보니 안됩니다..제가 TB의 값에 한글을 값으로 쓰려고 했으니까 말입니다..
    "_________________________________" 이것과 아래의 언더바 집합은 개수가 같으나 단차가 다릅니다....
    "대한민국 경기도 안양시 동안구 학의로 120 한가람한양아파트"
    시도해볼만한 아이디어가 하나 떠올랐습니다
    가장긴텍스트를 찾아 한글이 몇자리 있는지 센 후에 그 개수에 2 를 곱한 값을 가장긴텍스트길이 에 보정값으로서 더하는 것입니다
    TEST를 해보니 2를 곱하지 않고 1을 곱해서 보정값을 적용하는 것도 충분하였습니다!.
    .....의도하지는 않았지만 이게 design pattern 인 singletone 이 적용된 예가 아닌가 싶다.
     */
    public static class TextMgr {
        static String nbsp = " ";

        public static String replaceAll(String CONTENT, String REGEX, String REPLACEMENT) {
            return CONTENT.replaceAll(REGEX, REPLACEMENT);
        }

        public static String replaceAll(String CONTENT, String REPLACEMENT, String MODE_REG, String WAY_REVERSE) {
            if (MODE_REG.equals(CODE.MODE_REGEX_REPLACE_SIGMA_0_9)) {
                if (WAY_REVERSE.equals(CODE.MODE_WITH_REVERSE)) {
                    String regex = "[0-9] ";
                    return CONTENT.replaceAll(regex, REPLACEMENT);
                }
                if (WAY_REVERSE.equals(CODE.MODE_WITHOUT_REVERSE)) {
                    String regex = "[^0-9]";
                    return CONTENT.replaceAll(regex, REPLACEMENT);
                }
            }
            if (MODE_REG.equals(CODE.MODE_REGEX_REPLACE_a_TO_z_TO_TOSTR)) {
                if (WAY_REVERSE.equals(CODE.MODE_WITH_REVERSE)) {
                    String regex = "[a-z]";
                    return CONTENT.replaceAll(regex, REPLACEMENT);
                }
                if (WAY_REVERSE.equals(CODE.MODE_WITHOUT_REVERSE)) {
                    String regex = "[^a-z]";
                    return CONTENT.replaceAll(regex, REPLACEMENT);
                }
            }
            if (MODE_REG.equals(CODE.MODE_REGEX_REPLACE_a_TO_z)) {
                if (WAY_REVERSE.equals(CODE.MODE_WITH_REVERSE)) {
                    String regex = "[A-Z]";
                    return CONTENT.replaceAll(regex, REPLACEMENT);
                }
                if (WAY_REVERSE.equals(CODE.MODE_WITHOUT_REVERSE)) {
                    String regex = "[^A-Z]";
                    return CONTENT.replaceAll(regex, REPLACEMENT);
                }
            }
            if (MODE_REG.equals(CODE.MODE_REGEX_REPLACE_SOMETHING_COMPLEX_WAY1)) {
                String regex = "[^0-9a-zA-Z]";
                return CONTENT.replaceAll(regex, REPLACEMENT);
            }
            if (MODE_REG.equals(CODE.MODE_REGEX_REPLACE_SOMETHING_COMPLEX_WAY2)) {
                String regex = "[0-9a-zA-Z]";
                return CONTENT.replaceAll(regex, REPLACEMENT);
            }
            if (MODE_REG.equals(CODE.MODE_REGEX_REPLACE_SOMETHING_COMPLEX_WAY3)) {
                String regex = "[\uAC00-\uD7A3]";
                return CONTENT.replaceAll(regex, REPLACEMENT);
            }
            if (MODE_REG.equals(CODE.MODE_REGEX_REPLACE_SOMETHING_COMPLEX_WAY4)) {
                String regex = "[^\uAC00-\uD7A30-9a-zA-Z]";
                return CONTENT.replaceAll(regex, REPLACEMENT);
            }
            if (MODE_REG.equals(CODE.MODE_REGEX_REPLACE_SOMETHING_COMPLEX_WAY5)) {
                String regex = "[\\s]";
                return CONTENT.replaceAll(regex, REPLACEMENT);
            }
            if (MODE_REG.equals(CODE.MODE_REGEX_REPLACE_SOMETHING_COMPLEX_WAY6)) {
                String regex = "[\uAC00-\uD7A30-9a-zA-Z]";

                return CONTENT.replaceAll(regex, REPLACEMENT);
            }
            return "METHOD FAIL ID 2022 12 15 09 58";
        }


        public static String extractSQL(String SQL_text, String WAY) {

            //특정 문자열 관련 제거 처리 + 개행제거
            if (WAY.equals("WAY1")) {
                String tmp = SQL_text.trim();
                tmp = tmp.replaceAll("strSQL.append\\(\"\\\\n\"\\).append\\(\"", "");
                tmp = tmp.replaceAll("sql.append\\(\"\\\\n\"\\).append\\(\"", "");
                tmp = tmp.replaceAll("sql.append\\(\"\\\\\"\\).append\\(\"", "");
                tmp = tmp.replaceAll("ht.get\\(\"", "");
                tmp = tmp.replaceAll("strSQL", "");
                tmp = tmp.replaceAll("rs.getString", "");
                tmp = tmp.replaceAll("rs.getString", "");
                tmp = tmp.replaceAll("sql.append", "");
                tmp = tmp.replaceAll("\"\\);", "");
                tmp = tmp.replaceAll("\n", "");
                tmp = tmp.replaceAll("\t", nbsp);
                tmp = tmp.replaceAll(nbsp + nbsp, nbsp);
                tmp = tmp.replaceAll("  ", nbsp);
                tmp = tmp.replaceAll("  ", nbsp);
                return tmp;
            }
            //특정 키워드 대문자 처리 (LETTER CASE 처리)
            if (WAY.equals("WAY2")) {
                String tmp = SQL_text.trim();
//                String proper = tmp2.substring(0, 1).toUpperCase() + tmp2.substring(1).toLowerCase();
//                String upper = tmp2.toUpperCase();
//                String lower = tmp2.toLowerCase();
                String[] tmp3 = new String[]{"Select", "From", "Where", "And", "Group By", "Order By", "Left Join", "Right Join", "Join", " Or ", "Set", "Update", "Insert", "Delete"};
                for (int i = 0; i <= tmp3.length - 1; i++) {
                    tmp = tmp.replaceAll(tmp3[i], tmp3[i].toUpperCase());
                    tmp = tmp.replaceAll(tmp3[i].toLowerCase(), tmp3[i].toUpperCase());
                }
                return tmp;
            }
            //대문자인 특정 문자열 줄바꿈 처리 (개행삽입)
            if (WAY.equals("WAY3")) {
                String tmp = SQL_text.trim();
//                tmp = tmp.replaceAll(",", ",\n");
                tmp = tmp.replaceAll("\\(", "\\(\n");
                tmp = tmp.replaceAll("SELECT", "\nSELECT");
                tmp = tmp.replaceAll("FROM", "\nFROM");
                tmp = tmp.replaceAll("WHERE", "\nWHERE");
                tmp = tmp.replaceAll("AND", "\nAND");
                if (!(tmp.contains("LEFT JOIN") || tmp.contains("RIGHT JOIN") || tmp.contains("OUTER JOIN"))) {
                    tmp = tmp.replaceAll("JOIN \\(", "\nJOIN \\(");
                }
                tmp = tmp.replaceAll("LEFT JOIN", "\nLEFT JOIN");
                tmp = tmp.replaceAll("RIGHT JOIN", "\nRIGHT JOIN");
                tmp = tmp.replaceAll("FULL OUTER JOIN", "\nFULL OUTER JOIN");
                tmp = tmp.replaceAll("GROUP BY", "\nGROUP BY");
                tmp = tmp.replaceAll("ON", "\nON");
                tmp = tmp.replaceAll("SET", "\nSET");
                tmp = tmp.replaceAll("UPDATE", "\nUPDATE");
                tmp = tmp.replaceAll("DELETE", "\nDELETE");
                tmp = tmp.replaceAll("INSERT", "\nINSERT");
                tmp = tmp.replaceAll("ORDER BY", "\nORDER BY");
//                tmp = tmp.replaceAll("\\)", "\n\\)");
                return tmp;
            }
            //WAY_JSP_QUERY_TO_SQL
            if (WAY.equals("WAY_JSP_QUERY_TO_SQL")) {
                String tmp = SQL_text.trim();
                tmp = TextMgr.extractSQL(tmp, "WAY2");
                tmp = tmp.replaceAll("\t", nbsp);
                tmp = tmp.replaceAll(nbsp + nbsp, nbsp);
                tmp = tmp.replaceAll("//", "--");
                tmp = tmp.replaceAll("rs.getString", "");
                tmp = tmp.replaceAll("\"\\);", "");
                tmp = tmp.replaceAll("\n", "");
                tmp = tmp.replaceAll("strSQL.append\\(\"\\\\n\"\\).append\\(\"", "");
                tmp = tmp.replaceAll("sql.append\\(\"\\\\n\"\\).append\\(\"", "");
                tmp = tmp.replaceAll("sql.append\\(\"\\\\\"\\).append\\(\"", "");
                tmp = tmp.replaceAll("strSQL", "");
                tmp = tmp.replaceAll("rs.getString", "");
                tmp = tmp.replaceAll("ht.get\\(\"", "");
                tmp = tmp.replaceAll("\\\\n", "");
                tmp = tmp.replaceAll("\"\\+", "");
                tmp = tmp.replaceAll("\\+\"", "");
                tmp = tmp.replaceAll(";", "");
                tmp = TextMgr.extractSQL(tmp, "WAY3");
                tmp = tmp.replaceAll(nbsp + nbsp, nbsp);
//                tmp = TextMgr.replaceAll(tmp, ".append(\\\\\"", "");
                return tmp;
            }
            //CUSTOM
            if (WAY.equals("WAY_CUSTOM1")) {
                String tmp = SQL_text.trim();
                tmp = TextMgr.extractSQL(tmp, "WAY2");
                tmp = tmp.replaceAll("\t", nbsp);
                tmp = tmp.replaceAll(nbsp + nbsp, nbsp);
                tmp = tmp.replaceAll("//", "--");
                tmp = tmp.replaceAll("rs.getString", "");
                tmp = tmp.replaceAll("\"\\);", "");
                tmp = tmp.replaceAll("\n", "");
                tmp = tmp.replaceAll("strSQL.append\\(\"\\\\n\"\\).append\\(\"", "");
                tmp = tmp.replaceAll("sql.append\\(\"\\\\n\"\\).append\\(\"", "");
                tmp = tmp.replaceAll("sql.append\\(\"\\\\\"\\).append\\(\"", "");
                tmp = tmp.replaceAll("strSQL", "");
                tmp = tmp.replaceAll("rs.getString", "");
                tmp = tmp.replaceAll("ht.get\\(", "");
                tmp = tmp.replaceAll(".append\\(\"", "");
                tmp = tmp.replaceAll("\\\\n", "");
                tmp = tmp.replaceAll("\"\\+", "");
                tmp = tmp.replaceAll("\\+\"", "");
                tmp = tmp.replaceAll(";", "");
                tmp = TextMgr.extractSQL(tmp, "WAY3");
                tmp = tmp.replaceAll(nbsp + nbsp, nbsp);

                tmp = tmp.replaceAll("\n", "");
                tmp = TextMgr.extractSQL(tmp, "WAY3");


//                tmp = tmp.replaceAll( "\\\\n", "");
//                tmp = tmp.replaceAll( "\"\\+", "");
//                tmp = tmp.replaceAll( "\\+\"", "");
//                tmp = tmp.replaceAll( ";", "");
////                tmp = tmp.replaceAll("\\(", "\\(\n");
//                tmp = tmp.replaceAll("SELECT", "\nSELECT");
//                tmp = tmp.replaceAll("FROM", "\nFROM");
//                tmp = tmp.replaceAll("WHERE", "\nWHERE");
//                tmp = tmp.replaceAll("AND", "\nAND");
//                if (!(tmp.contains("LEFT JOIN") || tmp.contains("RIGHT JOIN") || tmp.contains("OUTER JOIN"))) {
//                    tmp = tmp.replaceAll("JOIN \\(", "\nJOIN \\(");
//                }
//                tmp = tmp.replaceAll("LEFT JOIN", "\nLEFT JOIN");
//                tmp = tmp.replaceAll("RIGHT JOIN", "\nRIGHT JOIN");
//                tmp = tmp.replaceAll("FULL OUTER JOIN", "\nFULL OUTER JOIN");
//                tmp = tmp.replaceAll("GROUP BY", "\nGROUP BY");
//                tmp = tmp.replaceAll("ON", "\nON");
//                tmp = tmp.replaceAll("if", "\nif");
                return tmp;
            }
            //CUSTOM
            if (WAY.equals("WAY_CUSTOM2")) {
                String tmp = SQL_text.trim();
                tmp = TextMgr.extractSQL(tmp, "WAY2");
                tmp = tmp.replaceAll("\t\t", nbsp);
                tmp = tmp.replaceAll(" \t", nbsp);
                tmp = tmp.replaceAll("  ", nbsp);
                tmp = tmp.replaceAll("//", "--");
                tmp = tmp.replaceAll("\n", "");
                tmp = TextMgr.extractSQL(tmp, "WAY3");
                tmp = tmp.replaceAll("strSQL.append\\(\"\\\\n\"\\).append\\(\"", "");
                tmp = tmp.replaceAll("sql.append\\(\"\\\\n\"\\).append\\(\"", "");
                tmp = tmp.replaceAll("sql.append\\(\"\\\\\"\\).append\\(\"", "");
                tmp = tmp.replaceAll("\"\\);", "");
                tmp = tmp.replaceAll("strSQL", "");
                tmp = tmp.replaceAll(".append\\(\"", "");
                tmp = tmp.replaceAll("\\\\n", "");
                tmp = tmp.replaceAll(";", "");
                tmp = tmp.replaceAll("SELECT", "\nSELECT");
                tmp = tmp.replaceAll("FROM", "\nFROM");
                tmp = tmp.replaceAll("WHERE", "\nWHERE");
                tmp = tmp.replaceAll("AND", "\nAND");
                if (!(tmp.contains("LEFT JOIN") || tmp.contains("RIGHT JOIN") || tmp.contains("OUTER JOIN"))) {
                    tmp = tmp.replaceAll("JOIN \\(", "\nJOIN \\(");
                }
                tmp = tmp.replaceAll("LEFT JOIN", "\nLEFT JOIN");
                tmp = tmp.replaceAll("RIGHT JOIN", "\nRIGHT JOIN");
                tmp = tmp.replaceAll("FULL OUTER JOIN", "\nFULL OUTER JOIN");

                tmp = tmp.replaceAll("GROUP BY", "\nGROUP BY");
                tmp = tmp.replaceAll("ON", "\nON");
                tmp = tmp.replaceAll("if", "\nif");
                return tmp;
            }
            return "METHOD FAIL ID 2022 12 13 13 50";

        }

        public static String replaceDuplicatedSymbolToSequenceNumber(String CONTENT, String UNIQUE_WORD, String WAY) {
            //내가 만들었지만 매우 편하다. 항상 필요했던 부분인데 만들었고 만족스럽다
            //%UNIQE_WORD_BY_JHP% 가 시작단어 거나 끝단어 인경우 는 안되기에 좌우로 쓸때 없는 시작단어를 붙이고 끝단어를 붙인다음
            //이제 "%UNIQE_WORD_BY_JHP%" 개수 를 certainWordCount 에 저장하도록
            String uniqueWord = "%UNIQE_WORD_BY_JHP%";
            String tmp = TextMgr.replaceAll(CONTENT, UNIQUE_WORD, uniqueWord);
            String StartFooWord = "%START_WORD_BY_JHP%"; // 사실 시작단어, 끝 단어를 둘 중 하나르 없애도 되는데, 사고하는 과정상에 과정을 보여주기 위해 refactoing 하지 않았습니다.
            String EndFooWord = "%START_WORD_BY_JHP%";
            StringBuffer tmp3 = new StringBuffer();
            tmp3.append(StartFooWord);
            tmp3.append(tmp);
            tmp3.append(EndFooWord);
            String[] tmp2 = tmp3.toString().split(uniqueWord);
            int UniqueWordCount = tmp2.length - 1;
//            out.println(UniqueWordCount); //UniqueWordCount 를 알 수 있습니다.
            //certainWordCount 만큼 숫자가 담길 리스트를 만들도록, 숫자는 문자로 변환하여 ArrayList<String> 인 tmp4 에 저장
            ArrayList<String> tmp4 = new ArrayList<>();
            String TEXT_REPLACED = tmp3.toString().replaceAll(StartFooWord, "");
            for (int i = 0; i <= UniqueWordCount - 1; i++) {
                tmp4.add(Integer.toString(i + 1));
            }
//            out.println(tmp3.toString()); tmp3 에 저장된 unique word 로 치환된 텍스트를 확인할 수 있습니다.
//            for(String s : tmp4) // tmp4 에 저장된 문자열 숫자 값을 확인할 수 있습니다.
//                out.println(s);
            for (int i = 0; i <= UniqueWordCount - 1; i++) {
                TEXT_REPLACED = TEXT_REPLACED.replaceFirst(uniqueWord, tmp4.get(i));
//                                out.println(TEXT_REPLACED);// TEXT_REPLACED 가 점진적으로 변해가는 과정을 볼 수 있습니다.
            }
            return TEXT_REPLACED;


        }

        public static String CountUniqueWord(String CONTENT, String UNIQUE_WORD) {
            String uniqueWord = "%UNIQE_WORD_BY_JHP%";
            String tmp = TextMgr.replaceAll(CONTENT, UNIQUE_WORD, uniqueWord);
            String StartFooWord = "%JHP_FOO%";
            String EndFooWord = "%JHP_FOO%";
            StringBuffer tmp3 = new StringBuffer();
            tmp3.append(StartFooWord);
            tmp3.append(tmp);
            tmp3.append(EndFooWord);
            String[] tmp2 = tmp3.toString().split(uniqueWord);
            int UniqueWordCount = tmp2.length - 1;
            return Integer.toString(UniqueWordCount);
        }


        public static String translateTerminologyAsFollowingWordingPolicy(String CONTENT, String WORDING_POLICY) {
            // 일일이 찾아보는것이...찾지않고 한번에 번역된 것을 보면 어떨까.. make that i can understand easily
            // enComprehensiveString     :     내가 이해할수 있는 문자열로 변환 처리
            // 한글화 처리    :
            // 영문화 처리    : 한글문자열을 영문화(영문문자열)
            // 동시다국어 처리 :
            // dbeaber 에서 txt||xls 로 expert 해서 contents 에 넣으면 번역이  되도록
            // 서로 다른 테이블에 같은 이름의 컬럼인데 서로 다른 정의를 갖는 경우 ... 동음다의어 이슈 발견...
            // console 에 한글 출력 시 발생하는 align 이 틀어지는 이슈로,  엑셀로 저장하는 것이 좋겠음.
            String tmp = CONTENT;
            if (WORDING_POLICY == "itcDormSystem") {
                tmp = tmp.toUpperCase();
                tmp = tmp.replaceAll("2602000/동음다의어 처리 샘플", "2학기||사랑합니다.");//동음다의어 처리
                tmp = tmp.replaceAll("ACL_CD2/동시다국어 처리 샘플", "ACL_CD2(한글번역처리)");//동시다국어 처리  ( 잘모르겠는건 자주 이렇게 출력 하면 외워지겠지 )
                tmp = tmp.replaceAll("1000000", "생활관");
                tmp = tmp.replaceAll("1001000", "생활관신청");
                tmp = tmp.replaceAll("1001001", "생활관비");
                tmp = tmp.replaceAll("1001002", "보증금");
                tmp = tmp.replaceAll("1001003", "기타비용");
                tmp = tmp.replaceAll("1100000", "외박종류코드");
                tmp = tmp.replaceAll("1101000", "외박");
                tmp = tmp.replaceAll("1101001", "주말 외박");
                tmp = tmp.replaceAll("1101002", "공휴일 외박");
                tmp = tmp.replaceAll("1101005", "평일 외박");
                tmp = tmp.replaceAll("1101006", "공무/공강");
                tmp = tmp.replaceAll("1101007", "장기 외박");
                tmp = tmp.replaceAll("1104000", "벌점면제대상");
                tmp = tmp.replaceAll("1200000", "벌점코드");
                tmp = tmp.replaceAll("1201000", "배정된 호실을 관생 임의로 변경하는 행위");
                tmp = tmp.replaceAll("1202000", "타인의 휴식을 고의로 방해하는 행위(호실 무단 이동 행위 포함)");
                tmp = tmp.replaceAll("1203000", "출입카드 대여 행위");
                tmp = tmp.replaceAll("1204000", "생활관 주변 금연구역에서 흡연");
                tmp = tmp.replaceAll("1205000", "생활관 내 주류 반입 및 음주 행위");
                tmp = tmp.replaceAll("1206000", "생활관 내 허가받지 않은 전열기구(각종 버너, 전기장판, 난로, 고데기, 모기향, 향초, 등 화재위험이 있는 물품 포함)를 반입하거나 사용하는 행위");
                tmp = tmp.replaceAll("1207000", "허가 없이 외부인을 대동 입실하는 행위");
                tmp = tmp.replaceAll("1208000", "지정된 출입구를 이용하지 않는 행위");
                tmp = tmp.replaceAll("1209000", "생활관 내에서 사전 허가받지 않고 음식물을 조리하는 행위");
                tmp = tmp.replaceAll("1210000", "생활관 및 그 부속시설의 구조변경, 위치변경 등 원상을 변경하거나 손상을 가하는 행위 (손·망실액 전액 변상)");
                tmp = tmp.replaceAll("1211000", "인원 점검 후 무단으로 생활관을 이탈하는 행위");
                tmp = tmp.replaceAll("1212000", "생활관 반입 금지 물품 및 기타 위험 물질을 무단반입 및 사용");
                tmp = tmp.replaceAll("1213000", "생활관 내에서 면학분위기를 저해하는 행위 (과도한 애정행위 등)");
                tmp = tmp.replaceAll("1214000", "남여 이성의 생활관을 엿보는 행위 및 이와 유사한 행위");
                tmp = tmp.replaceAll("1215000", "생활관 내의 소란 및 소음을 유발하는 행위");
                tmp = tmp.replaceAll("1216000", "무단외박 행위");
                tmp = tmp.replaceAll("1217000", "만취상태로 생활관에 들어오는 행위");
                tmp = tmp.replaceAll("1218000", "타인 명의의 우편물 수취 또는 개봉하는 행위(택배물 포함)");
                tmp = tmp.replaceAll("1219000", "배달음식을 호실내로 배달 요청하는 행위");
                tmp = tmp.replaceAll("1220000", "애완용 동물의 사육 행위");
                tmp = tmp.replaceAll("1221000", "폭언, 근거 없는 비방 및 유언비어를 유포하는 행위(인터넷 포함)");
                tmp = tmp.replaceAll("1222000", "계단, 난간 등에서 위험한 행위");
                tmp = tmp.replaceAll("1223000", "퇴사 시 호실 청소와 정리정돈 불이행");
                tmp = tmp.replaceAll("1224000", "무단으로 생활관 공식행사에 불참하는 행위(오리엔테이션, 안전 및 소방훈련 등)");
                tmp = tmp.replaceAll("1225000", "인원점검 불참 및 생활관 통제시간 위반 행위");
                tmp = tmp.replaceAll("1226000", "쓰레기를 무단투기하거나 지정된 장소에 분리배출하지 않는 행위 ");
                tmp = tmp.replaceAll("1227000", "공용 공간에 대하여 이용제한시간 이후 무단으로 이용하는 행위 ");
                tmp = tmp.replaceAll("1228000", "게시물 훼손, 낙서, 광고물의 무단전시 및 배포하는 경우");
                tmp = tmp.replaceAll("1229000", "호실 청소상태 불량");
                tmp = tmp.replaceAll("1230000", "호실 내에서 신발을 신고 다니는 행위");
                tmp = tmp.replaceAll("1231000", "생활관 외부(쉼터, 주차장, 조경지역 등) 흡연구역 외의 장소에서 흡연하는 행위");
                tmp = tmp.replaceAll("1232000", "생활관 내에서 침이나 가래를 뱉는 행위");
                tmp = tmp.replaceAll("1233000", "기타 관생으로서 준수해야 할 사항을 지키지 않았거나, 생활관 내의 질서를 문란하게 하는 행위");
                tmp = tmp.replaceAll("1234000", "생활관 대여 물품을 기한 내에 반납하지 않는 행위(주당)");
                tmp = tmp.replaceAll("1235000", "생활관 화재 야간대피훈련 미참가자");
                tmp = tmp.replaceAll("1236000", "생활관 OT 미참가자");
                tmp = tmp.replaceAll("1237000", "생활관 출입통제시스템을 고의로 왜곡하여 출입정보를 허위 기록하는 행위");
                tmp = tmp.replaceAll("1300000", "상점코드");
                tmp = tmp.replaceAll("1301000", "생활관 발전에 기여하거나 명예를 선양시킨 자");
                tmp = tmp.replaceAll("1302000", "관장 또는 총장으로부터 포상을 받은 자");
                tmp = tmp.replaceAll("1303000", "입학학생처장이 인정하는 일정액 이상의 마일리지장학금 수혜자");
                tmp = tmp.replaceAll("1304000", "생활관에 입사한 장애우도우미 활동을 성실히 수행한 자");
                tmp = tmp.replaceAll("1305000", "기타 공동생활에 모범이 된 자");
                tmp = tmp.replaceAll("1306000", "봉사활동(행사 참여 및 근무자 업무 보조)에 참여한 자");
                tmp = tmp.replaceAll("1307000", "안전한 생활관을 위해 기여한 자");
                tmp = tmp.replaceAll("1308000", "강제 퇴사에 해당하는 위반 사항을 제보한 자");
                tmp = tmp.replaceAll("1309000", "생활관 화재 야간대피훈련 참가자");
                tmp = tmp.replaceAll("1500000", "남여코드");
                tmp = tmp.replaceAll("1501000", "남자");
                tmp = tmp.replaceAll("1502000", "여자");
                tmp = tmp.replaceAll("1503000", "무관");
                tmp = tmp.replaceAll("1700000", "지역등급코드");
                tmp = tmp.replaceAll("1701000", "1급지");
                tmp = tmp.replaceAll("1701001", "0");
                tmp = tmp.replaceAll("1702000", "2급지");
                tmp = tmp.replaceAll("1702001", "0");
                tmp = tmp.replaceAll("1703000", "3급지");
                tmp = tmp.replaceAll("1703001", "0");
                tmp = tmp.replaceAll("1704000", "4급지");
                tmp = tmp.replaceAll("1704001", "0");
                tmp = tmp.replaceAll("1705000", "5급지");
                tmp = tmp.replaceAll("1705001", "0");
                tmp = tmp.replaceAll("1706000", "6급지");
                tmp = tmp.replaceAll("1706001", "0");
                tmp = tmp.replaceAll("1800000", "학년구분");
                tmp = tmp.replaceAll("1801000", "1학년");
                tmp = tmp.replaceAll("1802000", "2학년");
                tmp = tmp.replaceAll("1803000", "3학년");
                tmp = tmp.replaceAll("1804000", "4학년");
                tmp = tmp.replaceAll("1900000", "사용자소속 성격코드");
                tmp = tmp.replaceAll("1901000", "신입생");
                tmp = tmp.replaceAll("1901001", "신입생");
                tmp = tmp.replaceAll("1902000", "재학생");
                tmp = tmp.replaceAll("1902001", "재학생");
                tmp = tmp.replaceAll("1903000", "외국인");
                tmp = tmp.replaceAll("1903001", "외국인");
                tmp = tmp.replaceAll("2000000", "사용자소속 구분코드");
                tmp = tmp.replaceAll("2010000", "학부");
                tmp = tmp.replaceAll("2100000", "권한코드");
                tmp = tmp.replaceAll("2101000", "System");
                tmp = tmp.replaceAll("2102000", "Supervisor");
                tmp = tmp.replaceAll("2103000", "학사장");
                tmp = tmp.replaceAll("2104000", "대외협력실");
                tmp = tmp.replaceAll("2105000", "사감");
                tmp = tmp.replaceAll("2106000", "조교");
                tmp = tmp.replaceAll("2107000", "건물관리");
                tmp = tmp.replaceAll("2108000", "식당담당");
                tmp = tmp.replaceAll("2109000", "보안");
                tmp = tmp.replaceAll("2110000", "회계관리자");
                tmp = tmp.replaceAll("2111000", "VOC담당");
                tmp = tmp.replaceAll("2112000", "아르바이트");
                tmp = tmp.replaceAll("2200000", "납입구분");
                tmp = tmp.replaceAll("2201000", "일시납");
                tmp = tmp.replaceAll("2202000", "월납");
                tmp = tmp.replaceAll("2300000", "생활관신청학생구분");
                tmp = tmp.replaceAll("2301000", "연장입사생");
                tmp = tmp.replaceAll("2302000", "신규입사생");
                tmp = tmp.replaceAll("2400000", "생활관신청상태코드");
                tmp = tmp.replaceAll("2401000", "신청대기");
                tmp = tmp.replaceAll("2402000", "합격");
                tmp = tmp.replaceAll("2403000", "불합격");
                tmp = tmp.replaceAll("2404000", "예비순위");
                tmp = tmp.replaceAll("2600000", "모집구분코드");
                tmp = tmp.replaceAll("2601000", "1학기");
                tmp = tmp.replaceAll("2602000", "2학기");
                tmp = tmp.replaceAll("2603000", "하계방학");
                tmp = tmp.replaceAll("2604000", "동계방학");
                tmp = tmp.replaceAll("2605000", "1학기 기말");
                tmp = tmp.replaceAll("2606000", "하계토익캠프");
                tmp = tmp.replaceAll("2607000", "2학기 중간");
                tmp = tmp.replaceAll("2608000", "2학기 기말");
                tmp = tmp.replaceAll("2609000", "1학기 선입주");
                tmp = tmp.replaceAll("2610000", "2학기 선입주");
                tmp = tmp.replaceAll("2700000", "입사희망기간");
                tmp = tmp.replaceAll("2701000", "16주(학기중)");
                tmp = tmp.replaceAll("2702000", "24주(방학포함)");
                tmp = tmp.replaceAll("2703000", "40주");
                tmp = tmp.replaceAll("2704000", "50주");
                tmp = tmp.replaceAll("2705000", "6주");
                tmp = tmp.replaceAll("2706000", "e-MU 1차");
                tmp = tmp.replaceAll("2707000", "e-MU 2차");
                tmp = tmp.replaceAll("2708000", "8주");
                tmp = tmp.replaceAll("2709000", "4주");
                tmp = tmp.replaceAll("2710000", "7주");
                tmp = tmp.replaceAll("2711000", "2주");
                tmp = tmp.replaceAll("2712000", "현장실습");
                tmp = tmp.replaceAll("2713000", "중간고사기간");
                tmp = tmp.replaceAll("2714000", "기말고사기간");
                tmp = tmp.replaceAll("2715000", "3주");
                tmp = tmp.replaceAll("2716000", "기말종합(1주)");
                tmp = tmp.replaceAll("2717000", "기말종합(2주A)");
                tmp = tmp.replaceAll("2718000", "기말종합(2주B)");
                tmp = tmp.replaceAll("2719000", "기말종합(3주)");
                tmp = tmp.replaceAll("2800000", "객실코드");
                tmp = tmp.replaceAll("2801000", "2인실A");
                tmp = tmp.replaceAll("2802000", "2인실B");
                tmp = tmp.replaceAll("2803000", "4인실");
                tmp = tmp.replaceAll("2804000", "장애인실");
                tmp = tmp.replaceAll("2900000", "건물코드");
                tmp = tmp.replaceAll("2901000", "A동");
                tmp = tmp.replaceAll("2902000", "B동");
                tmp = tmp.replaceAll("2903000", "C동");
                tmp = tmp.replaceAll("2904000", "D동");
                tmp = tmp.replaceAll("3000000", "퇴사사유코드");
                tmp = tmp.replaceAll("3001000", "벌점초과");
                tmp = tmp.replaceAll("3002000", "관내 내규 불이행");
                tmp = tmp.replaceAll("3003000", "중도퇴사");
                tmp = tmp.replaceAll("3003001", "가사휴학");
                tmp = tmp.replaceAll("3003002", "입대휴학");
                tmp = tmp.replaceAll("3003003", "기타(기존)");
                tmp = tmp.replaceAll("3003004", "자퇴");
                tmp = tmp.replaceAll("3003005", "휴학");
                tmp = tmp.replaceAll("3003006", "룸메이트와의 갈등");
                tmp = tmp.replaceAll("3003007", "취사의 어려움");
                tmp = tmp.replaceAll("3003008", "기타");
                tmp = tmp.replaceAll("3004000", "만기퇴사");
                tmp = tmp.replaceAll("3005000", "만기후퇴사");
                tmp = tmp.replaceAll("3006000", "미입사퇴사");
                tmp = tmp.replaceAll("3200000", "층코드");
                tmp = tmp.replaceAll("3201000", "지하1층");
                tmp = tmp.replaceAll("3202000", "지하2층");
                tmp = tmp.replaceAll("3203000", "지상1층");
                tmp = tmp.replaceAll("3204000", "지상2층");
                tmp = tmp.replaceAll("3205000", "지상3층");
                tmp = tmp.replaceAll("3206000", "지상4층");
                tmp = tmp.replaceAll("3207000", "지상5층");
                tmp = tmp.replaceAll("3208000", "지상6층");
                tmp = tmp.replaceAll("3209000", "지상7층");
                tmp = tmp.replaceAll("3210000", "지상8층");
                tmp = tmp.replaceAll("3211000", "지상9층");
                tmp = tmp.replaceAll("3212000", "지상10층");
                tmp = tmp.replaceAll("3213000", "지상11층");
                tmp = tmp.replaceAll("3214000", "지상12층");
                tmp = tmp.replaceAll("3215000", "지상13층");
                tmp = tmp.replaceAll("3216000", "지상14층");
                tmp = tmp.replaceAll("3217000", "지상15층");
                tmp = tmp.replaceAll("3218000", "지상16층");
                tmp = tmp.replaceAll("3300000", "외박신청상태코드");
                tmp = tmp.replaceAll("3301000", "신청대기");
                tmp = tmp.replaceAll("3302000", "자동승인");
                tmp = tmp.replaceAll("3303000", "불가");
                tmp = tmp.replaceAll("3304000", "관리자취소");
                tmp = tmp.replaceAll("3305000", "사용자취소");
                tmp = tmp.replaceAll("3306000", "관리자승인");
                tmp = tmp.replaceAll("3400000", "신청및조회기간코드");
                tmp = tmp.replaceAll("3401000", "생활관신청");
                tmp = tmp.replaceAll("3401005", "전체모집");
                tmp = tmp.replaceAll("3404000", "룸메이트신청");
                tmp = tmp.replaceAll("3405000", "합격자 조회 / 납부고지서 출력");
                tmp = tmp.replaceAll("3407000", "납부기간");
                tmp = tmp.replaceAll("3408000", "입사확인 및 비품점검");
                tmp = tmp.replaceAll("3409000", "입사포기신청");
                tmp = tmp.replaceAll("3410000", "입사서류제출");
                tmp = tmp.replaceAll("3500000", "학사일정코드");
                tmp = tmp.replaceAll("3501000", "1학기");
                tmp = tmp.replaceAll("3502000", "2학기");
                tmp = tmp.replaceAll("3503000", "여름방학");
                tmp = tmp.replaceAll("3504000", "겨울방학");
                tmp = tmp.replaceAll("3600000", "합격기준코드");
                tmp = tmp.replaceAll("3601000", "원거리");
                tmp = tmp.replaceAll("3602000", "장학생");
                tmp = tmp.replaceAll("3603000", "장기입사신청");
                tmp = tmp.replaceAll("3604000", "학년");
                tmp = tmp.replaceAll("3605000", "신규입사여부");
                tmp = tmp.replaceAll("3651000", "성적");
                tmp = tmp.replaceAll("3651001", "학점");
                tmp = tmp.replaceAll("3651002", "정시");
                tmp = tmp.replaceAll("3651003", "수시1");
                tmp = tmp.replaceAll("3652000", "상점");
                tmp = tmp.replaceAll("3653000", "벌점");
                tmp = tmp.replaceAll("3654000", "가정형편가산점");
                tmp = tmp.replaceAll("3655000", "면접점수");
                tmp = tmp.replaceAll("3656000", "나이");
                tmp = tmp.replaceAll("3657000", "신청일");
                tmp = tmp.replaceAll("3658000", "기타1");
                tmp = tmp.replaceAll("3659000", "기타2");
                tmp = tmp.replaceAll("3660000", "기타3");
                tmp = tmp.replaceAll("3900000", "특별할인코드");
                tmp = tmp.replaceAll("3904000", "자치위원할인");
                tmp = tmp.replaceAll("3999000", "해당없음");
                tmp = tmp.replaceAll("4100000", "객실상태코드");
                tmp = tmp.replaceAll("4101000", "공실");
                tmp = tmp.replaceAll("4102000", "잔여실");
                tmp = tmp.replaceAll("4103000", "만실");
                tmp = tmp.replaceAll("4200000", "외박승인신청처리여부");
                tmp = tmp.replaceAll("4201000", "처리");
                tmp = tmp.replaceAll("4202000", "미처리");
                tmp = tmp.replaceAll("4300000", "입금환불구분코드");
                tmp = tmp.replaceAll("4301000", "입금");
                tmp = tmp.replaceAll("4302000", "혜택금환불");
                tmp = tmp.replaceAll("4303000", "중도퇴사환불");
                tmp = tmp.replaceAll("4304000", "만기퇴사환불");
                tmp = tmp.replaceAll("4305000", "비품설비수리비");
                tmp = tmp.replaceAll("4308000", "퇴사환불공제");
                tmp = tmp.replaceAll("4360000", "의무식입금코드");
                tmp = tmp.replaceAll("4360001", "의무식최초입금");
                tmp = tmp.replaceAll("4360002", "의무식변경입금");
                tmp = tmp.replaceAll("4360003", "의무식면제변경입금");
                tmp = tmp.replaceAll("4360004", "중도퇴실의무식입금");
                tmp = tmp.replaceAll("4360005", "만기퇴실의무식입금");
                tmp = tmp.replaceAll("4370000", "의무식환불코드");
                tmp = tmp.replaceAll("4370001", "의무식변경환불");
                tmp = tmp.replaceAll("4370002", "의무식면제변경환불");
                tmp = tmp.replaceAll("4370003", "중도퇴실의무식환불");
                tmp = tmp.replaceAll("4370004", "만기퇴실의무식환불");
                tmp = tmp.replaceAll("4500000", "기타공지 항목");
                tmp = tmp.replaceAll("4501000", "?");
                tmp = tmp.replaceAll("4504000", "합격자조회시 합격시 내용");
                tmp = tmp.replaceAll("4505000", "합격자조회시 불합격시 내용");
                tmp = tmp.replaceAll("4506000", "신청하지 않은 사용자일 경우 내용");
                tmp = tmp.replaceAll("4507000", "합격자조회시 예비순위시 내용");
                tmp = tmp.replaceAll("4508000", "합격자조회시 신청대기 내용");
                tmp = tmp.replaceAll("4600000", "비품");
                tmp = tmp.replaceAll("4601000", "침대");
                tmp = tmp.replaceAll("4602000", "매트리스");
                tmp = tmp.replaceAll("4603000", "매트리스방수커버");
                tmp = tmp.replaceAll("4604000", "매트리스면커버");
                tmp = tmp.replaceAll("4605000", "책상장&아울렛");
                tmp = tmp.replaceAll("4606000", "조합형책상&아울렛");
                tmp = tmp.replaceAll("4607000", "책상");
                tmp = tmp.replaceAll("4608000", "이동형책장");
                tmp = tmp.replaceAll("4609000", "이동서랍");
                tmp = tmp.replaceAll("4610000", "의자");
                tmp = tmp.replaceAll("4611000", "옷장");
                tmp = tmp.replaceAll("4612000", "신발장");
                tmp = tmp.replaceAll("4613000", "벽지");
                tmp = tmp.replaceAll("4614000", "바닥");
                tmp = tmp.replaceAll("4615000", "화장실");
                tmp = tmp.replaceAll("4700000", "설비");
                tmp = tmp.replaceAll("4701000", "옷장");
                tmp = tmp.replaceAll("4702000", "신발장");
                tmp = tmp.replaceAll("4717000", "거울");
                tmp = tmp.replaceAll("4718000", "샤워기");
                tmp = tmp.replaceAll("4719000", "휴지걸이");
                tmp = tmp.replaceAll("4720000", "서랍장");
                tmp = tmp.replaceAll("4721000", "세면대");
                tmp = tmp.replaceAll("4722000", "양변기");
                tmp = tmp.replaceAll("4723000", "냉난방 온도조절기");
                tmp = tmp.replaceAll("4724000", "휴지통(2개)");
                tmp = tmp.replaceAll("4725000", "전등 및 등기구 커버");
                tmp = tmp.replaceAll("4726000", "수건걸이");
                tmp = tmp.replaceAll("4727000", "환풍기");
                tmp = tmp.replaceAll("4728000", "문손잡이");
                tmp = tmp.replaceAll("4729000", "도어락(공통)");
                tmp = tmp.replaceAll("4800000", "작성자FLAG");
                tmp = tmp.replaceAll("4801000", "입사생");
                tmp = tmp.replaceAll("4802000", "보수여부");
                tmp = tmp.replaceAll("4803000", "관리자");
                tmp = tmp.replaceAll("4900000", "시설상태코드");
                tmp = tmp.replaceAll("4901000", "양호");
                tmp = tmp.replaceAll("4902000", "불량");
                tmp = tmp.replaceAll("4903000", "칼,못자국");
                tmp = tmp.replaceAll("4904000", "낙서");
                tmp = tmp.replaceAll("4905000", "기타훼손");
                tmp = tmp.replaceAll("5000000", "객실이동구분");
                tmp = tmp.replaceAll("5001000", "이동");
                tmp = tmp.replaceAll("5002000", "잔류");
                tmp = tmp.replaceAll("5300000", "학생상태코드");
                tmp = tmp.replaceAll("5301000", "재학");
                tmp = tmp.replaceAll("5302000", "휴학");
                tmp = tmp.replaceAll("5303000", "제적");
                tmp = tmp.replaceAll("5304000", "졸업");
                tmp = tmp.replaceAll("5305000", "신입");
                tmp = tmp.replaceAll("5306000", "일반");
                tmp = tmp.replaceAll("5400000", "신입생구분코드");
                tmp = tmp.replaceAll("5401000", "정시");
                tmp = tmp.replaceAll("5402000", "수시1");
                tmp = tmp.replaceAll("5403000", "수시2");
                tmp = tmp.replaceAll("5404000", "재외국민");
                tmp = tmp.replaceAll("5500000", "국적코드");
                tmp = tmp.replaceAll("5501000", "국적코드");
                tmp = tmp.replaceAll("5501001", "Ghana");
                tmp = tmp.replaceAll("5501002", "Gabon");
                tmp = tmp.replaceAll("5501003", "Guyana");
                tmp = tmp.replaceAll("5501004", "Gambia");
                tmp = tmp.replaceAll("5501005", "Guatemala");
                tmp = tmp.replaceAll("5501006", "Grenada");
                tmp = tmp.replaceAll("5501007", "Greece");
                tmp = tmp.replaceAll("5501008", "Guinea");
                tmp = tmp.replaceAll("5501009", "Republic Of Guinea-Bissau");
                tmp = tmp.replaceAll("5501010", "Namibia");
                tmp = tmp.replaceAll("5501011", "Republic Of Nauru");
                tmp = tmp.replaceAll("5501012", "Nigeria");
                tmp = tmp.replaceAll("5501013", "South Africa");
                tmp = tmp.replaceAll("5501014", "Netherlands");
                tmp = tmp.replaceAll("5501015", "Nepal");
                tmp = tmp.replaceAll("5501016", "Norway");
                tmp = tmp.replaceAll("5501017", "New Zealand");
                tmp = tmp.replaceAll("5501018", "Niger");
                tmp = tmp.replaceAll("5501019", "Nicaragua");
                tmp = tmp.replaceAll("5501020", "Korea");
                tmp = tmp.replaceAll("5501021", "Denmark");
                tmp = tmp.replaceAll("5501022", "Dominica");
                tmp = tmp.replaceAll("5501023", "Dominican Republic");
                tmp = tmp.replaceAll("5501024", "Germany");
                tmp = tmp.replaceAll("5501025", "Lao People’S Democratic Republic");
                tmp = tmp.replaceAll("5501026", "Liberia");
                tmp = tmp.replaceAll("5501027", "Latvia");
                tmp = tmp.replaceAll("5501028", "Russian Federation");
                tmp = tmp.replaceAll("5501029", "Lebanon");
                tmp = tmp.replaceAll("5501030", "Lesotho");
                tmp = tmp.replaceAll("5501031", "Romania");
                tmp = tmp.replaceAll("5501032", "Luxembourg");
                tmp = tmp.replaceAll("5501033", "Rwanda");
                tmp = tmp.replaceAll("5501034", "Libya");
                tmp = tmp.replaceAll("5501035", "Lithuania");
                tmp = tmp.replaceAll("5501036", "Liechtenstein");
                tmp = tmp.replaceAll("5501037", "Madagascar");
                tmp = tmp.replaceAll("5501038", "Marshall Islands");
                tmp = tmp.replaceAll("5501039", "Malawi");
                tmp = tmp.replaceAll("5501040", "Malaysia");
                tmp = tmp.replaceAll("5501041", "Mali");
                tmp = tmp.replaceAll("5501042", "Malta");
                tmp = tmp.replaceAll("5501043", "Mexico");
                tmp = tmp.replaceAll("5501044", "Monaco");
                tmp = tmp.replaceAll("5501045", "Morocco");
                tmp = tmp.replaceAll("5501046", "Mauritius");
                tmp = tmp.replaceAll("5501047", "Mauritania");
                tmp = tmp.replaceAll("5501048", "Mozambique");
                tmp = tmp.replaceAll("5501049", "Republic Of Moldova");
                tmp = tmp.replaceAll("5501050", "Maldives");
                tmp = tmp.replaceAll("5501051", "Mongolia");
                tmp = tmp.replaceAll("5501052", "United States");
                tmp = tmp.replaceAll("5501053", "Myanmar");
                tmp = tmp.replaceAll("5501054", "Micronesia");
                tmp = tmp.replaceAll("5501055", "Vanuatu");
                tmp = tmp.replaceAll("5501056", "Bahrain");
                tmp = tmp.replaceAll("5501057", "Barbados");
                tmp = tmp.replaceAll("5501058", "Vatican City");
                tmp = tmp.replaceAll("5501059", "Bahamas");
                tmp = tmp.replaceAll("5501060", "Bangladesh");
                tmp = tmp.replaceAll("5501061", "Benin");
                tmp = tmp.replaceAll("5501062", "Venezuela");
                tmp = tmp.replaceAll("5501063", "Viet Nam");
                tmp = tmp.replaceAll("5501064", "Belgium");
                tmp = tmp.replaceAll("5501065", "Belarus");
                tmp = tmp.replaceAll("5501066", "Belize");
                tmp = tmp.replaceAll("5501067", "Bosnia And Herzegovina");
                tmp = tmp.replaceAll("5501068", "Botswana");
                tmp = tmp.replaceAll("5501069", "Bolivia");
                tmp = tmp.replaceAll("5501070", "Burundi");
                tmp = tmp.replaceAll("5501071", "Burkina Faso");
                tmp = tmp.replaceAll("5501072", "Bhutan");
                tmp = tmp.replaceAll("5501073", "Democratic People’S Republic Of Korea");
                tmp = tmp.replaceAll("5501074", "Bulgaria");
                tmp = tmp.replaceAll("5501075", "Brazil");
                tmp = tmp.replaceAll("5501076", "Brunei Darussalam");
                tmp = tmp.replaceAll("5501077", "Samoa");
                tmp = tmp.replaceAll("5501078", "Dsaudi Arabia");
                tmp = tmp.replaceAll("5501079", "San Marino");
                tmp = tmp.replaceAll("5501080", "Sao Tome And Principe");
                tmp = tmp.replaceAll("5501081", "Senegal");
                tmp = tmp.replaceAll("5501082", "Seychelles");
                tmp = tmp.replaceAll("5501083", "Saint Lucia");
                tmp = tmp.replaceAll("5501084", "Saint Vincent And The Grenadines");
                tmp = tmp.replaceAll("5501085", "Saint Kitts And Nevis");
                tmp = tmp.replaceAll("5501086", "Somalia");
                tmp = tmp.replaceAll("5501087", "Solomon Islands");
                tmp = tmp.replaceAll("5501088", "Sudan");
                tmp = tmp.replaceAll("5501089", "Suriname");
                tmp = tmp.replaceAll("5501090", "Sri Lanka");
                tmp = tmp.replaceAll("5501091", "Swaziland");
                tmp = tmp.replaceAll("5501092", "Sweden");
                tmp = tmp.replaceAll("5501093", "Switzerland");
                tmp = tmp.replaceAll("5501094", "Spain");
                tmp = tmp.replaceAll("5501095", "Slovakia");
                tmp = tmp.replaceAll("5501096", "Slovenia");
                tmp = tmp.replaceAll("5501097", "Syria");
                tmp = tmp.replaceAll("5501098", "Sierra Leone");
                tmp = tmp.replaceAll("5501099", "Singapore");
                tmp = tmp.replaceAll("5501100", "United Arab Emirates");
                tmp = tmp.replaceAll("5501101", "Armenia");
                tmp = tmp.replaceAll("5501102", "Argentina");
                tmp = tmp.replaceAll("5501103", "Iceland");
                tmp = tmp.replaceAll("5501104", "Haiti");
                tmp = tmp.replaceAll("5501105", "Ireland");
                tmp = tmp.replaceAll("5501106", "Azerbaijan");
                tmp = tmp.replaceAll("5501107", "Afghanistan");
                tmp = tmp.replaceAll("5501108", "Albania");
                tmp = tmp.replaceAll("5501109", "Algeria");
                tmp = tmp.replaceAll("5501110", "Angola");
                tmp = tmp.replaceAll("5501111", "Antigua And Barbuda");
                tmp = tmp.replaceAll("5501112", "Estonia");
                tmp = tmp.replaceAll("5501113", "Ecuador");
                tmp = tmp.replaceAll("5501114", "El Salvador");
                tmp = tmp.replaceAll("5501115", "United Kingdom");
                tmp = tmp.replaceAll("5501116", "Yemen");
                tmp = tmp.replaceAll("5501117", "Oman");
                tmp = tmp.replaceAll("5501118", "Australia");
                tmp = tmp.replaceAll("5501119", "Austria");
                tmp = tmp.replaceAll("5501120", "Honduras");
                tmp = tmp.replaceAll("5501121", "Jordan");
                tmp = tmp.replaceAll("5501122", "Uganda");
                tmp = tmp.replaceAll("5501123", "Uruguay");
                tmp = tmp.replaceAll("5501124", "Uzbekistan");
                tmp = tmp.replaceAll("5501125", "Ukraine");
                tmp = tmp.replaceAll("5501126", "Yugoslavia");
                tmp = tmp.replaceAll("5501127", "Ethiopia");
                tmp = tmp.replaceAll("5501128", "Iraq");
                tmp = tmp.replaceAll("5501129", "Iran");
                tmp = tmp.replaceAll("5501130", "Israel");
                tmp = tmp.replaceAll("5501131", "Egypt");
                tmp = tmp.replaceAll("5501132", "Italy");
                tmp = tmp.replaceAll("5501133", "India");
                tmp = tmp.replaceAll("5501134", "Indonesia");
                tmp = tmp.replaceAll("5501135", "Japan");
                tmp = tmp.replaceAll("5501136", "Jamaica");
                tmp = tmp.replaceAll("5501137", "Zaire");
                tmp = tmp.replaceAll("5501138", "Zambia");
                tmp = tmp.replaceAll("5501139", "Equatorial Guinea");
                tmp = tmp.replaceAll("5501140", "Georgia");
                tmp = tmp.replaceAll("5501141", "China");
                tmp = tmp.replaceAll("5501142", "Central African Republic");
                tmp = tmp.replaceAll("5501143", "Djibouti");
                tmp = tmp.replaceAll("5501144", "Zimbabwe");
                tmp = tmp.replaceAll("5501145", "Chad");
                tmp = tmp.replaceAll("5501146", "Czech Republic");
                tmp = tmp.replaceAll("5501147", "Chile");
                tmp = tmp.replaceAll("5501148", "Cameroon");
                tmp = tmp.replaceAll("5501149", "Cape Verde");
                tmp = tmp.replaceAll("5501150", "Kazakhstan");
                tmp = tmp.replaceAll("5501151", "Qatar");
                tmp = tmp.replaceAll("5501152", "Cambodia");
                tmp = tmp.replaceAll("5501153", "Canada");
                tmp = tmp.replaceAll("5501154", "Kenya");
                tmp = tmp.replaceAll("5501155", "Union Of The Comoros");
                tmp = tmp.replaceAll("5501156", "Costa Rica");
                tmp = tmp.replaceAll("5501157", "Republic Of C?te D’Ivoire");
                tmp = tmp.replaceAll("5501158", "Colombia");
                tmp = tmp.replaceAll("5501159", "Congo");
                tmp = tmp.replaceAll("5501160", "Cuba");
                tmp = tmp.replaceAll("5501161", "Kuwait");
                tmp = tmp.replaceAll("5501162", "Cook Islands");
                tmp = tmp.replaceAll("5501163", "Croatia");
                tmp = tmp.replaceAll("5501164", "Kyrgyzstan");
                tmp = tmp.replaceAll("5501165", "Kiribati");
                tmp = tmp.replaceAll("5501166", "Cyprus");
                tmp = tmp.replaceAll("5501167", "Tajikistan");
                tmp = tmp.replaceAll("5501168", "Thailand");
                tmp = tmp.replaceAll("5501169", "Turkey");
                tmp = tmp.replaceAll("5501170", "Togo");
                tmp = tmp.replaceAll("5501171", "Tonga");
                tmp = tmp.replaceAll("5501172", "Turkmenistan");
                tmp = tmp.replaceAll("5501173", "Tuvalu");
                tmp = tmp.replaceAll("5501174", "Tunisia");
                tmp = tmp.replaceAll("5501175", "Trinidad And Tobago");
                tmp = tmp.replaceAll("5501176", "Panama");
                tmp = tmp.replaceAll("5501177", "Paraguay");
                tmp = tmp.replaceAll("5501178", "Pakistan");
                tmp = tmp.replaceAll("5501179", "Papua New Guina");
                tmp = tmp.replaceAll("5501180", "Peru");
                tmp = tmp.replaceAll("5501181", "Portugal");
                tmp = tmp.replaceAll("5501182", "Poland");
                tmp = tmp.replaceAll("5501183", "France");
                tmp = tmp.replaceAll("5501184", "Fiji");
                tmp = tmp.replaceAll("5501185", "Finland");
                tmp = tmp.replaceAll("5501186", "Philippines");
                tmp = tmp.replaceAll("5501187", "Hungary");
                tmp = tmp.replaceAll("5501188", "Honkong");
                tmp = tmp.replaceAll("5501189", "Taiwan");
                tmp = tmp.replaceAll("5501190", "Wales");
                tmp = tmp.replaceAll("5501191", "Scotland");
                tmp = tmp.replaceAll("5501192", "Aruba Island");
                tmp = tmp.replaceAll("5501193", "Eritrea");
                tmp = tmp.replaceAll("5501194", "Macedonia");
                tmp = tmp.replaceAll("5501195", "Tanzania");
                tmp = tmp.replaceAll("5501196", "Taiwan(미사용)");
                tmp = tmp.replaceAll("5501999", "기타");
                tmp = tmp.replaceAll("5600000", "원가비용코드");
                tmp = tmp.replaceAll("5601000", "원가비용1");
                tmp = tmp.replaceAll("5601001", "원가비용1-1");
                tmp = tmp.replaceAll("5601002", "원가비용1-2");
                tmp = tmp.replaceAll("5602000", "원가비용2");
                tmp = tmp.replaceAll("5602001", "원가비용2-1");
                tmp = tmp.replaceAll("5602002", "원가비용2-2");
                tmp = tmp.replaceAll("5603000", "원가비용3");
                tmp = tmp.replaceAll("5603001", "원가비용3-1");
                tmp = tmp.replaceAll("5603002", "원가비용3-2");
                tmp = tmp.replaceAll("5700000", "사실배정기준");
                tmp = tmp.replaceAll("5701000", "학과");
                tmp = tmp.replaceAll("5702000", "장학생");
                tmp = tmp.replaceAll("5703000", "장기입사신청");
                tmp = tmp.replaceAll("5704000", "학년");
                tmp = tmp.replaceAll("5705000", "신규입사여부");
                tmp = tmp.replaceAll("5751000", "학점");
                tmp = tmp.replaceAll("5752000", "상점");
                tmp = tmp.replaceAll("5753000", "벌점");
                tmp = tmp.replaceAll("5754000", "가정형편가산점");
                tmp = tmp.replaceAll("5755000", "면접점수");
                tmp = tmp.replaceAll("5756000", "나이");
                tmp = tmp.replaceAll("5757000", "신청일");
                tmp = tmp.replaceAll("5800000", "수입항목");
                tmp = tmp.replaceAll("5801000", "기타수입");
                tmp = tmp.replaceAll("5801001", "출입카드재발급비");
                tmp = tmp.replaceAll("5900000", "지출항목");
                tmp = tmp.replaceAll("5901000", "인건비");
                tmp = tmp.replaceAll("5901001", "시설관리");
                tmp = tmp.replaceAll("5901002", "행정관리");
                tmp = tmp.replaceAll("5901003", "기타관리");
                tmp = tmp.replaceAll("5902000", "직접 경비");
                tmp = tmp.replaceAll("5902001", "수선비");
                tmp = tmp.replaceAll("5902002", "소모품비");
                tmp = tmp.replaceAll("5902003", "수도광열비");
                tmp = tmp.replaceAll("5902004", "설비수수료");
                tmp = tmp.replaceAll("5902005", "보험료");
                tmp = tmp.replaceAll("5902006", "감가상각비");
                tmp = tmp.replaceAll("5902007", "교통비");
                tmp = tmp.replaceAll("5902009", "통신비");
                tmp = tmp.replaceAll("5902010", "도서인쇄비");
                tmp = tmp.replaceAll("5902011", "문화행사비");
                tmp = tmp.replaceAll("5902012", "교육훈련비");
                tmp = tmp.replaceAll("5902013", "본부지원비");
                tmp = tmp.replaceAll("5903000", "간접 경비");
                tmp = tmp.replaceAll("5903001", "간접비");
                tmp = tmp.replaceAll("6000000", "은행코드");
                tmp = tmp.replaceAll("6001000", "기업은행");
                tmp = tmp.replaceAll("6002000", "한국산업은행");
                tmp = tmp.replaceAll("6003000", "농협은행");
                tmp = tmp.replaceAll("6004000", "수협은행");
                tmp = tmp.replaceAll("6005000", "한국수출입은행");
                tmp = tmp.replaceAll("6006000", "제주은행");
                tmp = tmp.replaceAll("6007000", "전북은행");
                tmp = tmp.replaceAll("6008000", "신한은행");
                tmp = tmp.replaceAll("6009000", "KEB하나은행");
                tmp = tmp.replaceAll("6010000", "한국외환은행");
                tmp = tmp.replaceAll("6011000", "한국스탠다드차타드은행");
                tmp = tmp.replaceAll("6012000", "국민은행");
                tmp = tmp.replaceAll("6013000", "우리은행");
                tmp = tmp.replaceAll("6014000", "부산은행");
                tmp = tmp.replaceAll("6015000", "대구은행");
                tmp = tmp.replaceAll("6016000", "경남은행");
                tmp = tmp.replaceAll("6017000", "광주은행");
                tmp = tmp.replaceAll("6018000", "한국씨티은행");
                tmp = tmp.replaceAll("6019000", "우체국");
                tmp = tmp.replaceAll("6020000", "새마을금고");
                tmp = tmp.replaceAll("6021000", "케이뱅크은행");
                tmp = tmp.replaceAll("6022000", "한국카카오은행");
                tmp = tmp.replaceAll("6100000", "모집단위코드");
                tmp = tmp.replaceAll("6101000", "기존관생");
                tmp = tmp.replaceAll("6102000", "신규입주생");
                tmp = tmp.replaceAll("6111000", "전체모집");
                tmp = tmp.replaceAll("6300000", "비품점검예정시 ~ 비품점검예정시간");
                tmp = tmp.replaceAll("6301000", "10:00~10:30");
                tmp = tmp.replaceAll("6302000", "10:30~11:00");
                tmp = tmp.replaceAll("6303000", "11:00~11:30");
                tmp = tmp.replaceAll("6304000", "11:30~12:00");
                tmp = tmp.replaceAll("6305000", "12:00~12:30");
                tmp = tmp.replaceAll("6306000", "12:30~13:00");
                tmp = tmp.replaceAll("6307000", "13:00~13:30");
                tmp = tmp.replaceAll("6308000", "13:30~14:00");
                tmp = tmp.replaceAll("6309000", "14:00~14:30");
                tmp = tmp.replaceAll("6310000", "14:30~15:00");
                tmp = tmp.replaceAll("6311000", "15:00~15:30");
                tmp = tmp.replaceAll("6312000", "15:30~16:00");
                tmp = tmp.replaceAll("6313000", "16:00~16:30");
                tmp = tmp.replaceAll("6314000", "16:30~17:00");
                tmp = tmp.replaceAll("6315000", "17:00~17:30");
                tmp = tmp.replaceAll("6316000", "17:30~18:00");
                tmp = tmp.replaceAll("6317000", "18:00~18:30");
                tmp = tmp.replaceAll("6318000", "18:30~19:00");
                tmp = tmp.replaceAll("6319000", "19:00~19:30");
                tmp = tmp.replaceAll("6320000", "19:30~20:00");
                tmp = tmp.replaceAll("6400000", "의무식종류");
                tmp = tmp.replaceAll("6401000", "월 20식");
                tmp = tmp.replaceAll("6405000", "해당없음");
                tmp = tmp.replaceAll("6500000", "식비면제코드");
                tmp = tmp.replaceAll("6501000", "관리자면제");
                tmp = tmp.replaceAll("6502000", "비관리자면제");
                tmp = tmp.replaceAll("6503000", "미면제");
                tmp = tmp.replaceAll("6600000", "개인물품(차량) 코드");
                tmp = tmp.replaceAll("6601000", "자전거");
                tmp = tmp.replaceAll("6602000", "오토바이");
                tmp = tmp.replaceAll("6603000", "자동차");
                tmp = tmp.replaceAll("6700000", "개인물품 접수상태 코드");
                tmp = tmp.replaceAll("6701000", "신청");
                tmp = tmp.replaceAll("6702000", "등록");
                tmp = tmp.replaceAll("6800000", "개인물품 처리상태 코드");
                tmp = tmp.replaceAll("6801000", "신청접수");
                tmp = tmp.replaceAll("6802000", "등록증 발급");
                tmp = tmp.replaceAll("6803000", "등록증 재발급");
                tmp = tmp.replaceAll("6804000", "강제회수-보관");
                tmp = tmp.replaceAll("6805000", "폐기처분");
                tmp = tmp.replaceAll("6806000", "개인회수");
                tmp = tmp.replaceAll("6900000", "공휴일관리");
                tmp = tmp.replaceAll("6901000", "공휴일");
                tmp = tmp.replaceAll("6902000", "여름방학");
                tmp = tmp.replaceAll("6903000", "겨울방학");
                tmp = tmp.replaceAll("7000000", "퇴사환불공제항목");
                tmp = tmp.replaceAll("7001000", "기타공제항목");
                tmp = tmp.replaceAll("7002000", "카드재발급");
                tmp = tmp.replaceAll("7003000", "침구세탁비(e-MU)");
                tmp = tmp.replaceAll("7004000", "청소비(e-MU)");
                tmp = tmp.replaceAll("7100000", "선호도");
                tmp = tmp.replaceAll("7101000", "주활동시간대");
                tmp = tmp.replaceAll("7101001", "아침형");
                tmp = tmp.replaceAll("7101002", "저녁형");
                tmp = tmp.replaceAll("7102000", "더싫어하는날씨");
                tmp = tmp.replaceAll("7102001", "더위 탐");
                tmp = tmp.replaceAll("7102002", "추위 탐");
                tmp = tmp.replaceAll("7103000", "흡연 여부");
                tmp = tmp.replaceAll("7103001", "흡연");
                tmp = tmp.replaceAll("7103002", "비흡연");
                tmp = tmp.replaceAll("7104000", "코 고는 여부");
                tmp = tmp.replaceAll("7104001", "예");
                tmp = tmp.replaceAll("7104002", "아니오");
                tmp = tmp.replaceAll("7105000", "청소빈도");
                tmp = tmp.replaceAll("7105001", "자주하는편");
                tmp = tmp.replaceAll("7105002", "가끔 하는편");
                tmp = tmp.replaceAll("7200000", "종교");
                tmp = tmp.replaceAll("7201000", "카톨릭");
                tmp = tmp.replaceAll("7202000", "기독교");
                tmp = tmp.replaceAll("7203000", "불교");
                tmp = tmp.replaceAll("7204000", "이슬람교");
                tmp = tmp.replaceAll("7205000", "기타");
                tmp = tmp.replaceAll("7206000", "무교");
                tmp = tmp.replaceAll("7207000", "No Comment");
                tmp = tmp.replaceAll("7300000", "객실내위치");
                tmp = tmp.replaceAll("7301000", "1");
                tmp = tmp.replaceAll("7302000", "2");
                tmp = tmp.replaceAll("7303000", "3");
                tmp = tmp.replaceAll("7304000", "4");
                tmp = tmp.replaceAll("7400000", "비품설비위치");
                tmp = tmp.replaceAll("7401000", "객실");
                tmp = tmp.replaceAll("7402000", "화장실");
                tmp = tmp.replaceAll("7403000", "샤워장");
                tmp = tmp.replaceAll("7404000", "현관");
                tmp = tmp.replaceAll("7500000", "품목점검내용");
                tmp = tmp.replaceAll("7501000", "불량");
                tmp = tmp.replaceAll("7502000", "양호");
                tmp = tmp.replaceAll("7600000", "점검상태");
                tmp = tmp.replaceAll("7601000", "사용자");
                tmp = tmp.replaceAll("7601001", "미등록");
                tmp = tmp.replaceAll("7601002", "이상없음");
                tmp = tmp.replaceAll("7601003", "조치필요");
                tmp = tmp.replaceAll("7602000", "관리자");
                tmp = tmp.replaceAll("7602001", "미점검");
                tmp = tmp.replaceAll("7602002", "점검");
                tmp = tmp.replaceAll("7602003", "조치필요");
                tmp = tmp.replaceAll("7700000", "고장신고분류");
                tmp = tmp.replaceAll("7701000", "기타");
                tmp = tmp.replaceAll("7702000", "방재");
                tmp = tmp.replaceAll("7703000", "보안");
                tmp = tmp.replaceAll("7704000", "공조(냉난방기)");
                tmp = tmp.replaceAll("7705000", "위생");
                tmp = tmp.replaceAll("7706000", "객실");
                tmp = tmp.replaceAll("7707000", "승강기");
                tmp = tmp.replaceAll("7708000", "시스템(인터넷)");
                tmp = tmp.replaceAll("7709000", "화장실");
                tmp = tmp.replaceAll("7710000", "유틸리티");
                tmp = tmp.replaceAll("7711000", "보관소");
                tmp = tmp.replaceAll("7712000", "전기");
                tmp = tmp.replaceAll("7713000", "조명");
                tmp = tmp.replaceAll("7714000", "청소");
                tmp = tmp.replaceAll("7715000", "통신(전화)");
                tmp = tmp.replaceAll("7716000", "AV설비");
                tmp = tmp.replaceAll("7800000", "세미나실");
                tmp = tmp.replaceAll("7801000", "세미나실1");
                tmp = tmp.replaceAll("7802000", "세미나실2");
                tmp = tmp.replaceAll("7803000", "세미나실3");
                tmp = tmp.replaceAll("7900000", "세미나실기자재");
                tmp = tmp.replaceAll("7901000", "빔프로젝터");
                tmp = tmp.replaceAll("7902000", "의자");
                tmp = tmp.replaceAll("7903000", "노트북");
                tmp = tmp.replaceAll("7904000", "화이트보드");
                tmp = tmp.replaceAll("8000000", "세미나실승인상태");
                tmp = tmp.replaceAll("8001000", "신청대기");
                tmp = tmp.replaceAll("8002000", "사용자취소");
                tmp = tmp.replaceAll("8003000", "관리자취소");
                tmp = tmp.replaceAll("8004000", "관리자승인");
                tmp = tmp.replaceAll("8005000", "불가");
                tmp = tmp.replaceAll("8006000", "신청제한취소");
                tmp = tmp.replaceAll("8100000", "세미나실 신청 제한");
                tmp = tmp.replaceAll("8101000", "무단사용");
                tmp = tmp.replaceAll("8102000", "음식섭취");
                tmp = tmp.replaceAll("8103000", "가용 시간대 외 사용");
                tmp = tmp.replaceAll("8104000", "정리정돈 불량");
                tmp = tmp.replaceAll("8105000", "비품 훼손 후 원상복구 불량");
                tmp = tmp.replaceAll("8106000", "1인 사용");
                tmp = tmp.replaceAll("8107000", "목적 외 이용");
                tmp = tmp.replaceAll("8108000", "기타");
                tmp = tmp.replaceAll("8200000", "현금영수증 코드");
                tmp = tmp.replaceAll("8201000", "휴대폰번호");
                tmp = tmp.replaceAll("8202000", "현금영수증 카드");
                tmp = tmp.replaceAll("8300000", "렌탈품목");
                tmp = tmp.replaceAll("8301000", "청소기");
                tmp = tmp.replaceAll("8302000", "카트");
                tmp = tmp.replaceAll("8303000", "대걸레");
                tmp = tmp.replaceAll("8304000", "침구청소기");
                tmp = tmp.replaceAll("8400000", "렌탈품목승인상태");
                tmp = tmp.replaceAll("8401000", "신청대기");
                tmp = tmp.replaceAll("8402000", "사용자취소");
                tmp = tmp.replaceAll("8403000", "관리자취소");
                tmp = tmp.replaceAll("8404000", "관리자승인");
                tmp = tmp.replaceAll("8405000", "불가");
                tmp = tmp.replaceAll("8406000", "신청제한취소");
                tmp = tmp.replaceAll("8500000", "렌탈서비스 신청제한");
                tmp = tmp.replaceAll("8501000", "무단사용");
                tmp = tmp.replaceAll("8502000", "가용 시간대 외 사용");
                tmp = tmp.replaceAll("8503000", "비품 훼손 후 원상복구 불량");
                tmp = tmp.replaceAll("8504000", "외부반출");
                tmp = tmp.replaceAll("8505000", "기타");
                tmp = tmp.replaceAll("8600000", "개인집기");
                tmp = tmp.replaceAll("8601000", "조합형침대");
                tmp = tmp.replaceAll("8602000", "침대");
                tmp = tmp.replaceAll("8603000", "매트리스");
                tmp = tmp.replaceAll("8604000", "매트리스방수커버");
                tmp = tmp.replaceAll("8605000", "매트리스면커버");
                tmp = tmp.replaceAll("8606000", "이동형책상");
                tmp = tmp.replaceAll("8607000", "책상");
                tmp = tmp.replaceAll("8608000", "이동 및 고정형 책장");
                tmp = tmp.replaceAll("8609000", "책상장");
                tmp = tmp.replaceAll("8610000", "의자");
                tmp = tmp.replaceAll("8611000", "이동서랍");
                tmp = tmp.replaceAll("8612000", "옷장");
                tmp = tmp.replaceAll("8613000", "신발장");
                tmp = tmp.replaceAll("8700000", "우선선발");
                tmp = tmp.replaceAll("8701000", "해당없음(일반신청)");
                tmp = tmp.replaceAll("8702000", "기초생활수급자");
                tmp = tmp.replaceAll("8703000", "국가유공자(자녀)");
                tmp = tmp.replaceAll("8704000", "재외국민");
                tmp = tmp.replaceAll("8705000", "외국인 유학생");
                tmp = tmp.replaceAll("8706000", "4급이상 장애인");
                tmp = tmp.replaceAll("8707000", "장애인 도우미");
                tmp = tmp.replaceAll("8708000", "직전학기 생활관 모범생활자");
                tmp = tmp.replaceAll("8800000", "분실습득코드");
                tmp = tmp.replaceAll("8801000", "현금");
                tmp = tmp.replaceAll("8802000", "핸드폰");
                tmp = tmp.replaceAll("8803000", "전자제품");
                tmp = tmp.replaceAll("8804000", "가방");
                tmp = tmp.replaceAll("8805000", "지갑");
                tmp = tmp.replaceAll("8806000", "쇼핑백");
                tmp = tmp.replaceAll("8807000", "의류");
                tmp = tmp.replaceAll("8808000", "신발");
                tmp = tmp.replaceAll("8809000", "우산");
                tmp = tmp.replaceAll("8810000", "도서류");
                tmp = tmp.replaceAll("8811000", "기타");
                tmp = tmp.replaceAll("8900000", "입사제한코드");
                tmp = tmp.replaceAll("8901000", "음주 및 흡연");
                tmp = tmp.replaceAll("8902000", "벌점과다");
                tmp = tmp.replaceAll("8903000", "외부인동반");
                tmp = tmp.replaceAll("8904000", "기타");
                tmp = tmp.replaceAll("9000000", "상담분류코드");
                tmp = tmp.replaceAll("9001000", "생활지도");
                tmp = tmp.replaceAll("9002000", "생활관 민원");
                tmp = tmp.replaceAll("9003000", "룸메이트 관계");
                tmp = tmp.replaceAll("9004000", "상벌점 및 징계");
                tmp = tmp.replaceAll("9005000", "입퇴사");
                tmp = tmp.replaceAll("9100000", "자가진단코드");
                tmp = tmp.replaceAll("9200000", "입사포기코드");
                tmp = tmp.replaceAll("9201000", "생활관비 부담");
                tmp = tmp.replaceAll("9202000", "학사일정 변경");
                tmp = tmp.replaceAll("9203000", "교외 거주희망");
                tmp = tmp.replaceAll("9204000", "통제시간 부담");
                tmp = tmp.replaceAll("9205000", "기타");
                tmp = tmp.replaceAll("9300000", "서류코드");
                tmp = tmp.replaceAll("9301000", "주민등본");
                tmp = tmp.replaceAll("9301001", "주민등록등본");
                tmp = tmp.replaceAll("9301002", "1");
                tmp = tmp.replaceAll("9302000", "결핵검사");
                tmp = tmp.replaceAll("9302001", "결핵검사확인서(또는 보건증)");
                tmp = tmp.replaceAll("9302002", "2");
                tmp = tmp.replaceAll("9303000", "장애증명");
                tmp = tmp.replaceAll("9303001", "장애인증명서");
                tmp = tmp.replaceAll("9303002", "3");
                tmp = tmp.replaceAll("9304000", "장애동의");
                tmp = tmp.replaceAll("9304001", "장애인의 동의서");
                tmp = tmp.replaceAll("9304002", "4");
                tmp = tmp.replaceAll("9305000", "유공자확인");
                tmp = tmp.replaceAll("9305001", "국가유공자 확인원");
                tmp = tmp.replaceAll("9305002", "5");
                tmp = tmp.replaceAll("9306000", "수급증명");
                tmp = tmp.replaceAll("9306001", "기초생활 수급자증명서");
                tmp = tmp.replaceAll("9306002", "6");
                tmp = tmp.replaceAll("9307000", "외국인등록");
                tmp = tmp.replaceAll("9307001", "외국인등록증 사본 또는 여권");
                tmp = tmp.replaceAll("9307002", "7");
                tmp = tmp.replaceAll("9308000", "가족증명");
                tmp = tmp.replaceAll("9308001", "가족관계증명서");
                tmp = tmp.replaceAll("9308002", "8");
                tmp = tmp.replaceAll("9309000", "해외거주");
                tmp = tmp.replaceAll("9309001", "부모 해외거주확인서");
                tmp = tmp.replaceAll("9309002", "9");
                tmp = tmp.replaceAll("9310000", "코로나검사");
                tmp = tmp.replaceAll("9310001", "코로나 검사결과지");
                tmp = tmp.replaceAll("9310002", "10");
                tmp = tmp.replaceAll("9311000", "예방접종증명서");
                tmp = tmp.replaceAll("9311001", "코로나 예방접종증명서");
                tmp = tmp.replaceAll("9311002", "11");
                tmp = tmp.replaceAll("9400000", "입사서류심사");
                tmp = tmp.replaceAll("9401000", "제출");
                tmp = tmp.replaceAll("9402000", "반려");
                tmp = tmp.replaceAll("9403000", "적합");
                tmp = tmp.replaceAll("9404000", "부적합");
                return tmp;
            }
            return "error_id : getStrTranslated";
        }

        public static void reassembleContentsAsTableAndPrint(String CONTENT, String row_deliminator, String CELL_DELIMINATOR) {
            //CONTENTS 분해 , rows 조립,  rows_ 조립
            String tmp = CONTENT;
            String[] rows = tmp.split(row_deliminator);
            ArrayList<String[]> rows_ = new ArrayList<>();
            for (int i = 0; i <= rows.length - 1; i++) {
                rows_.add(rows[i].split(CELL_DELIMINATOR));
            }


            //모든 rows_ 의 수를 rowCount 에 저장
            int row_EA = rows_.size();


            //한글처리 문제를 이걸로는 해결이 어려운지 실험....해보니... 그냥 조금쓸만한데..엄한데 도움이...되는 기능을 만들었습니다.
            int maxDegitStrLimit = 10;
            String regex = "[\uAC00-\uD7A3]";
            for (int i = 0; i <= rows_.size() - 1; i++) {
                for (int j = 0; j <= rows_.get(i).length - 1; j++) {
                    if (maxDegitStrLimit < rows_.get(i)[j].length()) {
//                        rows_.get(i)[j] = rows_.get(i)[j].substring(0,maxDegitStrLimit)+"...";
//                        rows_.get(i)[j] = rows_.get(i)[j].replaceAll(regex,"?");
                        rows_.get(i)[j] = rows_.get(i)[j].toUpperCase();
//                        rows_.get(i)[j] = rows_.get(i)[j].toLowerCase();
//                        rows_.get(i)[j] = rows_.get(i)[j].replaceAll("학", "hag_" + nbsp);// 이걸로 한글 폭 처리 해보자.. ... 이것도 가독성은 나쁜데... 가독성 좋으라고 하는 건데... 예초에 translate 를 영문화로 해서 하면 문제 없을텐데 그렇게 할까?
//                        rows_.get(i)[j] = rows_.get(i)[j].replaceAll("기", "gi" + nbsp);
                    }
                }
            }


            //첫번째 row 를 세로로 출력
//            for(int i =0; i<=rows_.get(0).length-1; i++)
//                out.println(rows_.get(0)[i].toString());


            //첫번재 row 의 value 의 수를 출력
//            out.println(rows_.get(0).length);


//            두번재 row 의 value 의 수를 출력
//            out.println(rows_.get(1).length);


            //모든 cell 의 개수를 cellCount 에 저장
            int cell_EA = 0;
            for (int i = 0; i <= rows_.size() - 1; i++) {
                for (int j = 0; j <= rows_.get(i).length - 1; j++) {
                    cell_EA++;
                }
            }


            //가장 긴 값 을 longestCellLength 에 저장
            int longestCellLength;
            ArrayList<String> tmp1000 = new ArrayList<>(cell_EA);
            for (int i = 0; i <= rows_.size() - 1; i++) {
                for (int j = 0; j <= rows_.get(i).length - 1; j++) {
                    tmp1000.add(Integer.toString(rows_.get(i)[j].length()));
                }
            }
            String[] tmp1000_ = TextMgr.convertToStrList(tmp1000);
//

            Arrays.sort(tmp1000_);//이건 문자의 오름차순 내림차순 정렬이지...숫자의 크기별 정렬이 아니다... 그래도 가독성 도움은 되네..
            //String [] 인 tmp1000_ 내부 확인
//            for(int i = 0; i<=tmp1000_.length-1; i++ )
//                out.println(tmp1000_[i]);
            ArrayList<Integer> tmp1001 = new ArrayList<>(cell_EA);
            for (int i = 0; i <= rows_.size() - 1; i++) {
                for (int j = 0; j <= rows_.get(i).length - 1; j++) {
                    tmp1001.add(rows_.get(i)[j].length());
                }
            }
            List<Integer> numbers = tmp1001;
            longestCellLength = numbers.stream().max(Integer::compare).orElse(-1);


            //각 줄의 개수를 변수 에 저장
            int[] EachRowCellCount = new int[row_EA];
            for (int i = 0; i <= row_EA - 1; i++) {
                EachRowCellCount[i] = rows_.get(i).length;
            }
            Arrays.sort(EachRowCellCount);
            int firstRowCell_EA = EachRowCellCount[0];
            int SecondRowCell_EA = EachRowCellCount[1];
            int LongestRowCell_EA = EachRowCellCount[row_EA - 1];


            //TableRowDivider 출력
            TextMgr.printTableRowDividerAsAppling_2EA_args(LongestRowCell_EA, longestCellLength);


            //첫번째 줄만 출력
            TextMgr.printTableRowAsApplingUnderBar_EA(rows_.get(0), longestCellLength);


            //TableRowDivider 출력
            TextMgr.printTableRowDividerAsAppling_2EA_args(LongestRowCell_EA, longestCellLength);


            //두번재 줄만 출력
//            TextMgr.printTableRowAsApplingUnderBar_EA(rows_.get(1), longestCellLength);


            //두번째 줄부터 마지막줄까지 출력
            for (int i = 1; i <= row_EA - 1; i++) {
                TextMgr.printTableRowAsApplingUnderBar_EA(rows_.get(i), longestCellLength);
            }


            //TableRowDivider 출력
            TextMgr.printTableRowDividerAsAppling_2EA_args(LongestRowCell_EA, longestCellLength);


            //TABLE SUMMARY 출력
//            LineMgr.drawLine(CODE.MODE_BRACKET,"TABLE SUMMARY","83");
            out.print("ROW_EA");
            out.print(nbsp);
            out.print(row_EA);
            out.println();
            out.print("CELL_EA");
            out.print(nbsp);
            out.print(cell_EA);
            out.println();
            out.print("LONGEST_ROW_CELL_EA");
            out.print(nbsp);
            out.print(LongestRowCell_EA);
            out.println();
            out.print("LONGEST_CELL_LENGTH");
            out.print(nbsp);
            out.print(longestCellLength);
            out.println();
        }

        public static String[] convertToStrList(ArrayList<String> ArraylistGenericStr) {
            String[] strList = ArraylistGenericStr.toArray(new String[0]);
            return strList;
        }

        public static ArrayList<String> convertToArrayListGenericStr(String[] strList) {
            ArrayList<String> row = new ArrayList<>();
            for (int i = 0; i < strList.length; i++)
                row.add(strList[i]);
            return row;
        }


        public static void printTableRowAsApplingUnderBar_EA(String[] STR_ARRY, int UNDERBAR_EA) {
            for (int i = 0; i <= STR_ARRY.length - 1; i++) {
                System.out.print(STR_ARRY[i]);
                for (int j = 1; j <= UNDERBAR_EA + 1 - STR_ARRY[i].length(); j++) {
                    System.out.print(" ");
                }
            }
            System.out.println();
        }

        public static void printTableRowDividerAsAppling_2EA_args(int GROUP_EA, int UNDERBAR_EA) {
            for (int i = 0; i < GROUP_EA; i++) {
                for (int j = 0; j < UNDERBAR_EA; j++) {
                    System.out.print("_");
                }
                System.out.print(" ");
            }
            System.out.println();
        }


        public static String addPrefixToAllLine(String prefix, String context) {
            String[] tmp = context.split("\n");
            StringBuffer tmp2 = new StringBuffer();
            for (int i = 0; i <= tmp.length - 1; i++) {
                tmp2.append(prefix + tmp[i] + "\n");
            }
            return tmp2.toString();
        }

        public static String addSuffixToAllLine(String suffix, String context) {
            String[] tmp = context.split("\n");
            StringBuffer tmp2 = new StringBuffer();
            for (int i = 0; i <= tmp.length - 1; i++) {
                tmp2.append(tmp[i] + suffix + "\n");
            }
            return tmp2.toString();
        }

        public static void drawLine(String MODE_BRACKET, String TEXT_TO_EXPRESS, String EA) {

            if (MODE_BRACKET == CODE.MODE_DEFAULT) {
                //    EA는 버리도록,  숫자만 RESULT_EA 에 저장 하도록
                String tmp3 = EA;
                tmp3 = tmp3.replaceAll("EA", "");
                tmp3 = tmp3.replaceAll("ea", "").trim();
                int RESULT_EA = Integer.parseInt(tmp3);

                // RESULT_EA 만큼 "_"를 출력 하도록
                for (int i = 1; i <= RESULT_EA; i++) {
                    out.print("_");
                }
                out.print(" ");
                out.print(" ");

                // STR_TO_EXPRESS 를 출력 하도록
                String tmp = TEXT_TO_EXPRESS;
                tmp = tmp.replaceAll("_", " ").trim();
                String RESULT_STR_TO_EXPRESS = tmp.toUpperCase().trim();
                out.print(RESULT_STR_TO_EXPRESS);
                out.println();
            }
            if (MODE_BRACKET == CODE.MODE_BRACKET) {
                //    EA는 버리도록,  숫자만 RESULT_EA 에 저장 하도록
                String tmp3 = EA;
                tmp3 = tmp3.replaceAll("EA", "");
                tmp3 = tmp3.replaceAll("ea", "").trim();
                int RESULT_EA = Integer.parseInt(tmp3);

                // RESULT_EA 만큼 "_"를 출력 하도록
                for (int i = 1; i <= RESULT_EA; i++) {
                    out.print("_");
                }
                out.print(" ");
                out.print(" ");

                // bracket("<>")을 붙여서 STR_TO_EXPRESS 를 출력 하도록
                String tmp = TEXT_TO_EXPRESS;
                tmp = tmp.replaceAll("_", " ").trim();
                tmp = "<  " + tmp + "  >";
                String RESULT_STR_TO_EXPRESS = tmp.toUpperCase().trim();
                out.print(RESULT_STR_TO_EXPRESS);
                out.println();
            }
        }

        public static void drawPoliceLine(String REPEATER, String S_or_E) {
            //    EA는 버리도록,  숫자만 RESULT_EA 에 저장 하도록
            StringBuffer tmp2 = new StringBuffer();
            String EA = "99EA";


            // RESULT_EA 만큼 WORD를 tmp2 에 집어 넣도록
            String REPEATER_propered = REPEATER.substring(0, 1).toUpperCase() + REPEATER.substring(1).toLowerCase();
            for (int i = 0; i <= Integer.parseInt(EA.replaceAll("EA", "")) - 1; i++) {
                tmp2.append(REPEATER_propered);
                tmp2.append(nbsp);
            }
            StringBuffer tmp3 = new StringBuffer();
            tmp3.append(tmp2.substring(0, 99));
            tmp3.append("_");
            if (S_or_E.toUpperCase().equals("S")) {
                tmp3.append("s");
            }
            if (S_or_E.toUpperCase().equals("E")) {
                tmp3.append("e");
            }
            out.println();
            out.println();
            for (int i = 0; i <= Integer.parseInt(EA.replaceAll("EA", "")) + 1; i++) {
                out.print(">");
            }
            out.println();
            out.println(tmp3.toString());
            for (int i = 0; i <= Integer.parseInt(EA.replaceAll("EA", "")) + 1; i++) {
                out.print(">");
            }
            out.println();
            out.println();
        }

        public static void drawPoliceLine(String REPEATER) {
            //    EA는 버리도록,  숫자만 RESULT_EA 에 저장 하도록
            StringBuffer tmp2 = new StringBuffer();
            String EA = "99EA";


            // RESULT_EA 만큼 WORD를 tmp2 에 집어 넣도록
//            String REPEATER_propered = REPEATER.substring(0, 1).toUpperCase() + REPEATER.substring(1).toUpperCase();
            String REPEATER_propered = REPEATER.substring(0, 1).toLowerCase() + REPEATER.substring(1).toLowerCase();
            for (int i = 0; i <= Integer.parseInt(EA.replaceAll("EA", "")) - 1; i++) {
                tmp2.append(REPEATER_propered);
                tmp2.append(nbsp);
            }
            StringBuffer tmp3 = new StringBuffer();
            tmp3.append(tmp2.substring(0, 99));
            tmp3.append("_");

            out.println();
            out.println();
            for (int i = 0; i <= Integer.parseInt(EA.replaceAll("EA", "")) + 1; i++) {
                out.print(">");
            }
            out.println();
            out.println(tmp3.toString());
            for (int i = 0; i <= Integer.parseInt(EA.replaceAll("EA", "")) + 1; i++) {
                out.print(">");
            }
            out.println();
            out.println();
        }

        public static void drawLineWithoutTextAndPause(String EA) {

            //    EA는 버리도록,  숫자만 RESULT_EA 에 저장 하도록
            String tmp3 = EA;
            tmp3 = tmp3.replaceAll("EA", "");
            tmp3 = tmp3.replaceAll("ea", "").trim();
            int RESULT_EA = Integer.parseInt(tmp3);

            // RESULT_EA 만큼 "_"를 출력 하도록
            for (int i = 1; i <= RESULT_EA; i++) {
                out.print("_");
            }
            out.print(" ");
            out.print(" ");


            SenarioMgr.getConsoleTyping("");//아무키입력받기
        }

        public static String align(String TEXT, String REG_DELIMITER, String EA) {
            int custom = Integer.parseInt(EA); // 마음대로 바꿔보세요
            String tmp88 = TextMgr.addSuffixToAllLine("\n", TEXT);
            String tmp77 = TextMgr.addSuffixToLastLine(nbsp, tmp88);
            String tmp999999 = TextMgr.trimAllLine(tmp77);
            String tmp999 = tmp999999.replaceAll("\n\n", "\n");
            String tmp9999 = tmp999.replaceAll("\n", " \n");
            String tmp66 = tmp9999.replaceAll("\t", nbsp);
            String tmp55 = tmp66.replaceAll("", "");
            String tmp_reg = "";
            tmp_reg = new StringBuilder().append("").append(REG_DELIMITER).toString();
            if (REG_DELIMITER.contains(")")) {
                tmp_reg = tmp_reg.replaceAll("\\)", "\\\\)");
            }
            if (REG_DELIMITER.contains("(")) {
                tmp_reg = tmp_reg.replaceAll("\\(", "\\\\(");
            }
            //biggestLengthOfFirstColumn 에 저장
            String[] tmp44 = tmp55.split(tmp_reg);
            String[] tmp4 = tmp55.split("\n");
            ArrayList<String[]> tmp = new ArrayList<>();
            for (int i = 0; i <= tmp4.length - 1; i++) {
                tmp.add((tmp4[i].split(tmp_reg)));
            }
            int tmp99 = tmp.get(0)[0].toString().length();
            for (int i = 0; i <= tmp.size() - 1; i++) {
                tmp99 = Math.max(tmp99, tmp.get(i)[0].toString().length());
            }
            int biggestLengthOfFirstColumn = tmp99;


            //row1
            StringBuffer tmp2 = new StringBuffer();
            for (int j = 0; j <= tmp.size() - 1; j++) {
                tmp2.append(tmp.get(j)[0].trim());
                for (int i = 0; i <= biggestLengthOfFirstColumn - tmp.get(j)[0].toString().trim().length() - 1; i++) {
                    tmp2.append(nbsp);
                }
                for (int i = 0; i <= custom; i++) {
                    tmp2.append(nbsp);
                }
                tmp2.append(REG_DELIMITER);
                for (int i = 0; i <= custom; i++) {
                    tmp2.append(nbsp);

                }
                try {
                    tmp2.append(tmp.get(j)[1].trim());
                } catch (Exception e) {
                    out.println("DELIMITER 를 기준으로 우변에 반드시 nbsp 라도 있어야 이 align() 메소드는 정상 작동합니다.");
                    throw new RuntimeException(e);
                }
                tmp2.append("\n");

            }

//            TextMgr.drawPoliceLine("s","s");
//            out.println(biggestLengthOfFirstColumn);
//            out.print(tmp.get(tmp.size()-3)[0]);
//            out.println(tmp.get(tmp.size()-3)[1]);
//            TextMgr.drawPoliceLine("e","e");

            return tmp2.toString();
        }


        public static String trimAllLine(String context) {
            String[] tmp = context.split("\n");
            StringBuffer tmp2 = new StringBuffer();
            for (int i = 0; i <= tmp.length - 1; i++) {
                tmp2.append(tmp[i].trim() + "\n");
            }
            return tmp2.toString();
        }

        public static String addSuffixToLastLine(String suffix, String context) {
            String[] tmp = context.split("\n");
            StringBuffer tmp2 = new StringBuffer();
            for (int i = 0; i <= tmp.length - 1; i++) {
                if (!(i == tmp.length - 1)) {
                    tmp2.append(tmp[i] + suffix + "\n");
                }
                if ((i == tmp.length - 1)) {
                    tmp2.append(tmp[i] + suffix + "\n\n");
                }
            }
            return tmp2.toString();
        }


        public static void drawIdStamp(String id) {
            out.println((id + nbsp + ScheduleMgr.sdf_yyyy_MM_dd_HH_mm_ss.format(new Date())).replaceAll(" ", "_"));
        }

    }

    private static class TableMgr {
        private static final int DOT_REFERENCE_VALUE = 10; // 이거  LineMgr.divideValue 따라가자.
        private static int DOT_EA = 0;
        static String COMPENSAIING_WAY;
        static String HEADCASEMODE;
        static String BODYCASEMODE;
        static String DIVIDERMODE;
        static String InstanceName;
        static ArrayList<String> joined = new ArrayList<>();
        static String[] joined_;
        static ArrayList<String[]> rows = new ArrayList<>();
        static ArrayList<Integer> row_value_count = new ArrayList<>();
        private static String colCountAmongTB;
        private static int lineAlignCompensatingValue;
        private static String[] tmp;

        public void SETMODE(String HEADCASEMODE, String BODYCASEMODE, String DIVIDERMODE, String COMPENSAIING_WAY) {
            TableMgr.HEADCASEMODE = HEADCASEMODE;
            TableMgr.BODYCASEMODE = BODYCASEMODE;
            TableMgr.DIVIDERMODE = DIVIDERMODE;
            TableMgr.COMPENSAIING_WAY = COMPENSAIING_WAY;
        }

        public void BUILD() {
            //COMPENSAIING_WAY 가 DEFAULT가 아닌 경우에만 적용 하도록
            if (!TableMgr.COMPENSAIING_WAY.equals(CODE.WAY_DEFAULT)) {
                TableMgr.setTableAlignCompensatingValue();
            }
            TableMgr.setColCountAmongTB();
            TableMgr.printTB();
        }

        public void SETROWS(String[] rows) {
            for (int i = 0; i <= rows.length - 1; i++) {
                TableMgr.ROW(rows[i].split("\t"));
            }
        }

        public static void ROW(String[] row) {
            common(row);
        }

        static void common(String[] strArray) {
            // TB의 COMPENSAIING_WAY 가 DEFAULT 라면
            if (TableMgr.COMPENSAIING_WAY == CODE.WAY_DEFAULT) {

                //String[]인 strArray 의 값을 ArrayList<String>인 row 로 저장 하도록
                ArrayList<String> row = new ArrayList<>();
                for (int i = 0; i <= strArray.length - 1; i++) {
                    row.add(strArray[i]);
                }
                joined.addAll(row);
                TableMgr.joined_ = joined.toArray(new String[0]);
                rows.add(strArray);
            }
            // TB의 COMPENSAIING_WAY 가 WAY_COMPENSAIING_DEFAULT 라면 한국어가 ?로 대체되어 일종의 필터처럼 적용 하도록
            if (TableMgr.COMPENSAIING_WAY == CODE.WAY_QUESTIONMARK) {
                //모든 table의 값을 한글만 ? 로 문자열을 교환하여 replacedList 에 저장 하도록
                String[] replacedList = new String[strArray.length];
                String regex = "[\uAC00-\uD7A3]";
                for (int i = 0; i <= replacedList.length - 1; i++) {
                    replacedList[i] = strArray[i].replaceAll(regex, "?");
                }
                //String[]인 strArray 의 값을 ArrayList<String>인 row 로 저장 하도록
                ArrayList<String> row = new ArrayList<>();
                for (int i = 0; i <= replacedList.length - 1; i++) {
                    row.add(replacedList[i]);
                }
                joined.addAll(row);
                TableMgr.joined_ = joined.toArray(new String[0]);
                rows.add(replacedList);
            }
            // TB의 COMPENSAIING_WAY 가 WAY_COMPENSAIING_KOR_TO_QUESTIONMARK 라면 compensator value 가 적용 하도록
            if (TableMgr.COMPENSAIING_WAY == CODE.WAY_COMPENSATING_VALUE) {
                //String[]인 strArray 의 값을 ArrayList<String>인 row 로 저장 하도록
                ArrayList<String> row = new ArrayList<>();
                for (int i = 0; i <= strArray.length - 1; i++) {
                    row.add(strArray[i]);
                }
                joined.addAll(row);
                TableMgr.joined_ = joined.toArray(new String[0]);
                rows.add(strArray);
            }
            // TableMgr 의 COMPENSAIING_WAY 가 WAY_COMPENSATING_DOT_DOT_DOT 라면
            if (TableMgr.COMPENSAIING_WAY == CODE.WAY_DOT) {
                //String[]인 strArray 의 값을 ArrayList<String>인 row 로 저장 하도록
                ArrayList<String> row = new ArrayList<>();
                TableMgr.tmp = new String[strArray.length];
                StringBuffer dotStr = new StringBuffer();
                //"."(dotStr)의 개수를 여기서 설정을  하도록
                TableMgr.DOT_EA = 5;
                for (int i = 0; i <= TableMgr.DOT_EA; i++) {
                    dotStr.append(".");
                }
                for (int i = 0; i <= strArray.length - 1; i++) {
                    if (strArray[i].length() <= TableMgr.DOT_REFERENCE_VALUE) {
                        row.add(strArray[i]);
                        tmp[i] = strArray[i];
                    } else {
                        row.add(strArray[i].substring(0, TableMgr.DOT_REFERENCE_VALUE) + dotStr.toString());
                        tmp[i] = strArray[i].substring(0, TableMgr.DOT_REFERENCE_VALUE) + dotStr.toString();
                    }
                }
                joined.addAll(row);
                TableMgr.joined_ = joined.toArray(new String[0]);
                rows.add(tmp);
            }

            //이거 if 문 밖으로 삐져 나와 있었느데.... 아 이것 옮겨가며 다시 테스트 필요합니다.
            row_value_count.add(strArray.length);


        }

        public static void printTblPatternRow(String[] strArry, int underbarEA) {
            for (int i = 0; i <= strArry.length - 1; i++) {
                System.out.print(strArry[i]);
                for (int j = 1; j <= underbarEA + 1 - strArry[i].length(); j++) {
                    System.out.print(" ");
                }
            }
            System.out.println();
        }

        public static void printTblPatternBody(String[] strArry, int LongestTextAmongTB) {
            for (int i = 0; i <= strArry.length - 1; i++) {
                System.out.print(strArry[i]);
                for (int j = 1; j <= LongestTextAmongTB + 1 - strArry[i].length(); j++) {
                    System.out.print(" ");
                }
            }
            System.out.println();
        }

        public static void printTblPatternDivider(int groupEA, int underbarEA) {
            for (int i = 0; i < groupEA; i++) {
                for (int j = 0; j < underbarEA; j++) {
                    System.out.print("_");
                }
                System.out.print(" ");
            }
            System.out.println();
        }

        public static int getLongestIndexOfTB(String[] strArry) {
            ArrayList<Integer> arrayList = new ArrayList<>();
            for (int i = 0; i <= strArry.length - 1; i++) {
                arrayList.add(strArry[i].length());
            }
            int[] intArry = arrayList.stream()
                    .mapToInt(Integer::intValue)
                    .toArray();
            Arrays.sort(intArry);

            String proc = Arrays.stream(intArry).max().toString()
                    .replace("OptionalInt[", "")
                    .replace("]", "");

            int LongestIndex = Integer.parseInt(proc);

            return LongestIndex;
        }

        public static void PRINT_TB_SUMMARIZED() {
            TextMgr.drawLine(CODE.MODE_BRACKET, "____________________________________________________ .SUMMARIZED", "99EA");
            out.print("ROW COUNT : ");
            out.println(TableMgr.rows.size() - 1);
            String console_msg = "EACH ROW COUNT : ";
            out.println(console_msg);
            for (int i = 0; i <= 3 + 9 - 1; i++) {
                out.print(" ");
            }
            out.print("(row no) ");
            for (int i = 1; i <= TableMgr.rows.size() - 1; i++) {
                out.print(i);
                out.print(" ");
            }
            System.out.println("");
            for (int i = 0; i <= 3 - 1; i++) {
                out.print(" ");
            }
            out.print("(row value count) ");
            for (int i = 1; i <= TableMgr.rows.size() - 1; i++) {
                out.print(TableMgr.rows.get(i).length);
                out.print(" ");
            }
            out.println();
        }

        public static class Builder {

            public Builder(String InstanceName) {
                TableMgr.InstanceName = InstanceName;
            }

            public Builder setMode() {
                TableMgr.HEADCASEMODE = CODE.HEAD_CASE_DEFAULT;
                TableMgr.BODYCASEMODE = CODE.BODY_CASE_DEFAULT;
                TableMgr.DIVIDERMODE = CODE.DIVIDER_DEFAULT;
                TableMgr.COMPENSAIING_WAY = CODE.WAY_DEFAULT;
                return this;
            }

            public Builder setMode(String HEADCASEMODE, String BODYCASEMODE, String DIVIDERMODE, String COMPENSAIING_WAY) {
                TableMgr.HEADCASEMODE = HEADCASEMODE;
                TableMgr.BODYCASEMODE = BODYCASEMODE;
                TableMgr.DIVIDERMODE = DIVIDERMODE;
                TableMgr.COMPENSAIING_WAY = COMPENSAIING_WAY;
                return this;
            }

            public void SET_MODE(String HEADCASEMODE, String BODYCASEMODE, String DIVIDERMODE, String COMPENSAIING_WAY) {
                TableMgr.HEADCASEMODE = HEADCASEMODE;
                TableMgr.BODYCASEMODE = BODYCASEMODE;
                TableMgr.DIVIDERMODE = DIVIDERMODE;
                TableMgr.COMPENSAIING_WAY = COMPENSAIING_WAY;
            }

            public Builder row(String[] row) {
                common(row);
                return this;
            }

            public void ROW(String[] row) {
                common(row);
            }

            public Builder key_value(String[] key_value) {
                common(key_value);
                return this;
            }

            void common(String[] strArray) {
                // TB의 COMPENSAIING_WAY 가 DEFAULT 라면
                if (TableMgr.COMPENSAIING_WAY == CODE.WAY_DEFAULT) {

                    //String[]인 strArray 의 값을 ArrayList<String>인 row 로 저장 하도록
                    ArrayList<String> row = new ArrayList<>();
                    for (int i = 0; i <= strArray.length - 1; i++) {
                        row.add(strArray[i]);
                    }
                    joined.addAll(row);
                    TableMgr.joined_ = joined.toArray(new String[0]);
                    rows.add(strArray);
                }
                // TB의 COMPENSAIING_WAY 가 WAY_COMPENSAIING_DEFAULT 라면 한국어가 ?로 대체되어 일종의 필터처럼 적용 하도록
                if (TableMgr.COMPENSAIING_WAY == CODE.WAY_QUESTIONMARK) {
                    //모든 table의 값을 한글만 ? 로 문자열을 교환하여 replacedList 에 저장 하도록
                    String[] replacedList = new String[strArray.length];
                    String regex = "[\uAC00-\uD7A3]";
                    for (int i = 0; i <= replacedList.length - 1; i++) {
                        replacedList[i] = strArray[i].replaceAll(regex, "?");
                    }
                    //String[]인 strArray 의 값을 ArrayList<String>인 row 로 저장 하도록
                    ArrayList<String> row = new ArrayList<>();
                    for (int i = 0; i <= replacedList.length - 1; i++) {
                        row.add(replacedList[i]);
                    }
                    joined.addAll(row);
                    TableMgr.joined_ = joined.toArray(new String[0]);
                    rows.add(replacedList);
                }
                // TB의 COMPENSAIING_WAY 가 WAY_COMPENSAIING_KOR_TO_QUESTIONMARK 라면 compensator value 가 적용 하도록
                if (TableMgr.COMPENSAIING_WAY == CODE.WAY_COMPENSATING_VALUE) {
                    //String[]인 strArray 의 값을 ArrayList<String>인 row 로 저장 하도록
                    ArrayList<String> row = new ArrayList<>();
                    for (int i = 0; i <= strArray.length - 1; i++) {
                        row.add(strArray[i]);
                    }
                    joined.addAll(row);
                    TableMgr.joined_ = joined.toArray(new String[0]);
                    rows.add(strArray);
                }
                // TableMgr 의 COMPENSAIING_WAY 가 WAY_COMPENSATING_DOT_DOT_DOT 라면
                if (TableMgr.COMPENSAIING_WAY == CODE.WAY_DOT) {
                    //String[]인 strArray 의 값을 ArrayList<String>인 row 로 저장 하도록
                    ArrayList<String> row = new ArrayList<>();
                    TableMgr.tmp = new String[strArray.length];
                    StringBuffer dotStr = new StringBuffer();
                    //"."(dotStr)의 개수를 여기서 설정을  하도록
                    TableMgr.DOT_EA = 5;
                    for (int i = 0; i <= TableMgr.DOT_EA; i++) {
                        dotStr.append(".");
                    }
                    for (int i = 0; i <= strArray.length - 1; i++) {
                        if (strArray[i].length() <= TableMgr.DOT_REFERENCE_VALUE) {
                            row.add(strArray[i]);
                            tmp[i] = strArray[i];
                        } else {
                            row.add(strArray[i].substring(0, TableMgr.DOT_REFERENCE_VALUE) + dotStr.toString());
                            tmp[i] = strArray[i].substring(0, TableMgr.DOT_REFERENCE_VALUE) + dotStr.toString();
                        }
                    }
                    joined.addAll(row);
                    TableMgr.joined_ = joined.toArray(new String[0]);
                    rows.add(tmp);
                }

                //이거 if 문 밖으로 삐져 나와 있었느데.... 아 이것 옮겨가며 다시 테스트 필요합니다.
                row_value_count.add(strArray.length);


            }

            public TableMgr build() {
                //COMPENSAIING_WAY 가 DEFAULT가 아닌 경우에만 적용 하도록
                if (!TableMgr.COMPENSAIING_WAY.equals(CODE.WAY_DEFAULT)) {
//                    out.println(1);
                    TableMgr.setTableAlignCompensatingValue();
                }

                TableMgr.setColCountAmongTB();
                TableMgr.printTB();
                return new TableMgr();
            }


        }


        private static void setTableAlignCompensatingValue() {
            //가장 큰 값을 BiggestValue에 저장 하도록
            int[] temp = new int[TableMgr.joined_.length - 1];
            for (int i = 0; i <= temp.length - 1; i++) {
                temp[i] = joined_[i].length();
            }
            Arrays.sort(temp);


//            for(int i : temp )
//                out.println(i);
//            out.println(temp[temp.length - 1]);


            int BiggestValue = temp[temp.length - 1];
//            out.println("BiggestValue "+BiggestValue);


            //가장 큰 값의 인데스번호를 BiggestIndex 에 저장 하도록
            String[] temp___ = joined_.clone();
            int[] temp__ = new int[joined_.length - 1];
            for (int i = 0; i <= temp__.length - 1; i++) {
                temp__[i] = temp___[i].length();
//                out.println(temp__[i]);
            }
            int i = 0;
            int BiggestIndex = 0;
            while (temp__[i] != BiggestValue) {
                BiggestIndex = i;
                ++i;
            }
//            out.println(BiggestIndex);

//
            //위에서 저장한 BiggestValue 와 BiggestIndex 를 이용하여 가장 큰 텍스트를 longestStr 에 저장 하도록
            String[] temp____ = joined_.clone();
            String longestStr = temp____[BiggestIndex];
//            out.println(longestStr);
            if (TableMgr.COMPENSAIING_WAY == CODE.WAY_COMPENSATING_VALUE) {

                StringBuffer tmp = new StringBuffer();

                for (String s : joined_)
                    tmp.append(s);

                String regex = "[^\uAC00-\uD7A3]";

                String replacedTmpStr = tmp.toString().replaceAll(regex, "");

                TableMgr.lineAlignCompensatingValue = replacedTmpStr.length() * 1;
//            out.println(replacedLongestStr.length());
            }


        }


        private static void setColCountAmongTB() {

            //colCountAmongTB를 구하여 LongestTextLengthAmongTB에 저장 하도록
            String[] colCountList = new String[row_value_count.size()];
//            ArrayList<String> tempArrayListStr= new ArrayList<>();
            for (int i = 0; i <= row_value_count.size() - 1; i++) {
//                out.println(row_value_count.get(i));
                colCountList[i] = String.valueOf(row_value_count.get(i));
//                tempArrayListStr.add(Integer.toString(row_value_count.get(i)));
            }
            Arrays.sort(colCountList);

//            for (String s : tempStr)
//                out.println(s);

//            out.println(tempStr[tempStr.length-1]);
//            out.println(colCountList[colCountList.length-1]);
//            LongestTextLengthAmongTB=Strlist[Strlist.length-1]+10;


            colCountAmongTB = colCountList[colCountList.length - 1];

        }

        public void close() {
//            TableMgr.
//            for (int i = 0; i <= tempArrayListStr.size() - 1; i++) {
//                tempArrayListStr.get(0)
//            }
//            for (int i = 0; i <= tempStr.length - 2; i++) {
//                out.println(tempStr[i].toString());
//            }

            //rows 에 대하여 출력 하도록
//            for (int i = 0; i <= rows.size() - 1; i++) {
            //첫줄
//                for (int j = 0; j <= rows.get(i).length - 1; j++) {
//                out.println(rows.get(i));
//                out.println(rows.get(i)[j]);
//                out.println(rows.get(i).toString());
//                out.println(rows.get(i).length());

//                }
//            }

            //하나의 컬럼으로서 모든값 출력 하도록
//            for (int i = 0; i <= joined_.length - 1; i++) {
//                out.println(joined_[i]);
//            }


//            for (int i = 0; i <= temp_.length - 1; i++) {
//                out.println(temp_[i]);
//                out.println(temp_[i].toString());
//                out.println(temp_[i].length());
//            }


//          //row_value_count 에 대하여 출력 하도록
//            for (int i = 0; i <= row_value_count.size() - 1; i++) {
//                out.println(row_value_count.get(i)[i].length());
//            }
//            out.println(Util.getLongestIndexOf(joined_));
//            out.println(joined.size());
//            Util.getLongestIndexOf(joined_);
//            Util.getLongestIndexOf(TableMgr.rows.toArray(new String[0]));
//            out.println(joined.get(0).length());
//            out.println(joined.get(1).length());
//            out.println(joined_.length);
            // table all in one here
//            out.println(joined.toString());


            joined = new ArrayList<>();
            rows = new ArrayList<>();
            InstanceName = "";
        }


        public static void printTB() {
            //factorizedCommonIntVariable
            int longestedIndexOfjoinedStringList = TableMgr.getLongestIndexOfTB(joined_) + TableMgr.lineAlignCompensatingValue + TableMgr.DOT_EA;
            if (TableMgr.HEADCASEMODE == CODE.BODY_CASE_DEFAULT) {
                // HEADCASEMODE가 default 일때  rows.get(0)이 upper case로  되도록
                String[] low_uppered = Arrays.stream(rows.get(0)).map(String::toUpperCase).collect(Collectors.toList()).toArray(new String[0]);
                printTblPatternRow(low_uppered, longestedIndexOfjoinedStringList);
            }
            if (TableMgr.HEADCASEMODE == CODE.BODY_CASE_UPPER) {
                // rows.get(0)이 upper case로  되도록
                String[] low_uppered = Arrays.stream(rows.get(0)).map(String::toUpperCase).collect(Collectors.toList()).toArray(new String[0]);
                printTblPatternRow(low_uppered, longestedIndexOfjoinedStringList);
            }
            if (TableMgr.HEADCASEMODE == CODE.HEAD_CASE_LOWER) {
                // rows.get(0)이 lower case로  되도록
                String[] low_uppered = Arrays.stream(rows.get(0)).map(String::toLowerCase).collect(Collectors.toList()).toArray(new String[0]);
                printTblPatternRow(low_uppered, longestedIndexOfjoinedStringList);
            }
            if (DIVIDERMODE.equals(CODE.DIVIDER_DEFAULT)) {
                //TB의 DIVIDER를 출력 하도록
                printTblPatternDivider(Integer.parseInt(colCountAmongTB), longestedIndexOfjoinedStringList);

            }

            if (DIVIDERMODE.equals(CODE.DIVIDER_Y)) {
                //TB의 DIVIDER를 출력 하도록
                printTblPatternDivider(Integer.parseInt(colCountAmongTB), longestedIndexOfjoinedStringList);
            }
            if (DIVIDERMODE.equals(CODE.DIVIDER_N)) {
                //TB의 DIVIDER를 출력하지 않도록
            }
//            TableMgr 을 참조한 인스턴스 의 BODY를 출력 하도록
            for (int i = 1; i <= rows.size() - 1; i++) {
                if (rows.get(i) != null) {
                    if (BODYCASEMODE.equals(CODE.BODY_CASE_UPPER)) {
                        String[] low_lowered = Arrays.stream(rows.get(i)).map(String::toUpperCase).collect(Collectors.toList()).toArray(new String[0]);
                        printTblPatternRow(low_lowered, longestedIndexOfjoinedStringList);
                    }
                    if (BODYCASEMODE.equals(CODE.HEAD_CASE_LOWER)) {
                        String[] low_lowered = Arrays.stream(rows.get(i)).map(String::toLowerCase).collect(Collectors.toList()).toArray(new String[0]);
                        printTblPatternRow(low_lowered, longestedIndexOfjoinedStringList);
                    }
                    //DEFAULT라면 main에서 입력된 string을 그대로 출력 하도록
                    if (BODYCASEMODE.equals(CODE.BODY_CASE_DEFAULT))
                        printTblPatternBody(rows.get(i), longestedIndexOfjoinedStringList);
                }
            }
        }


    }

    private static class TimerMgr {
        private static Date start_date;
        private static Date end_date;
        private static int elapsed_time;
        private static long startTime;
        private static long endTime;
        private static long duration;

        public static void Measuring_start() {
            TextMgr.drawLine(CODE.MODE_BRACKET, "TimeMgr.Measuring_start()", "99EA");
            TimerMgr.start_date = new Date();// 해당코드는 약 002ms 가 걸리는데 나는데 이것도 줄이고자 한다면 주석을 하도록
            TimerMgr.startTime = System.currentTimeMillis();
        }

        public static void Measuring_end() {
            TimerMgr.endTime = System.currentTimeMillis();
            TimerMgr.end_date = new Date();// 해당코드는 약 002ms 가 걸리는데 나는데 이것도 줄이고자 한다면 주석을 하도록
            TextMgr.drawLine(CODE.MODE_BRACKET, "TimeMgr.Measuring_end()", "99EA");
            TimerMgr.duration = endTime - startTime;
            out.print(TimerMgr.duration);
            out.print(" ");
            out.print("밀리세크 지났습니다.");
            out.println();
        }

        public static void speakAfter(String MIN) {
            try {
                Thread.sleep(Integer.parseInt(MIN) * 60 * 1000);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
            out.print(Integer.parseInt(MIN));
            out.print(" ");
            out.print("분 지났습니다.");
            out.println();
        }
    }


    private static class ArrayListStringMgr {
        //별로 쓸모가 없나?....
        static ArrayList<String> ArrayListStr;
        static int START_NUM;
        static int END_NUM;
        static String MODE;

        public static void set(String START_NUM, String END_NUM, String MODE) {
            ArrayListStr = new ArrayList<>();
            ArrayListStringMgr.START_NUM = Integer.parseInt(START_NUM);
            ArrayListStringMgr.END_NUM = Integer.parseInt(END_NUM);
            ArrayListStringMgr.MODE = MODE;

            //START_NUM 에서 END_NUM 까지 ArrayListStr 에 저장 하도록
            for (int i = 0; i <= 100000; i++)
                ArrayListStr.add(Integer.toString(i));
        }

        public static void print() {
            if (MODE.equals(CODE.MODE_LONGITUDINAL)) {
                //ArrayListStr 를 세로로 console 에 출력 하도록
                System.out.println("[");
                for (String s : ArrayListStr)
                    System.out.println(s);
                System.out.println("]");
            }
            if (MODE.equals(CODE.MODE_LATERAL)) {
                //ArrayListStr 를 가로로 console 에 출력 하도록
                System.out.println(ArrayListStr.toString());
            }
            if (MODE.equals(CODE.MODE_DEFAULT)) {
                //ArrayListStr 를 가로로 console 에 출력 하도록
                System.out.println(ArrayListStr.toString());
            }


        }
    }

    private static class MaintennanceCodeMgr {
        public static void gen(String MODE, String STR_TO_EXPRESS, String EA) {
        }
    }

    private static class EncodedCodeMgr {

        //codeMgr 가 하면될것 같은데.  ...securityMgr ...
    }

    private static class DecodedCodeMgr {
    }

    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>_____  DEVELOPING_CODE_STORAGE

    private static void TEST_CODE_STORAGE() {
        //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>____
        TextMgr.drawPoliceLine("win10PcMgr.saveFileAddressAsTextFile();", "s");
        win10PcMgr.collectFileAddressAndSaveAsTextFile();
        TextMgr.drawPoliceLine("win10PcMgr.saveFileAddressAsTextFile();", "e");
        //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>____
        ScheduleMgr.MonitoringAndInform(CODE.WAY_MM);
        //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>____
        ProjectMgr.printCalendar("2022", "12");
        //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>____
        ArrayList<String[]> rows = new ArrayList<>();
        for (int i = 0; i <= rows.size() - 1; i++) {
            for (int j = 0; j <= rows.get(i).length - 1; j++) {
                out.println(rows.get(i)[j]);
            }
        }

        //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>____
        String TEXT_TO_REPLACE = "String routine1=\"가습기 끄기\n" +
                "String routine1=\"본사 단톡방 플로팅 띄우기\n" +
                "String routine1=\"에어콘 끄기\n" +
                "String routine1=\"창문 닫기\n" +
                "String routine1=\"철문 닫기";
        out.println(TextMgr.replaceDuplicatedSymbolToSequenceNumber(TEXT_TO_REPLACE, "1", "SEQUENCE_NUMBER"));
        out.println(TextMgr.CountUniqueWord(TEXT_TO_REPLACE, "1"));
        //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>____
        String text = "------------------------------------------------------------------------------------------------------------  합격자  \n" +
                "-- DORM.PASS_UNIT_TO_TB\n" +
                "SELECT * FROM PASS_UNIT_TO_TB putt;\n" +
                "SELECT * FROM PASS_UNIT_TO_TB putt WHERE RECRUIT_YEAR=2020;\n" +
                "SELECT * FROM PASS_UNIT_TO_TB putt WHERE RECRUIT_YEAR=2021;\n" +
                "SELECT * FROM PASS_UNIT_TO_TB putt WHERE RECRUIT_YEAR=2022;\n" +
                "SELECT * FROM PASS_UNIT_TO_TB\n" +
                "WHERE recruit_year\t='2022'\n" +
                "AND RECRUIT_CODE\t='2602000'\n" +
                "AND ACL_CD\t\t\t='2010000'\n" +
                "AND ACL_CD2\t        ='1902001'\n" +
                "AND ROOM_KIND\t\t='2803000'\n" +
                "AND SEX\t\t\t    ='1501000'\n";
        out.println(TextMgr.extractSQL(text, "WAY2"));
        //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>____
        TimerMgr.speakAfter("1");

        //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>____
        TimerMgr.Measuring_start();
        //작동시간을 테스트할 코드 s
        try {
            Thread.sleep(1500);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
        //작동시간을 테스트할 코드 e
        TimerMgr.Measuring_end();

        //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>____
        TableMgr tmp = new TableMgr
                .Builder("tmp")
                .setMode(CODE.BODY_CASE_UPPER, CODE.BODY_CASE_UPPER, CODE.DIVIDER_Y, CODE.WAY_DOT)
                .row("기본금액\t객실할인금액\t기타할인금액\t입사일수\t일할금액".split("\t"))
                .row("1,248,000\t0\t0\t112\t11,140".split("\t"))
                .row("1,084,000\t0\t0\t112\t9,670".split("\t"))
                .row("704,000\t0\t0\t112\t6,290".split("\t"))
                .row("1,778,000\t0\t0\t168\t11,140".split("\t"))
                .row("1,626,000\t82,000\t0\t168\t9,680".split("\t"))
                .row("1,057,000\t82,000\t0\t168\t6,290".split("\t"))
                .build();
        tmp.close();
        //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>____
        TableMgr tmp2 = new TableMgr();
        tmp2.SETMODE(CODE.BODY_CASE_UPPER, CODE.BODY_CASE_UPPER, CODE.DIVIDER_Y, CODE.WAY_DOT);
        String content = "기본금액\t객실할인금액\t기타할인금액\t입사일수\t일할금액\n" +
                "                1,248,000\t0\t0\t112\t11,140\n" +
                "                1,084,000\t0\t0\t112\t9,670\n" +
                "                704,000\t0\t0\t112\t6,290\n" +
                "                1,778,000\t0\t0\t168\t11,140\n" +
                "                1,626,000\t82,000\t0\t168\t9,680\n" +
                "                1,057,000\t82,000\t0\t168\t6,290";
        tmp2.SETROWS(content.split("\n"));
        tmp2.BUILD();

        //이쁘게 보는 용도
        String tmp_2022 = "기본금액\t객실할인금액\t기타할인금액\t입사일수\t일할금액\n" +
                "1,248,000\t0\t0\t112\t11,140\n" +
                "1,084,000\t0\t0\t112\t9,670\n" +
                "704,000\t0\t0\t112\t6,290\n" +
                "1,778,000\t0\t0\t168\t11,140\n" +
                "1,626,000\t82,000\t0\t168\t9,680\n" +
                "1,057,000\t82,000\t0\t168\t6,290";
        TextMgr.reassembleContentsAsTableAndPrint(tmp_2022, "\n", "\t");

        //번역용도
        String tmp_2001 = "기본금액\t객실할인금액\t기타할인금액\t입사일수\t일할금액\n" +
                "1,248,000\t0\t0\t112\t11,140\n" +
                "1,084,000\t0\t0\t112\t9,670\n" +
                "704,000\t0\t0\t112\t6,290\n" +
                "1,778,000\t0\t0\t168\t11,140\n" +
                "1,626,000\t82,000\t0\t168\t9,680\n" +
                "1,057,000\t82,000\t0\t168\t6,290";
        String tmp_2002 = TextMgr.translateTerminologyAsFollowingWordingPolicy(tmp_2001, "itcDormSystem");
        TextMgr.reassembleContentsAsTableAndPrint(tmp_2002, "\n", "%FOO%");
//                TextMgr.reassembleContentsAsTableAndPrint(tmp2, "\n", ",");
        //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>_____________________________________
        TextMgr.drawPoliceLine("extractSQL() test ", "s");
        String context = ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>_ 셀렉트 member_tb\n" +
                "     select * from member_tb where std_no ='202113178';\n" +
                "     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>_ 셀렉트 dorm_apply_tb\n" +
                "     select * from dorm_apply_tb where id_no='0108081024993' and recruit_year ='2022'and recruit_code='2602000';\n" +
                "     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>_ 셀렉트 in_amt_tb\n" +
                "     select * from in_amt_tb where id_no ='0108081024993' order by seq_no asc;\n" +
                "     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>_ 업데이트 dorm_apply_tb\n" +
                "     select * from dorm_apply_tb where id_no ='0108081024993' and recruit_year ='2022'and recruit_code='2602000';\n" +
                "     -- update dorm_apply_tb set del_yn='n',move_out_date ='0',move_out_code=null,move_out_memo=null   where id_no ='0108081024993' and recruit_year ='2022'and recruit_code='2602000';\n" +
                "     select * from dorm_apply_tb where id_no ='0108081024993' and recruit_year ='2022'and recruit_code='2602000';\n" +
                "     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>_ 업데이트 roomchange_hist_tb\n" +
                "     select * from roomchange_hist_tb where id_no ='0108081024993' and recruit_year ='2022'and recruit_code='2602000';\n" +
                "     -- update  roomchange_hist_tb set out_date =null where id_no ='0108081024993' and recruit_year ='2022'and recruit_code='2602000';\n" +
                "     select * from roomchange_hist_tb where id_no ='0108081024993' and recruit_year ='2022'and recruit_code='2602000';\n" +
                "     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>_ 델리트 moveout_apply_tb\n" +
                "     select * from moveout_apply_tb where id_no ='0108081024993' and recruit_year ='2022'and recruit_code='2602000';\n" +
                "     -- delete moveout_apply_tb where id_no ='0108081024993' and recruit_year ='2022'and recruit_code='2602000';\n" +
                "     select * from moveout_apply_tb where id_no ='0108081024993' and recruit_year ='2022'and recruit_code='2602000';\n" +
                "     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>_ 업데이트 account_tb\n" +
                "     select * from account_tb where virtual_account = '27981652218190';\n" +
                "     -- update account_tb set use_yn = 'y'  where virtual_account = '27981652218190';\n" +
                "     select * from account_tb where virtual_account = '27981652218190';\n" +
                "     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>_ 끝";
        TextMgr.drawPoliceLine("WAY_JSP_QUERY_TO_SQL", "s");
        String tmp_2022_12_15_15_59;
        tmp_2022_12_15_15_59 = context.replaceAll("\" \\+ ", "");
        tmp_2022_12_15_15_59 = tmp_2022_12_15_15_59.replaceAll(" \\+ \"", "");
        tmp_2022_12_15_15_59 = tmp_2022_12_15_15_59.replaceAll("ht.get\\(\"", "");
        tmp_2022_12_15_15_59 = tmp_2022_12_15_15_59.replaceAll("\"\\)", "");
        out.println(tmp_2022_12_15_15_59);
        TextMgr.drawPoliceLine("WAY_JSP_QUERY_TO_SQL", "e");
        TextMgr.drawPoliceLine("customized_2022_12_15_15_54", "s");
        String tmp2022_12_15_15_57 = TextMgr.extractSQL(context, "WAY1");
        String tmp3 = TextMgr.extractSQL(tmp2022_12_15_15_57, "WAY2");
        String tmp4 = TextMgr.extractSQL(tmp3, "WAY3");
        out.println(tmp4);
        out.println();
        out.println();
        out.println();
        out.println();
        String tmp5 = tmp4.replaceAll("\"\\\\n", "");
        out.println(tmp5);
        TextMgr.drawPoliceLine("customized_2022_12_15_15_54", "e");
        TextMgr.drawPoliceLine("WAY_CUSTOM2", "s");
        String tmp11 = TextMgr.extractSQL(context, "WAY_CUSTOM2");
        String tmp22 = TextMgr.addPrefixToAllLine("sql.append(\"\\n\").append(\"", tmp11);
        String tmp33 = TextMgr.addSuffixToAllLine("\");", tmp22);
        out.println(tmp33);
        TextMgr.drawPoliceLine("WAY_CUSTOM2", "e");
        TextMgr.drawPoliceLine("WAY2 and 3", "s");
        String tmp221501 = TextMgr.extractSQL(context, "WAY2");
        String tmp221500 = TextMgr.extractSQL(tmp221501, "WAY3");
        out.println(tmp221500);
        TextMgr.drawPoliceLine("WAY2 and 3", "e");
        TextMgr.drawPoliceLine("extractSQL() test ", "e");
        //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>____
        TextMgr.drawPoliceLine("addPrefixToAllLine() test", "s");

        String context_2022_12_15_16_17 = "  <script>\n" +
                "        var uid=\"withvision\";\n" +
                "        var pwd=\"6952!itc\";\n" +
                "        \n" +
                "        var form_fm = document.createElement(\"form\");\n" +
                "        form_fm.setAttribute(\"name\", \"fm\");\n" +
                "        form_fm.setAttribute(\"charset\", \"UTF-8\");\n" +
                "        form_fm.setAttribute(\"method\", \"Post\");\n" +
                "        form_fm.setAttribute(\"action\", \"/RPA.html\");\n" +
                "\n" +
                "        var uid_input = document.createElement(\"input\");\n" +
                "        uid_input.setAttribute(\"type\", \"hidden\");\n" +
                "        uid_input.setAttribute(\"name\", \"uid\");\n" +
                "        uid_input.setAttribute(\"value\", uid);\n" +
                "        form_fm.appendChild(uid_input);\n" +
                "\n" +
                "        var pwd_input = document.createElement(\"input\");\n" +
                "        pwd_input.setAttribute(\"type\", \"hidden\");\n" +
                "        pwd_input.setAttribute(\"name\", \"pwd\");\n" +
                "        pwd_input.setAttribute(\"value\", pwd);\n" +
                "        form_fm.appendChild(pwd_input);\n" +
                "\n" +
                "        document.body.appendChild(form_fm);\n" +
                "        form_fm.submit();\n" +
                "        //document.form_fm.submit();\n" +
                "    </script>";
        String tmp_2022_12_15_16_11_44 = TextMgr.addPrefixToAllLine("sb.append(\"", context_2022_12_15_16_17.replaceAll("\"", "\'"));
        String tmp_2022_12_15_16_11_19 = TextMgr.addSuffixToAllLine("\");", tmp_2022_12_15_16_11_44);
        out.println(tmp_2022_12_15_16_11_19);
        TextMgr.drawPoliceLine("addPrefixToAllLine() test", "e");
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>____

        TextMgr.drawPoliceLine("reassembleContentsAsTableAndPrint() test", "s");
        String content11 = "기숙사구문   업무항목                                  \n" +
                "\n" +
                "itc \twithv dorm sys 운영 서버 접속 설정 s\n" +
                "itc \twithv dorm sys 운영 서버 접속 설정 e             ";
        TableMgr tmp222 = new TableMgr();
        tmp222.SETMODE(CODE.BODY_CASE_UPPER, CODE.BODY_CASE_UPPER, CODE.DIVIDER_Y, CODE.WAY_DOT);
        tmp222.SETROWS(content11.split("\n"));
        tmp222.BUILD();

        //이쁘게 보는 용도
        TextMgr.reassembleContentsAsTableAndPrint(content11, "\n", "\t");

        //번역용도
        String tmp_translated = TextMgr.translateTerminologyAsFollowingWordingPolicy(content, "itcDormSystem");
        TextMgr.reassembleContentsAsTableAndPrint(tmp_translated, "\n", "%FOO%");
//                TextMgr.reassembleContentsAsTableAndPrint(tmp2, "\n", ",");
        TextMgr.drawPoliceLine("reassemblecontentsastableandprint() test", "e");
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>____
        TextMgr.drawPoliceLine("align() test", "s");
        String Text = "       입사 거짓정보(합격TO)표기현상확인 )                       \n" +
                "       입사 미배정자합격 )                                    \n" +
                "       입사 불합격조회시 합격취소 )                             \n" +
                "       입사 입사기간변경 )                                    \n" +
                "       입사 입사기간생성 )                                    \n" +
                "       입사 입사기간설정 )                                    \n" +
                "       입사 입사신청불가현상확인 )                              \n" +
                "       입사 입사신청시 거짓정보(외국인)표기현상확인 및 변경 )         \n" +
                "       입사 입사신청이력확인 )                                 \n" +
                "       입사 입사취소 )                                       \n" +
                "       입사 재학생으로업데이트 )                               \n" +
                "       입사 학적수동연동 )                                    \n" +
                "       입사 학적추가 )                                       \n" +
                "       입사 합격일자확인 )                                    \n" +
                "       입사 합격자선정시 거짓정보(외국인)표기현상확인 )              \n" +
                "       회계 기타 )                                          \n" +
                "       회계 입금취소 )                                       \n" +
                "       회계 환불기타 )                                       \n" +
                "       회계 환불시금액산정기준확인 )                            \n" +
                "       운영 교육영상 )                                       \n" +
                "       운영 외박신청승인 )                                    \n" +
                "       운영 출입등록 )                                       \n" +
                "       운영 출입연동확인 )                                    \n" +
                "       운영 출입이력확인 )                                    \n" +
                "       미분류 )                                            \n" +
                "ver ip/port, client program id/pw ...)                   \n" +
                "ver ip/port, client program id/pw ...)                   \n" +
                "  )                                                      \n" +
                "  )                             \t                     \n";
        // divide as (
        System.out.println(TextMgr.align(Text, ")", "3"));
        // divide as =
//                System.out.println(TextMgr.align(Text, "=", "3"));
        TextMgr.drawPoliceLine("align() test", "e");
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>____
        ArrayListStringMgr.set("0", "100000", CODE.MODE_LONGITUDINAL);
        ArrayListStringMgr.print();
    }

    private static void DEPRECATING_CODE_STORAGE() {


    }

    private static void TRASH_CODE_STORAGE() {

    }

    /*
           회사에서 사용코드를 보니 usr 에게 보여지는 argument, string literal 을 변경해야 하는 경우가 많이 발생을 하는데
           개념이 변경이 아니라 보여지는 명칭만 바뀌는 경우라면 CODE로 처리 하는 것이 좋은 것 같습니다.
           String literal 이나 특별한 값을 숨길 수도 있도록
           마치 그냥 메모의 개념으로도 사용할 수도 있도록
         */
    public static class CODE {
        public static final String WAY_ss = "ss 단위로 모니터링하여 INFROM  하도록";
        public static final String WAY_QUESTIONMARK = "way that TB will try to replace kor to ?.";
        public static final String WAY_MM = "MM 단위로 모니터링하여 INFROM  하도록";
        public static final String WAY_DOT = "way that TB will try to leave values that and lower than ref number, if greater than ref number and add prefix as '.'(dot). ";
        public static final String WAY_DEFAULT = "way that TB will try not to apply compensating value and replace kor to '?' ";
        public static final String WAY_COMPENSATING_VALUE = "way that TB will try to apply compensating value as 1x (could be set ... 2x ... nx by setting hard cording";
        public static final String MODE_WITH_REVERSE = "";
        public static final String MODE_WITHOUT_REVERSE = "";
        public static final String MODE_REGEX_REPLACE_WITHOUT_A_TO_Z_TO_TOSTR = "";// 이런 DEAD_CODE 도 지우지 않도록....나중에 쓰려고 만든 코드이니까
        public static final String MODE_REGEX_REPLACE_WITHOUT_0_TO_9_TO_TOSTR = "숫자만 빼고 underbar 로 치환";
        public static final String MODE_REGEX_REPLACE_SOMETHING_COMPLEX_WAY6 = "";
        public static final String MODE_REGEX_REPLACE_SOMETHING_COMPLEX_WAY5 = "자주쓰는 스타일";
        public static final String MODE_REGEX_REPLACE_SOMETHING_COMPLEX_WAY4 = "자주쓰는 스타일";
        public static final String MODE_REGEX_REPLACE_SOMETHING_COMPLEX_WAY3 = "";
        public static final String MODE_REGEX_REPLACE_SOMETHING_COMPLEX_WAY2 = "자주쓰는 스타일";
        public static final String MODE_REGEX_REPLACE_SOMETHING_COMPLEX_WAY1 = "자주쓰는 스타일";
        public static final String MODE_REGEX_REPLACE_SIGMA_0_9 = "숫자만 underbar 로 치환";
        public static final String MODE_REGEX_REPLACE_A_TO_Z_TO_TOSTR = "";
        public static final String MODE_REGEX_REPLACE_a_TO_z_TO_TOSTR = "";
        public static final String MODE_REGEX_REPLACE_a_TO_z = "";
        public static final String MODE_LONGITUDINAL = "가로로 출력 되도록";
        public static final String MODE_LATERAL = "세로로 출력 되도록";
        public static final String MODE_DEFAULT = "MODE_DEFAULT";
        public static final String MODE_BRACKET = "MODE_BRACKET";
        public static final String HEAD_CASE_UPPER = "UPPER";
        public static final String HEAD_CASE_LOWER = "LOWER";
        public static final String HEAD_CASE_DEFAULT = "DEFAULT";
        public static final String DIVIDER_Y = "Y";
        public static final String DIVIDER_N = "N";
        public static final String DIVIDER_DEFAULT = "DEFAULT";
        public static final String BODY_CASE_UPPER = "UPPER";
        public static final String BODY_CASE_LOWER = "LOWER";
        public static final String BODY_CASE_DEFAULT = "DEFAULT";

    }// 이거 좀 별로인데... 다른 replacement 없나..


}



